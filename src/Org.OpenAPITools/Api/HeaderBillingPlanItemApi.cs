/*
 * Sales Order (A2X)
 *
 * In every API call, you can make use of the following operations:   - You can read entire sales orders or only parts of the data, using the provided filters.   - You can create sales orders. You can use deep insert requests, that is, you create a header plus at least one of the following entities: header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, header related object, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object.   If the header already exists, you can create the following sub-entities on their own: header partner, header pricing element, header text, payment plan, header related object, item partner, item pricing element, item text, and item related object.   - For existing sales orders, you can create new items. You can use deep insert requests, that is, you create an item plus at least one of the following entities: item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object. If the item already exists, you can create the following sub-entities on their own: item partner, item pricing element, item text, item related object, and item schedule line.   - For existing sales orders, you can update the following entities (that is, you can change the content of their properties): header, header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item schedule line.   - For existing sales orders, you can delete the following entities: header, header partner, header pricing element, header billing plan item, header text, payment plan, header related object, item, item partner, item pricing element, item billing plan item, item text, item related object, and item schedule line.   - You can accept or deny approval requests for sales orders that cannot be processed without the consent of an approver.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHeaderBillingPlanItemApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Reads the billing plan items of all sales orders.
        /// </summary>
        /// <remarks>
        /// Reads the billing plan item data from the headers of all sales orders in the system.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Wrapper10</returns>
        Wrapper10 ASalesOrderBillingPlanItemGet(int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Reads the billing plan items of all sales orders.
        /// </summary>
        /// <remarks>
        /// Reads the billing plan item data from the headers of all sales orders in the system.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Wrapper10</returns>
        ApiResponse<Wrapper10> ASalesOrderBillingPlanItemGetWithHttpInfo(int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Creates a billing plan item of a sales order.
        /// </summary>
        /// <remarks>
        /// Creates a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ASalesOrderBillingPlanItemType</returns>
        ASalesOrderBillingPlanItemType ASalesOrderBillingPlanItemPost(APISALESORDERSRVASalesOrderBillingPlanItemTypeCreate aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate, int operationIndex = 0);

        /// <summary>
        /// Creates a billing plan item of a sales order.
        /// </summary>
        /// <remarks>
        /// Creates a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ASalesOrderBillingPlanItemType</returns>
        ApiResponse<ASalesOrderBillingPlanItemType> ASalesOrderBillingPlanItemPostWithHttpInfo(APISALESORDERSRVASalesOrderBillingPlanItemTypeCreate aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate, int operationIndex = 0);
        /// <summary>
        /// Deletes a billing plan item of a sales order.
        /// </summary>
        /// <remarks>
        /// Deletes a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete(string salesOrder, string billingPlan, string billingPlanItem, int operationIndex = 0);

        /// <summary>
        /// Deletes a billing plan item of a sales order.
        /// </summary>
        /// <remarks>
        /// Deletes a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemDeleteWithHttpInfo(string salesOrder, string billingPlan, string billingPlanItem, int operationIndex = 0);
        /// <summary>
        /// Reads a billing plan item of a sales order.
        /// </summary>
        /// <remarks>
        /// Reads a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ASalesOrderBillingPlanItemType</returns>
        ASalesOrderBillingPlanItemType ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet(string salesOrder, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Reads a billing plan item of a sales order.
        /// </summary>
        /// <remarks>
        /// Reads a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ASalesOrderBillingPlanItemType</returns>
        ApiResponse<ASalesOrderBillingPlanItemType> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemGetWithHttpInfo(string salesOrder, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Updates a billing plan item of a sales order.
        /// </summary>
        /// <remarks>
        /// Updates a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="modifiedASalesOrderBillingPlanItemType">New property values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch(string salesOrder, string billingPlan, string billingPlanItem, ModifiedASalesOrderBillingPlanItemType modifiedASalesOrderBillingPlanItemType, int operationIndex = 0);

        /// <summary>
        /// Updates a billing plan item of a sales order.
        /// </summary>
        /// <remarks>
        /// Updates a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="modifiedASalesOrderBillingPlanItemType">New property values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatchWithHttpInfo(string salesOrder, string billingPlan, string billingPlanItem, ModifiedASalesOrderBillingPlanItemType modifiedASalesOrderBillingPlanItemType, int operationIndex = 0);
        /// <summary>
        /// Reads the billing plan of a billing plan item of a sales order header.
        /// </summary>
        /// <remarks>
        /// Reads the billing plan data for a specific billing plan item of a specific sales order header. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ASalesOrderBillingPlanType</returns>
        ASalesOrderBillingPlanType ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet(string salesOrder, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Reads the billing plan of a billing plan item of a sales order header.
        /// </summary>
        /// <remarks>
        /// Reads the billing plan data for a specific billing plan item of a specific sales order header. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ASalesOrderBillingPlanType</returns>
        ApiResponse<ASalesOrderBillingPlanType> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGetWithHttpInfo(string salesOrder, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Reads the sales order header for a billing plan item of a sales order.
        /// </summary>
        /// <remarks>
        /// Reads the sales order header data for a specific billing plan item of a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ASalesOrderType</returns>
        ASalesOrderType ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet(string salesOrder, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Reads the sales order header for a billing plan item of a sales order.
        /// </summary>
        /// <remarks>
        /// Reads the sales order header data for a specific billing plan item of a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ASalesOrderType</returns>
        ApiResponse<ASalesOrderType> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGetWithHttpInfo(string salesOrder, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Reads the billing plan items of a sales order billing plan.
        /// </summary>
        /// <remarks>
        /// Reads the billing plan item data for a specific sales order billing plan. Consumers must pass the following key fields: sales order ID and number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Wrapper10</returns>
        Wrapper10 ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemGet(string salesOrder, string billingPlan, int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Reads the billing plan items of a sales order billing plan.
        /// </summary>
        /// <remarks>
        /// Reads the billing plan item data for a specific sales order billing plan. Consumers must pass the following key fields: sales order ID and number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Wrapper10</returns>
        ApiResponse<Wrapper10> ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemGetWithHttpInfo(string salesOrder, string billingPlan, int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Creates a billing plan item for a sales order billing plan.
        /// </summary>
        /// <remarks>
        /// Creates a billing plan item for a specific sales order billing plan. Consumers must pass the following key fields: sales order ID and number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ASalesOrderBillingPlanItemType</returns>
        ASalesOrderBillingPlanItemType ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemPost(string salesOrder, string billingPlan, APISALESORDERSRVASalesOrderBillingPlanItemTypeCreate aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate, int operationIndex = 0);

        /// <summary>
        /// Creates a billing plan item for a sales order billing plan.
        /// </summary>
        /// <remarks>
        /// Creates a billing plan item for a specific sales order billing plan. Consumers must pass the following key fields: sales order ID and number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ASalesOrderBillingPlanItemType</returns>
        ApiResponse<ASalesOrderBillingPlanItemType> ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemPostWithHttpInfo(string salesOrder, string billingPlan, APISALESORDERSRVASalesOrderBillingPlanItemTypeCreate aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHeaderBillingPlanItemApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Reads the billing plan items of all sales orders.
        /// </summary>
        /// <remarks>
        /// Reads the billing plan item data from the headers of all sales orders in the system.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Wrapper10</returns>
        System.Threading.Tasks.Task<Wrapper10> ASalesOrderBillingPlanItemGetAsync(int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Reads the billing plan items of all sales orders.
        /// </summary>
        /// <remarks>
        /// Reads the billing plan item data from the headers of all sales orders in the system.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Wrapper10)</returns>
        System.Threading.Tasks.Task<ApiResponse<Wrapper10>> ASalesOrderBillingPlanItemGetWithHttpInfoAsync(int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Creates a billing plan item of a sales order.
        /// </summary>
        /// <remarks>
        /// Creates a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ASalesOrderBillingPlanItemType</returns>
        System.Threading.Tasks.Task<ASalesOrderBillingPlanItemType> ASalesOrderBillingPlanItemPostAsync(APISALESORDERSRVASalesOrderBillingPlanItemTypeCreate aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Creates a billing plan item of a sales order.
        /// </summary>
        /// <remarks>
        /// Creates a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ASalesOrderBillingPlanItemType)</returns>
        System.Threading.Tasks.Task<ApiResponse<ASalesOrderBillingPlanItemType>> ASalesOrderBillingPlanItemPostWithHttpInfoAsync(APISALESORDERSRVASalesOrderBillingPlanItemTypeCreate aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a billing plan item of a sales order.
        /// </summary>
        /// <remarks>
        /// Deletes a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemDeleteAsync(string salesOrder, string billingPlan, string billingPlanItem, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a billing plan item of a sales order.
        /// </summary>
        /// <remarks>
        /// Deletes a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemDeleteWithHttpInfoAsync(string salesOrder, string billingPlan, string billingPlanItem, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Reads a billing plan item of a sales order.
        /// </summary>
        /// <remarks>
        /// Reads a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ASalesOrderBillingPlanItemType</returns>
        System.Threading.Tasks.Task<ASalesOrderBillingPlanItemType> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemGetAsync(string salesOrder, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Reads a billing plan item of a sales order.
        /// </summary>
        /// <remarks>
        /// Reads a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ASalesOrderBillingPlanItemType)</returns>
        System.Threading.Tasks.Task<ApiResponse<ASalesOrderBillingPlanItemType>> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemGetWithHttpInfoAsync(string salesOrder, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Updates a billing plan item of a sales order.
        /// </summary>
        /// <remarks>
        /// Updates a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="modifiedASalesOrderBillingPlanItemType">New property values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatchAsync(string salesOrder, string billingPlan, string billingPlanItem, ModifiedASalesOrderBillingPlanItemType modifiedASalesOrderBillingPlanItemType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Updates a billing plan item of a sales order.
        /// </summary>
        /// <remarks>
        /// Updates a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="modifiedASalesOrderBillingPlanItemType">New property values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatchWithHttpInfoAsync(string salesOrder, string billingPlan, string billingPlanItem, ModifiedASalesOrderBillingPlanItemType modifiedASalesOrderBillingPlanItemType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Reads the billing plan of a billing plan item of a sales order header.
        /// </summary>
        /// <remarks>
        /// Reads the billing plan data for a specific billing plan item of a specific sales order header. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ASalesOrderBillingPlanType</returns>
        System.Threading.Tasks.Task<ASalesOrderBillingPlanType> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGetAsync(string salesOrder, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Reads the billing plan of a billing plan item of a sales order header.
        /// </summary>
        /// <remarks>
        /// Reads the billing plan data for a specific billing plan item of a specific sales order header. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ASalesOrderBillingPlanType)</returns>
        System.Threading.Tasks.Task<ApiResponse<ASalesOrderBillingPlanType>> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGetWithHttpInfoAsync(string salesOrder, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Reads the sales order header for a billing plan item of a sales order.
        /// </summary>
        /// <remarks>
        /// Reads the sales order header data for a specific billing plan item of a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ASalesOrderType</returns>
        System.Threading.Tasks.Task<ASalesOrderType> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGetAsync(string salesOrder, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Reads the sales order header for a billing plan item of a sales order.
        /// </summary>
        /// <remarks>
        /// Reads the sales order header data for a specific billing plan item of a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ASalesOrderType)</returns>
        System.Threading.Tasks.Task<ApiResponse<ASalesOrderType>> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGetWithHttpInfoAsync(string salesOrder, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Reads the billing plan items of a sales order billing plan.
        /// </summary>
        /// <remarks>
        /// Reads the billing plan item data for a specific sales order billing plan. Consumers must pass the following key fields: sales order ID and number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Wrapper10</returns>
        System.Threading.Tasks.Task<Wrapper10> ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemGetAsync(string salesOrder, string billingPlan, int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Reads the billing plan items of a sales order billing plan.
        /// </summary>
        /// <remarks>
        /// Reads the billing plan item data for a specific sales order billing plan. Consumers must pass the following key fields: sales order ID and number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Wrapper10)</returns>
        System.Threading.Tasks.Task<ApiResponse<Wrapper10>> ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemGetWithHttpInfoAsync(string salesOrder, string billingPlan, int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Creates a billing plan item for a sales order billing plan.
        /// </summary>
        /// <remarks>
        /// Creates a billing plan item for a specific sales order billing plan. Consumers must pass the following key fields: sales order ID and number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ASalesOrderBillingPlanItemType</returns>
        System.Threading.Tasks.Task<ASalesOrderBillingPlanItemType> ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemPostAsync(string salesOrder, string billingPlan, APISALESORDERSRVASalesOrderBillingPlanItemTypeCreate aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Creates a billing plan item for a sales order billing plan.
        /// </summary>
        /// <remarks>
        /// Creates a billing plan item for a specific sales order billing plan. Consumers must pass the following key fields: sales order ID and number of the header billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ASalesOrderBillingPlanItemType)</returns>
        System.Threading.Tasks.Task<ApiResponse<ASalesOrderBillingPlanItemType>> ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemPostWithHttpInfoAsync(string salesOrder, string billingPlan, APISALESORDERSRVASalesOrderBillingPlanItemTypeCreate aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHeaderBillingPlanItemApi : IHeaderBillingPlanItemApiSync, IHeaderBillingPlanItemApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class HeaderBillingPlanItemApi : IHeaderBillingPlanItemApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HeaderBillingPlanItemApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HeaderBillingPlanItemApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HeaderBillingPlanItemApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HeaderBillingPlanItemApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HeaderBillingPlanItemApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public HeaderBillingPlanItemApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HeaderBillingPlanItemApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public HeaderBillingPlanItemApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Reads the billing plan items of all sales orders. Reads the billing plan item data from the headers of all sales orders in the system.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Wrapper10</returns>
        public Wrapper10 ASalesOrderBillingPlanItemGet(int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Wrapper10> localVarResponse = ASalesOrderBillingPlanItemGetWithHttpInfo(top, skip, filter, inlinecount, orderby, select, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads the billing plan items of all sales orders. Reads the billing plan item data from the headers of all sales orders in the system.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Wrapper10</returns>
        public Org.OpenAPITools.Client.ApiResponse<Wrapper10> ASalesOrderBillingPlanItemGetWithHttpInfo(int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (inlinecount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$inlinecount", inlinecount));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$orderby", orderby));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$select", select));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$expand", expand));
            }

            localVarRequestOptions.Operation = "HeaderBillingPlanItemApi.ASalesOrderBillingPlanItemGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Wrapper10>("/A_SalesOrderBillingPlanItem", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASalesOrderBillingPlanItemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reads the billing plan items of all sales orders. Reads the billing plan item data from the headers of all sales orders in the system.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Wrapper10</returns>
        public async System.Threading.Tasks.Task<Wrapper10> ASalesOrderBillingPlanItemGetAsync(int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Wrapper10> localVarResponse = await ASalesOrderBillingPlanItemGetWithHttpInfoAsync(top, skip, filter, inlinecount, orderby, select, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads the billing plan items of all sales orders. Reads the billing plan item data from the headers of all sales orders in the system.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Wrapper10)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Wrapper10>> ASalesOrderBillingPlanItemGetWithHttpInfoAsync(int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (inlinecount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$inlinecount", inlinecount));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$orderby", orderby));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$select", select));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$expand", expand));
            }

            localVarRequestOptions.Operation = "HeaderBillingPlanItemApi.ASalesOrderBillingPlanItemGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Wrapper10>("/A_SalesOrderBillingPlanItem", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASalesOrderBillingPlanItemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a billing plan item of a sales order. Creates a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ASalesOrderBillingPlanItemType</returns>
        public ASalesOrderBillingPlanItemType ASalesOrderBillingPlanItemPost(APISALESORDERSRVASalesOrderBillingPlanItemTypeCreate aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ASalesOrderBillingPlanItemType> localVarResponse = ASalesOrderBillingPlanItemPostWithHttpInfo(aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a billing plan item of a sales order. Creates a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ASalesOrderBillingPlanItemType</returns>
        public Org.OpenAPITools.Client.ApiResponse<ASalesOrderBillingPlanItemType> ASalesOrderBillingPlanItemPostWithHttpInfo(APISALESORDERSRVASalesOrderBillingPlanItemTypeCreate aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate, int operationIndex = 0)
        {
            // verify the required parameter 'aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate' is set
            if (aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate;

            localVarRequestOptions.Operation = "HeaderBillingPlanItemApi.ASalesOrderBillingPlanItemPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ASalesOrderBillingPlanItemType>("/A_SalesOrderBillingPlanItem", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASalesOrderBillingPlanItemPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a billing plan item of a sales order. Creates a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ASalesOrderBillingPlanItemType</returns>
        public async System.Threading.Tasks.Task<ASalesOrderBillingPlanItemType> ASalesOrderBillingPlanItemPostAsync(APISALESORDERSRVASalesOrderBillingPlanItemTypeCreate aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ASalesOrderBillingPlanItemType> localVarResponse = await ASalesOrderBillingPlanItemPostWithHttpInfoAsync(aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a billing plan item of a sales order. Creates a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ASalesOrderBillingPlanItemType)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ASalesOrderBillingPlanItemType>> ASalesOrderBillingPlanItemPostWithHttpInfoAsync(APISALESORDERSRVASalesOrderBillingPlanItemTypeCreate aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate' is set
            if (aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate;

            localVarRequestOptions.Operation = "HeaderBillingPlanItemApi.ASalesOrderBillingPlanItemPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ASalesOrderBillingPlanItemType>("/A_SalesOrderBillingPlanItem", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASalesOrderBillingPlanItemPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a billing plan item of a sales order. Deletes a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete(string salesOrder, string billingPlan, string billingPlanItem, int operationIndex = 0)
        {
            ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemDeleteWithHttpInfo(salesOrder, billingPlan, billingPlanItem);
        }

        /// <summary>
        /// Deletes a billing plan item of a sales order. Deletes a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemDeleteWithHttpInfo(string salesOrder, string billingPlan, string billingPlanItem, int operationIndex = 0)
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete");
            }

            // verify the required parameter 'billingPlanItem' is set
            if (billingPlanItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlanItem' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlanItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlanItem)); // path parameter

            localVarRequestOptions.Operation = "HeaderBillingPlanItemApi.ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/A_SalesOrderBillingPlanItem(SalesOrder='{SalesOrder}',BillingPlan='{BillingPlan}',BillingPlanItem='{BillingPlanItem}')", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a billing plan item of a sales order. Deletes a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemDeleteAsync(string salesOrder, string billingPlan, string billingPlanItem, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemDeleteWithHttpInfoAsync(salesOrder, billingPlan, billingPlanItem, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a billing plan item of a sales order. Deletes a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemDeleteWithHttpInfoAsync(string salesOrder, string billingPlan, string billingPlanItem, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete");
            }

            // verify the required parameter 'billingPlanItem' is set
            if (billingPlanItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlanItem' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlanItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlanItem)); // path parameter

            localVarRequestOptions.Operation = "HeaderBillingPlanItemApi.ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/A_SalesOrderBillingPlanItem(SalesOrder='{SalesOrder}',BillingPlan='{BillingPlan}',BillingPlanItem='{BillingPlanItem}')", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reads a billing plan item of a sales order. Reads a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ASalesOrderBillingPlanItemType</returns>
        public ASalesOrderBillingPlanItemType ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet(string salesOrder, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ASalesOrderBillingPlanItemType> localVarResponse = ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemGetWithHttpInfo(salesOrder, billingPlan, billingPlanItem, select, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads a billing plan item of a sales order. Reads a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ASalesOrderBillingPlanItemType</returns>
        public Org.OpenAPITools.Client.ApiResponse<ASalesOrderBillingPlanItemType> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemGetWithHttpInfo(string salesOrder, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet");
            }

            // verify the required parameter 'billingPlanItem' is set
            if (billingPlanItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlanItem' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlanItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlanItem)); // path parameter
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$select", select));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$expand", expand));
            }

            localVarRequestOptions.Operation = "HeaderBillingPlanItemApi.ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ASalesOrderBillingPlanItemType>("/A_SalesOrderBillingPlanItem(SalesOrder='{SalesOrder}',BillingPlan='{BillingPlan}',BillingPlanItem='{BillingPlanItem}')", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reads a billing plan item of a sales order. Reads a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ASalesOrderBillingPlanItemType</returns>
        public async System.Threading.Tasks.Task<ASalesOrderBillingPlanItemType> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemGetAsync(string salesOrder, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ASalesOrderBillingPlanItemType> localVarResponse = await ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemGetWithHttpInfoAsync(salesOrder, billingPlan, billingPlanItem, select, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads a billing plan item of a sales order. Reads a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ASalesOrderBillingPlanItemType)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ASalesOrderBillingPlanItemType>> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemGetWithHttpInfoAsync(string salesOrder, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet");
            }

            // verify the required parameter 'billingPlanItem' is set
            if (billingPlanItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlanItem' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlanItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlanItem)); // path parameter
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$select", select));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$expand", expand));
            }

            localVarRequestOptions.Operation = "HeaderBillingPlanItemApi.ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ASalesOrderBillingPlanItemType>("/A_SalesOrderBillingPlanItem(SalesOrder='{SalesOrder}',BillingPlan='{BillingPlan}',BillingPlanItem='{BillingPlanItem}')", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a billing plan item of a sales order. Updates a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="modifiedASalesOrderBillingPlanItemType">New property values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch(string salesOrder, string billingPlan, string billingPlanItem, ModifiedASalesOrderBillingPlanItemType modifiedASalesOrderBillingPlanItemType, int operationIndex = 0)
        {
            ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatchWithHttpInfo(salesOrder, billingPlan, billingPlanItem, modifiedASalesOrderBillingPlanItemType);
        }

        /// <summary>
        /// Updates a billing plan item of a sales order. Updates a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="modifiedASalesOrderBillingPlanItemType">New property values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatchWithHttpInfo(string salesOrder, string billingPlan, string billingPlanItem, ModifiedASalesOrderBillingPlanItemType modifiedASalesOrderBillingPlanItemType, int operationIndex = 0)
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch");
            }

            // verify the required parameter 'billingPlanItem' is set
            if (billingPlanItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlanItem' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch");
            }

            // verify the required parameter 'modifiedASalesOrderBillingPlanItemType' is set
            if (modifiedASalesOrderBillingPlanItemType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modifiedASalesOrderBillingPlanItemType' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlanItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlanItem)); // path parameter
            localVarRequestOptions.Data = modifiedASalesOrderBillingPlanItemType;

            localVarRequestOptions.Operation = "HeaderBillingPlanItemApi.ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/A_SalesOrderBillingPlanItem(SalesOrder='{SalesOrder}',BillingPlan='{BillingPlan}',BillingPlanItem='{BillingPlanItem}')", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a billing plan item of a sales order. Updates a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="modifiedASalesOrderBillingPlanItemType">New property values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatchAsync(string salesOrder, string billingPlan, string billingPlanItem, ModifiedASalesOrderBillingPlanItemType modifiedASalesOrderBillingPlanItemType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatchWithHttpInfoAsync(salesOrder, billingPlan, billingPlanItem, modifiedASalesOrderBillingPlanItemType, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates a billing plan item of a sales order. Updates a specific billing plan item for a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="modifiedASalesOrderBillingPlanItemType">New property values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatchWithHttpInfoAsync(string salesOrder, string billingPlan, string billingPlanItem, ModifiedASalesOrderBillingPlanItemType modifiedASalesOrderBillingPlanItemType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch");
            }

            // verify the required parameter 'billingPlanItem' is set
            if (billingPlanItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlanItem' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch");
            }

            // verify the required parameter 'modifiedASalesOrderBillingPlanItemType' is set
            if (modifiedASalesOrderBillingPlanItemType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modifiedASalesOrderBillingPlanItemType' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlanItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlanItem)); // path parameter
            localVarRequestOptions.Data = modifiedASalesOrderBillingPlanItemType;

            localVarRequestOptions.Operation = "HeaderBillingPlanItemApi.ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/A_SalesOrderBillingPlanItem(SalesOrder='{SalesOrder}',BillingPlan='{BillingPlan}',BillingPlanItem='{BillingPlanItem}')", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reads the billing plan of a billing plan item of a sales order header. Reads the billing plan data for a specific billing plan item of a specific sales order header. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ASalesOrderBillingPlanType</returns>
        public ASalesOrderBillingPlanType ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet(string salesOrder, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ASalesOrderBillingPlanType> localVarResponse = ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGetWithHttpInfo(salesOrder, billingPlan, billingPlanItem, select, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads the billing plan of a billing plan item of a sales order header. Reads the billing plan data for a specific billing plan item of a specific sales order header. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ASalesOrderBillingPlanType</returns>
        public Org.OpenAPITools.Client.ApiResponse<ASalesOrderBillingPlanType> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGetWithHttpInfo(string salesOrder, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet");
            }

            // verify the required parameter 'billingPlanItem' is set
            if (billingPlanItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlanItem' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlanItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlanItem)); // path parameter
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$select", select));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$expand", expand));
            }

            localVarRequestOptions.Operation = "HeaderBillingPlanItemApi.ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ASalesOrderBillingPlanType>("/A_SalesOrderBillingPlanItem(SalesOrder='{SalesOrder}',BillingPlan='{BillingPlan}',BillingPlanItem='{BillingPlanItem}')/to_BillingPlan", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reads the billing plan of a billing plan item of a sales order header. Reads the billing plan data for a specific billing plan item of a specific sales order header. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ASalesOrderBillingPlanType</returns>
        public async System.Threading.Tasks.Task<ASalesOrderBillingPlanType> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGetAsync(string salesOrder, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ASalesOrderBillingPlanType> localVarResponse = await ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGetWithHttpInfoAsync(salesOrder, billingPlan, billingPlanItem, select, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads the billing plan of a billing plan item of a sales order header. Reads the billing plan data for a specific billing plan item of a specific sales order header. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ASalesOrderBillingPlanType)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ASalesOrderBillingPlanType>> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGetWithHttpInfoAsync(string salesOrder, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet");
            }

            // verify the required parameter 'billingPlanItem' is set
            if (billingPlanItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlanItem' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlanItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlanItem)); // path parameter
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$select", select));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$expand", expand));
            }

            localVarRequestOptions.Operation = "HeaderBillingPlanItemApi.ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ASalesOrderBillingPlanType>("/A_SalesOrderBillingPlanItem(SalesOrder='{SalesOrder}',BillingPlan='{BillingPlan}',BillingPlanItem='{BillingPlanItem}')/to_BillingPlan", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reads the sales order header for a billing plan item of a sales order. Reads the sales order header data for a specific billing plan item of a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ASalesOrderType</returns>
        public ASalesOrderType ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet(string salesOrder, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ASalesOrderType> localVarResponse = ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGetWithHttpInfo(salesOrder, billingPlan, billingPlanItem, select, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads the sales order header for a billing plan item of a sales order. Reads the sales order header data for a specific billing plan item of a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ASalesOrderType</returns>
        public Org.OpenAPITools.Client.ApiResponse<ASalesOrderType> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGetWithHttpInfo(string salesOrder, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet");
            }

            // verify the required parameter 'billingPlanItem' is set
            if (billingPlanItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlanItem' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlanItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlanItem)); // path parameter
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$select", select));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$expand", expand));
            }

            localVarRequestOptions.Operation = "HeaderBillingPlanItemApi.ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ASalesOrderType>("/A_SalesOrderBillingPlanItem(SalesOrder='{SalesOrder}',BillingPlan='{BillingPlan}',BillingPlanItem='{BillingPlanItem}')/to_SalesOrder", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reads the sales order header for a billing plan item of a sales order. Reads the sales order header data for a specific billing plan item of a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ASalesOrderType</returns>
        public async System.Threading.Tasks.Task<ASalesOrderType> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGetAsync(string salesOrder, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ASalesOrderType> localVarResponse = await ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGetWithHttpInfoAsync(salesOrder, billingPlan, billingPlanItem, select, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads the sales order header for a billing plan item of a sales order. Reads the sales order header data for a specific billing plan item of a specific sales order. Consumers must pass the following key fields: sales order ID, number of the header billing plan, and item number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ASalesOrderType)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ASalesOrderType>> ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGetWithHttpInfoAsync(string salesOrder, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet");
            }

            // verify the required parameter 'billingPlanItem' is set
            if (billingPlanItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlanItem' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlanItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlanItem)); // path parameter
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$select", select));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$expand", expand));
            }

            localVarRequestOptions.Operation = "HeaderBillingPlanItemApi.ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ASalesOrderType>("/A_SalesOrderBillingPlanItem(SalesOrder='{SalesOrder}',BillingPlan='{BillingPlan}',BillingPlanItem='{BillingPlanItem}')/to_SalesOrder", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reads the billing plan items of a sales order billing plan. Reads the billing plan item data for a specific sales order billing plan. Consumers must pass the following key fields: sales order ID and number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Wrapper10</returns>
        public Wrapper10 ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemGet(string salesOrder, string billingPlan, int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Wrapper10> localVarResponse = ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemGetWithHttpInfo(salesOrder, billingPlan, top, skip, filter, inlinecount, orderby, select, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads the billing plan items of a sales order billing plan. Reads the billing plan item data for a specific sales order billing plan. Consumers must pass the following key fields: sales order ID and number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Wrapper10</returns>
        public Org.OpenAPITools.Client.ApiResponse<Wrapper10> ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemGetWithHttpInfo(string salesOrder, string billingPlan, int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemGet");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (inlinecount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$inlinecount", inlinecount));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$orderby", orderby));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$select", select));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$expand", expand));
            }

            localVarRequestOptions.Operation = "HeaderBillingPlanItemApi.ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Wrapper10>("/A_SalesOrderBillingPlan(SalesOrder='{SalesOrder}',BillingPlan='{BillingPlan}')/to_BillingPlanItem", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reads the billing plan items of a sales order billing plan. Reads the billing plan item data for a specific sales order billing plan. Consumers must pass the following key fields: sales order ID and number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Wrapper10</returns>
        public async System.Threading.Tasks.Task<Wrapper10> ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemGetAsync(string salesOrder, string billingPlan, int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Wrapper10> localVarResponse = await ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemGetWithHttpInfoAsync(salesOrder, billingPlan, top, skip, filter, inlinecount, orderby, select, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads the billing plan items of a sales order billing plan. Reads the billing plan item data for a specific sales order billing plan. Consumers must pass the following key fields: sales order ID and number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Wrapper10)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Wrapper10>> ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemGetWithHttpInfoAsync(string salesOrder, string billingPlan, int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemGet");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (inlinecount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$inlinecount", inlinecount));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$orderby", orderby));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$select", select));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$expand", expand));
            }

            localVarRequestOptions.Operation = "HeaderBillingPlanItemApi.ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Wrapper10>("/A_SalesOrderBillingPlan(SalesOrder='{SalesOrder}',BillingPlan='{BillingPlan}')/to_BillingPlanItem", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a billing plan item for a sales order billing plan. Creates a billing plan item for a specific sales order billing plan. Consumers must pass the following key fields: sales order ID and number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ASalesOrderBillingPlanItemType</returns>
        public ASalesOrderBillingPlanItemType ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemPost(string salesOrder, string billingPlan, APISALESORDERSRVASalesOrderBillingPlanItemTypeCreate aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ASalesOrderBillingPlanItemType> localVarResponse = ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemPostWithHttpInfo(salesOrder, billingPlan, aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a billing plan item for a sales order billing plan. Creates a billing plan item for a specific sales order billing plan. Consumers must pass the following key fields: sales order ID and number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ASalesOrderBillingPlanItemType</returns>
        public Org.OpenAPITools.Client.ApiResponse<ASalesOrderBillingPlanItemType> ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemPostWithHttpInfo(string salesOrder, string billingPlan, APISALESORDERSRVASalesOrderBillingPlanItemTypeCreate aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate, int operationIndex = 0)
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemPost");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemPost");
            }

            // verify the required parameter 'aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate' is set
            if (aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.Data = aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate;

            localVarRequestOptions.Operation = "HeaderBillingPlanItemApi.ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ASalesOrderBillingPlanItemType>("/A_SalesOrderBillingPlan(SalesOrder='{SalesOrder}',BillingPlan='{BillingPlan}')/to_BillingPlanItem", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a billing plan item for a sales order billing plan. Creates a billing plan item for a specific sales order billing plan. Consumers must pass the following key fields: sales order ID and number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ASalesOrderBillingPlanItemType</returns>
        public async System.Threading.Tasks.Task<ASalesOrderBillingPlanItemType> ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemPostAsync(string salesOrder, string billingPlan, APISALESORDERSRVASalesOrderBillingPlanItemTypeCreate aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ASalesOrderBillingPlanItemType> localVarResponse = await ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemPostWithHttpInfoAsync(salesOrder, billingPlan, aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a billing plan item for a sales order billing plan. Creates a billing plan item for a specific sales order billing plan. Consumers must pass the following key fields: sales order ID and number of the header billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ASalesOrderBillingPlanItemType)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ASalesOrderBillingPlanItemType>> ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemPostWithHttpInfoAsync(string salesOrder, string billingPlan, APISALESORDERSRVASalesOrderBillingPlanItemTypeCreate aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemPost");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemPost");
            }

            // verify the required parameter 'aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate' is set
            if (aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate' when calling HeaderBillingPlanItemApi->ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.Data = aPISALESORDERSRVASalesOrderBillingPlanItemTypeCreate;

            localVarRequestOptions.Operation = "HeaderBillingPlanItemApi.ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ASalesOrderBillingPlanItemType>("/A_SalesOrderBillingPlan(SalesOrder='{SalesOrder}',BillingPlan='{BillingPlan}')/to_BillingPlanItem", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToBillingPlanItemPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
