/*
 * Sales Order (A2X)
 *
 * In every API call, you can make use of the following operations:   - You can read entire sales orders or only parts of the data, using the provided filters.   - You can create sales orders. You can use deep insert requests, that is, you create a header plus at least one of the following entities: header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, header related object, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object.   If the header already exists, you can create the following sub-entities on their own: header partner, header pricing element, header text, payment plan, header related object, item partner, item pricing element, item text, and item related object.   - For existing sales orders, you can create new items. You can use deep insert requests, that is, you create an item plus at least one of the following entities: item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object. If the item already exists, you can create the following sub-entities on their own: item partner, item pricing element, item text, item related object, and item schedule line.   - For existing sales orders, you can update the following entities (that is, you can change the content of their properties): header, header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item schedule line.   - For existing sales orders, you can delete the following entities: header, header partner, header pricing element, header billing plan item, header text, payment plan, header related object, item, item partner, item pricing element, item billing plan item, item text, item related object, and item schedule line.   - You can accept or deny approval requests for sales orders that cannot be processed without the consent of an approver.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IItemBillingPlanItemApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Reads the billing plan items of a sales order item billing plan.
        /// </summary>
        /// <remarks>
        /// Reads the billing plan item data for a specific sales order item billing plan. Consumers must pass the following key fields: sales order ID, item number, and number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Wrapper20</returns>
        Wrapper20 ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemGet(string salesOrder, string salesOrderItem, string billingPlan, int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Reads the billing plan items of a sales order item billing plan.
        /// </summary>
        /// <remarks>
        /// Reads the billing plan item data for a specific sales order item billing plan. Consumers must pass the following key fields: sales order ID, item number, and number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Wrapper20</returns>
        ApiResponse<Wrapper20> ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemGetWithHttpInfo(string salesOrder, string salesOrderItem, string billingPlan, int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Creates a billing plan item for a sales order item billing plan.
        /// </summary>
        /// <remarks>
        /// Creates a billing plan item for a specific sales order item billing plan. Consumers must pass the following key fields: sales order ID, item number, and number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ASlsOrderItemBillingPlanItemType</returns>
        ASlsOrderItemBillingPlanItemType ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemPost(string salesOrder, string salesOrderItem, string billingPlan, APISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate, int operationIndex = 0);

        /// <summary>
        /// Creates a billing plan item for a sales order item billing plan.
        /// </summary>
        /// <remarks>
        /// Creates a billing plan item for a specific sales order item billing plan. Consumers must pass the following key fields: sales order ID, item number, and number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ASlsOrderItemBillingPlanItemType</returns>
        ApiResponse<ASlsOrderItemBillingPlanItemType> ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemPostWithHttpInfo(string salesOrder, string salesOrderItem, string billingPlan, APISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate, int operationIndex = 0);
        /// <summary>
        /// Reads the billing plan items of all sales order items.
        /// </summary>
        /// <remarks>
        /// Reads the billing plan item data from the items of all sales orders in the system.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Wrapper20</returns>
        Wrapper20 ASlsOrderItemBillingPlanItemGet(int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Reads the billing plan items of all sales order items.
        /// </summary>
        /// <remarks>
        /// Reads the billing plan item data from the items of all sales orders in the system.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Wrapper20</returns>
        ApiResponse<Wrapper20> ASlsOrderItemBillingPlanItemGetWithHttpInfo(int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Creates a billing plan item for a sales order item.
        /// </summary>
        /// <remarks>
        /// Creates a billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ASlsOrderItemBillingPlanItemType</returns>
        ASlsOrderItemBillingPlanItemType ASlsOrderItemBillingPlanItemPost(APISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate, int operationIndex = 0);

        /// <summary>
        /// Creates a billing plan item for a sales order item.
        /// </summary>
        /// <remarks>
        /// Creates a billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ASlsOrderItemBillingPlanItemType</returns>
        ApiResponse<ASlsOrderItemBillingPlanItemType> ASlsOrderItemBillingPlanItemPostWithHttpInfo(APISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate, int operationIndex = 0);
        /// <summary>
        /// Deletes a billing plan item of a sales order item.
        /// </summary>
        /// <remarks>
        /// Deletes a specific billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, int operationIndex = 0);

        /// <summary>
        /// Deletes a billing plan item of a sales order item.
        /// </summary>
        /// <remarks>
        /// Deletes a specific billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemDeleteWithHttpInfo(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, int operationIndex = 0);
        /// <summary>
        /// Reads a billing plan item of a sales order item.
        /// </summary>
        /// <remarks>
        /// Reads a specific billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ASlsOrderItemBillingPlanItemType</returns>
        ASlsOrderItemBillingPlanItemType ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Reads a billing plan item of a sales order item.
        /// </summary>
        /// <remarks>
        /// Reads a specific billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ASlsOrderItemBillingPlanItemType</returns>
        ApiResponse<ASlsOrderItemBillingPlanItemType> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemGetWithHttpInfo(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Updates a billing plan item of a sales order item.
        /// </summary>
        /// <remarks>
        /// Updates a specific billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="modifiedASlsOrderItemBillingPlanItemType">New property values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, ModifiedASlsOrderItemBillingPlanItemType modifiedASlsOrderItemBillingPlanItemType, int operationIndex = 0);

        /// <summary>
        /// Updates a billing plan item of a sales order item.
        /// </summary>
        /// <remarks>
        /// Updates a specific billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="modifiedASlsOrderItemBillingPlanItemType">New property values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatchWithHttpInfo(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, ModifiedASlsOrderItemBillingPlanItemType modifiedASlsOrderItemBillingPlanItemType, int operationIndex = 0);
        /// <summary>
        /// Reads the item billing plan for an item billing plan item.
        /// </summary>
        /// <remarks>
        /// Reads the item billing plan data for a specific billing plan item of a sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ASalesOrderItemBillingPlanType</returns>
        ASalesOrderItemBillingPlanType ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Reads the item billing plan for an item billing plan item.
        /// </summary>
        /// <remarks>
        /// Reads the item billing plan data for a specific billing plan item of a sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ASalesOrderItemBillingPlanType</returns>
        ApiResponse<ASalesOrderItemBillingPlanType> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGetWithHttpInfo(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Reads the sales order header for an item billing plan item.
        /// </summary>
        /// <remarks>
        /// Reads the sales order header data for a specific billing plan item of a sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ASalesOrderType</returns>
        ASalesOrderType ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Reads the sales order header for an item billing plan item.
        /// </summary>
        /// <remarks>
        /// Reads the sales order header data for a specific billing plan item of a sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ASalesOrderType</returns>
        ApiResponse<ASalesOrderType> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGetWithHttpInfo(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Reads the sales order item for a billing plan item of this sales order item.
        /// </summary>
        /// <remarks>
        /// Reads the sales order item data for a specific billing plan item of this sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ASalesOrderItemType</returns>
        ASalesOrderItemType ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Reads the sales order item for a billing plan item of this sales order item.
        /// </summary>
        /// <remarks>
        /// Reads the sales order item data for a specific billing plan item of this sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ASalesOrderItemType</returns>
        ApiResponse<ASalesOrderItemType> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGetWithHttpInfo(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IItemBillingPlanItemApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Reads the billing plan items of a sales order item billing plan.
        /// </summary>
        /// <remarks>
        /// Reads the billing plan item data for a specific sales order item billing plan. Consumers must pass the following key fields: sales order ID, item number, and number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Wrapper20</returns>
        System.Threading.Tasks.Task<Wrapper20> ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemGetAsync(string salesOrder, string salesOrderItem, string billingPlan, int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Reads the billing plan items of a sales order item billing plan.
        /// </summary>
        /// <remarks>
        /// Reads the billing plan item data for a specific sales order item billing plan. Consumers must pass the following key fields: sales order ID, item number, and number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Wrapper20)</returns>
        System.Threading.Tasks.Task<ApiResponse<Wrapper20>> ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemGetWithHttpInfoAsync(string salesOrder, string salesOrderItem, string billingPlan, int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Creates a billing plan item for a sales order item billing plan.
        /// </summary>
        /// <remarks>
        /// Creates a billing plan item for a specific sales order item billing plan. Consumers must pass the following key fields: sales order ID, item number, and number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ASlsOrderItemBillingPlanItemType</returns>
        System.Threading.Tasks.Task<ASlsOrderItemBillingPlanItemType> ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemPostAsync(string salesOrder, string salesOrderItem, string billingPlan, APISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Creates a billing plan item for a sales order item billing plan.
        /// </summary>
        /// <remarks>
        /// Creates a billing plan item for a specific sales order item billing plan. Consumers must pass the following key fields: sales order ID, item number, and number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ASlsOrderItemBillingPlanItemType)</returns>
        System.Threading.Tasks.Task<ApiResponse<ASlsOrderItemBillingPlanItemType>> ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemPostWithHttpInfoAsync(string salesOrder, string salesOrderItem, string billingPlan, APISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Reads the billing plan items of all sales order items.
        /// </summary>
        /// <remarks>
        /// Reads the billing plan item data from the items of all sales orders in the system.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Wrapper20</returns>
        System.Threading.Tasks.Task<Wrapper20> ASlsOrderItemBillingPlanItemGetAsync(int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Reads the billing plan items of all sales order items.
        /// </summary>
        /// <remarks>
        /// Reads the billing plan item data from the items of all sales orders in the system.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Wrapper20)</returns>
        System.Threading.Tasks.Task<ApiResponse<Wrapper20>> ASlsOrderItemBillingPlanItemGetWithHttpInfoAsync(int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Creates a billing plan item for a sales order item.
        /// </summary>
        /// <remarks>
        /// Creates a billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ASlsOrderItemBillingPlanItemType</returns>
        System.Threading.Tasks.Task<ASlsOrderItemBillingPlanItemType> ASlsOrderItemBillingPlanItemPostAsync(APISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Creates a billing plan item for a sales order item.
        /// </summary>
        /// <remarks>
        /// Creates a billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ASlsOrderItemBillingPlanItemType)</returns>
        System.Threading.Tasks.Task<ApiResponse<ASlsOrderItemBillingPlanItemType>> ASlsOrderItemBillingPlanItemPostWithHttpInfoAsync(APISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a billing plan item of a sales order item.
        /// </summary>
        /// <remarks>
        /// Deletes a specific billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemDeleteAsync(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a billing plan item of a sales order item.
        /// </summary>
        /// <remarks>
        /// Deletes a specific billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemDeleteWithHttpInfoAsync(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Reads a billing plan item of a sales order item.
        /// </summary>
        /// <remarks>
        /// Reads a specific billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ASlsOrderItemBillingPlanItemType</returns>
        System.Threading.Tasks.Task<ASlsOrderItemBillingPlanItemType> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemGetAsync(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Reads a billing plan item of a sales order item.
        /// </summary>
        /// <remarks>
        /// Reads a specific billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ASlsOrderItemBillingPlanItemType)</returns>
        System.Threading.Tasks.Task<ApiResponse<ASlsOrderItemBillingPlanItemType>> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemGetWithHttpInfoAsync(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Updates a billing plan item of a sales order item.
        /// </summary>
        /// <remarks>
        /// Updates a specific billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="modifiedASlsOrderItemBillingPlanItemType">New property values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatchAsync(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, ModifiedASlsOrderItemBillingPlanItemType modifiedASlsOrderItemBillingPlanItemType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Updates a billing plan item of a sales order item.
        /// </summary>
        /// <remarks>
        /// Updates a specific billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="modifiedASlsOrderItemBillingPlanItemType">New property values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatchWithHttpInfoAsync(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, ModifiedASlsOrderItemBillingPlanItemType modifiedASlsOrderItemBillingPlanItemType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Reads the item billing plan for an item billing plan item.
        /// </summary>
        /// <remarks>
        /// Reads the item billing plan data for a specific billing plan item of a sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ASalesOrderItemBillingPlanType</returns>
        System.Threading.Tasks.Task<ASalesOrderItemBillingPlanType> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGetAsync(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Reads the item billing plan for an item billing plan item.
        /// </summary>
        /// <remarks>
        /// Reads the item billing plan data for a specific billing plan item of a sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ASalesOrderItemBillingPlanType)</returns>
        System.Threading.Tasks.Task<ApiResponse<ASalesOrderItemBillingPlanType>> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGetWithHttpInfoAsync(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Reads the sales order header for an item billing plan item.
        /// </summary>
        /// <remarks>
        /// Reads the sales order header data for a specific billing plan item of a sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ASalesOrderType</returns>
        System.Threading.Tasks.Task<ASalesOrderType> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGetAsync(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Reads the sales order header for an item billing plan item.
        /// </summary>
        /// <remarks>
        /// Reads the sales order header data for a specific billing plan item of a sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ASalesOrderType)</returns>
        System.Threading.Tasks.Task<ApiResponse<ASalesOrderType>> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGetWithHttpInfoAsync(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Reads the sales order item for a billing plan item of this sales order item.
        /// </summary>
        /// <remarks>
        /// Reads the sales order item data for a specific billing plan item of this sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ASalesOrderItemType</returns>
        System.Threading.Tasks.Task<ASalesOrderItemType> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGetAsync(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Reads the sales order item for a billing plan item of this sales order item.
        /// </summary>
        /// <remarks>
        /// Reads the sales order item data for a specific billing plan item of this sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ASalesOrderItemType)</returns>
        System.Threading.Tasks.Task<ApiResponse<ASalesOrderItemType>> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGetWithHttpInfoAsync(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IItemBillingPlanItemApi : IItemBillingPlanItemApiSync, IItemBillingPlanItemApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ItemBillingPlanItemApi : IItemBillingPlanItemApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemBillingPlanItemApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ItemBillingPlanItemApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemBillingPlanItemApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ItemBillingPlanItemApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemBillingPlanItemApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ItemBillingPlanItemApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemBillingPlanItemApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ItemBillingPlanItemApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Reads the billing plan items of a sales order item billing plan. Reads the billing plan item data for a specific sales order item billing plan. Consumers must pass the following key fields: sales order ID, item number, and number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Wrapper20</returns>
        public Wrapper20 ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemGet(string salesOrder, string salesOrderItem, string billingPlan, int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Wrapper20> localVarResponse = ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemGetWithHttpInfo(salesOrder, salesOrderItem, billingPlan, top, skip, filter, inlinecount, orderby, select, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads the billing plan items of a sales order item billing plan. Reads the billing plan item data for a specific sales order item billing plan. Consumers must pass the following key fields: sales order ID, item number, and number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Wrapper20</returns>
        public Org.OpenAPITools.Client.ApiResponse<Wrapper20> ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemGetWithHttpInfo(string salesOrder, string salesOrderItem, string billingPlan, int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling ItemBillingPlanItemApi->ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemGet");
            }

            // verify the required parameter 'salesOrderItem' is set
            if (salesOrderItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrderItem' when calling ItemBillingPlanItemApi->ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemGet");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling ItemBillingPlanItemApi->ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("SalesOrderItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrderItem)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (inlinecount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$inlinecount", inlinecount));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$orderby", orderby));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$select", select));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$expand", expand));
            }

            localVarRequestOptions.Operation = "ItemBillingPlanItemApi.ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Wrapper20>("/A_SalesOrderItemBillingPlan(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',BillingPlan='{BillingPlan}')/to_BillingPlanItem", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reads the billing plan items of a sales order item billing plan. Reads the billing plan item data for a specific sales order item billing plan. Consumers must pass the following key fields: sales order ID, item number, and number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Wrapper20</returns>
        public async System.Threading.Tasks.Task<Wrapper20> ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemGetAsync(string salesOrder, string salesOrderItem, string billingPlan, int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Wrapper20> localVarResponse = await ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemGetWithHttpInfoAsync(salesOrder, salesOrderItem, billingPlan, top, skip, filter, inlinecount, orderby, select, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads the billing plan items of a sales order item billing plan. Reads the billing plan item data for a specific sales order item billing plan. Consumers must pass the following key fields: sales order ID, item number, and number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Wrapper20)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Wrapper20>> ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemGetWithHttpInfoAsync(string salesOrder, string salesOrderItem, string billingPlan, int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling ItemBillingPlanItemApi->ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemGet");
            }

            // verify the required parameter 'salesOrderItem' is set
            if (salesOrderItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrderItem' when calling ItemBillingPlanItemApi->ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemGet");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling ItemBillingPlanItemApi->ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("SalesOrderItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrderItem)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (inlinecount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$inlinecount", inlinecount));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$orderby", orderby));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$select", select));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$expand", expand));
            }

            localVarRequestOptions.Operation = "ItemBillingPlanItemApi.ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Wrapper20>("/A_SalesOrderItemBillingPlan(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',BillingPlan='{BillingPlan}')/to_BillingPlanItem", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a billing plan item for a sales order item billing plan. Creates a billing plan item for a specific sales order item billing plan. Consumers must pass the following key fields: sales order ID, item number, and number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ASlsOrderItemBillingPlanItemType</returns>
        public ASlsOrderItemBillingPlanItemType ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemPost(string salesOrder, string salesOrderItem, string billingPlan, APISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ASlsOrderItemBillingPlanItemType> localVarResponse = ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemPostWithHttpInfo(salesOrder, salesOrderItem, billingPlan, aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a billing plan item for a sales order item billing plan. Creates a billing plan item for a specific sales order item billing plan. Consumers must pass the following key fields: sales order ID, item number, and number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ASlsOrderItemBillingPlanItemType</returns>
        public Org.OpenAPITools.Client.ApiResponse<ASlsOrderItemBillingPlanItemType> ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemPostWithHttpInfo(string salesOrder, string salesOrderItem, string billingPlan, APISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate, int operationIndex = 0)
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling ItemBillingPlanItemApi->ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemPost");
            }

            // verify the required parameter 'salesOrderItem' is set
            if (salesOrderItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrderItem' when calling ItemBillingPlanItemApi->ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemPost");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling ItemBillingPlanItemApi->ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemPost");
            }

            // verify the required parameter 'aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate' is set
            if (aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate' when calling ItemBillingPlanItemApi->ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("SalesOrderItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrderItem)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.Data = aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate;

            localVarRequestOptions.Operation = "ItemBillingPlanItemApi.ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ASlsOrderItemBillingPlanItemType>("/A_SalesOrderItemBillingPlan(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',BillingPlan='{BillingPlan}')/to_BillingPlanItem", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a billing plan item for a sales order item billing plan. Creates a billing plan item for a specific sales order item billing plan. Consumers must pass the following key fields: sales order ID, item number, and number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ASlsOrderItemBillingPlanItemType</returns>
        public async System.Threading.Tasks.Task<ASlsOrderItemBillingPlanItemType> ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemPostAsync(string salesOrder, string salesOrderItem, string billingPlan, APISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ASlsOrderItemBillingPlanItemType> localVarResponse = await ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemPostWithHttpInfoAsync(salesOrder, salesOrderItem, billingPlan, aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a billing plan item for a sales order item billing plan. Creates a billing plan item for a specific sales order item billing plan. Consumers must pass the following key fields: sales order ID, item number, and number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ASlsOrderItemBillingPlanItemType)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ASlsOrderItemBillingPlanItemType>> ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemPostWithHttpInfoAsync(string salesOrder, string salesOrderItem, string billingPlan, APISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling ItemBillingPlanItemApi->ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemPost");
            }

            // verify the required parameter 'salesOrderItem' is set
            if (salesOrderItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrderItem' when calling ItemBillingPlanItemApi->ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemPost");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling ItemBillingPlanItemApi->ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemPost");
            }

            // verify the required parameter 'aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate' is set
            if (aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate' when calling ItemBillingPlanItemApi->ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("SalesOrderItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrderItem)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.Data = aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate;

            localVarRequestOptions.Operation = "ItemBillingPlanItemApi.ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ASlsOrderItemBillingPlanItemType>("/A_SalesOrderItemBillingPlan(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',BillingPlan='{BillingPlan}')/to_BillingPlanItem", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToBillingPlanItemPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reads the billing plan items of all sales order items. Reads the billing plan item data from the items of all sales orders in the system.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Wrapper20</returns>
        public Wrapper20 ASlsOrderItemBillingPlanItemGet(int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Wrapper20> localVarResponse = ASlsOrderItemBillingPlanItemGetWithHttpInfo(top, skip, filter, inlinecount, orderby, select, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads the billing plan items of all sales order items. Reads the billing plan item data from the items of all sales orders in the system.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Wrapper20</returns>
        public Org.OpenAPITools.Client.ApiResponse<Wrapper20> ASlsOrderItemBillingPlanItemGetWithHttpInfo(int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (inlinecount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$inlinecount", inlinecount));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$orderby", orderby));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$select", select));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$expand", expand));
            }

            localVarRequestOptions.Operation = "ItemBillingPlanItemApi.ASlsOrderItemBillingPlanItemGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Wrapper20>("/A_SlsOrderItemBillingPlanItem", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASlsOrderItemBillingPlanItemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reads the billing plan items of all sales order items. Reads the billing plan item data from the items of all sales orders in the system.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Wrapper20</returns>
        public async System.Threading.Tasks.Task<Wrapper20> ASlsOrderItemBillingPlanItemGetAsync(int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Wrapper20> localVarResponse = await ASlsOrderItemBillingPlanItemGetWithHttpInfoAsync(top, skip, filter, inlinecount, orderby, select, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads the billing plan items of all sales order items. Reads the billing plan item data from the items of all sales orders in the system.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)</param>
        /// <param name="skip">Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="filter">Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)</param>
        /// <param name="inlinecount">Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)</param>
        /// <param name="orderby">Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Wrapper20)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Wrapper20>> ASlsOrderItemBillingPlanItemGetWithHttpInfoAsync(int? top = default(int?), int? skip = default(int?), string? filter = default(string?), string? inlinecount = default(string?), List<string>? orderby = default(List<string>?), List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$top", top));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$skip", skip));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$filter", filter));
            }
            if (inlinecount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "$inlinecount", inlinecount));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$orderby", orderby));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$select", select));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$expand", expand));
            }

            localVarRequestOptions.Operation = "ItemBillingPlanItemApi.ASlsOrderItemBillingPlanItemGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Wrapper20>("/A_SlsOrderItemBillingPlanItem", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASlsOrderItemBillingPlanItemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a billing plan item for a sales order item. Creates a billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ASlsOrderItemBillingPlanItemType</returns>
        public ASlsOrderItemBillingPlanItemType ASlsOrderItemBillingPlanItemPost(APISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ASlsOrderItemBillingPlanItemType> localVarResponse = ASlsOrderItemBillingPlanItemPostWithHttpInfo(aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a billing plan item for a sales order item. Creates a billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ASlsOrderItemBillingPlanItemType</returns>
        public Org.OpenAPITools.Client.ApiResponse<ASlsOrderItemBillingPlanItemType> ASlsOrderItemBillingPlanItemPostWithHttpInfo(APISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate, int operationIndex = 0)
        {
            // verify the required parameter 'aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate' is set
            if (aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate;

            localVarRequestOptions.Operation = "ItemBillingPlanItemApi.ASlsOrderItemBillingPlanItemPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ASlsOrderItemBillingPlanItemType>("/A_SlsOrderItemBillingPlanItem", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASlsOrderItemBillingPlanItemPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a billing plan item for a sales order item. Creates a billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ASlsOrderItemBillingPlanItemType</returns>
        public async System.Threading.Tasks.Task<ASlsOrderItemBillingPlanItemType> ASlsOrderItemBillingPlanItemPostAsync(APISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ASlsOrderItemBillingPlanItemType> localVarResponse = await ASlsOrderItemBillingPlanItemPostWithHttpInfoAsync(aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a billing plan item for a sales order item. Creates a billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate">New entity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ASlsOrderItemBillingPlanItemType)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ASlsOrderItemBillingPlanItemType>> ASlsOrderItemBillingPlanItemPostWithHttpInfoAsync(APISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate' is set
            if (aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aPISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate;

            localVarRequestOptions.Operation = "ItemBillingPlanItemApi.ASlsOrderItemBillingPlanItemPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ASlsOrderItemBillingPlanItemType>("/A_SlsOrderItemBillingPlanItem", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASlsOrderItemBillingPlanItemPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a billing plan item of a sales order item. Deletes a specific billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, int operationIndex = 0)
        {
            ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemDeleteWithHttpInfo(salesOrder, salesOrderItem, billingPlan, billingPlanItem);
        }

        /// <summary>
        /// Deletes a billing plan item of a sales order item. Deletes a specific billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemDeleteWithHttpInfo(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, int operationIndex = 0)
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete");
            }

            // verify the required parameter 'salesOrderItem' is set
            if (salesOrderItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrderItem' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete");
            }

            // verify the required parameter 'billingPlanItem' is set
            if (billingPlanItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlanItem' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("SalesOrderItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrderItem)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlanItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlanItem)); // path parameter

            localVarRequestOptions.Operation = "ItemBillingPlanItemApi.ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/A_SlsOrderItemBillingPlanItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',BillingPlan='{BillingPlan}',BillingPlanItem='{BillingPlanItem}')", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a billing plan item of a sales order item. Deletes a specific billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemDeleteAsync(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemDeleteWithHttpInfoAsync(salesOrder, salesOrderItem, billingPlan, billingPlanItem, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a billing plan item of a sales order item. Deletes a specific billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemDeleteWithHttpInfoAsync(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete");
            }

            // verify the required parameter 'salesOrderItem' is set
            if (salesOrderItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrderItem' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete");
            }

            // verify the required parameter 'billingPlanItem' is set
            if (billingPlanItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlanItem' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("SalesOrderItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrderItem)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlanItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlanItem)); // path parameter

            localVarRequestOptions.Operation = "ItemBillingPlanItemApi.ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/A_SlsOrderItemBillingPlanItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',BillingPlan='{BillingPlan}',BillingPlanItem='{BillingPlanItem}')", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reads a billing plan item of a sales order item. Reads a specific billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ASlsOrderItemBillingPlanItemType</returns>
        public ASlsOrderItemBillingPlanItemType ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ASlsOrderItemBillingPlanItemType> localVarResponse = ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemGetWithHttpInfo(salesOrder, salesOrderItem, billingPlan, billingPlanItem, select, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads a billing plan item of a sales order item. Reads a specific billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ASlsOrderItemBillingPlanItemType</returns>
        public Org.OpenAPITools.Client.ApiResponse<ASlsOrderItemBillingPlanItemType> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemGetWithHttpInfo(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet");
            }

            // verify the required parameter 'salesOrderItem' is set
            if (salesOrderItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrderItem' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet");
            }

            // verify the required parameter 'billingPlanItem' is set
            if (billingPlanItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlanItem' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("SalesOrderItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrderItem)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlanItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlanItem)); // path parameter
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$select", select));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$expand", expand));
            }

            localVarRequestOptions.Operation = "ItemBillingPlanItemApi.ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ASlsOrderItemBillingPlanItemType>("/A_SlsOrderItemBillingPlanItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',BillingPlan='{BillingPlan}',BillingPlanItem='{BillingPlanItem}')", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reads a billing plan item of a sales order item. Reads a specific billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ASlsOrderItemBillingPlanItemType</returns>
        public async System.Threading.Tasks.Task<ASlsOrderItemBillingPlanItemType> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemGetAsync(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ASlsOrderItemBillingPlanItemType> localVarResponse = await ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemGetWithHttpInfoAsync(salesOrder, salesOrderItem, billingPlan, billingPlanItem, select, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads a billing plan item of a sales order item. Reads a specific billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ASlsOrderItemBillingPlanItemType)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ASlsOrderItemBillingPlanItemType>> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemGetWithHttpInfoAsync(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet");
            }

            // verify the required parameter 'salesOrderItem' is set
            if (salesOrderItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrderItem' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet");
            }

            // verify the required parameter 'billingPlanItem' is set
            if (billingPlanItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlanItem' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("SalesOrderItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrderItem)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlanItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlanItem)); // path parameter
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$select", select));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$expand", expand));
            }

            localVarRequestOptions.Operation = "ItemBillingPlanItemApi.ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ASlsOrderItemBillingPlanItemType>("/A_SlsOrderItemBillingPlanItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',BillingPlan='{BillingPlan}',BillingPlanItem='{BillingPlanItem}')", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a billing plan item of a sales order item. Updates a specific billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="modifiedASlsOrderItemBillingPlanItemType">New property values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, ModifiedASlsOrderItemBillingPlanItemType modifiedASlsOrderItemBillingPlanItemType, int operationIndex = 0)
        {
            ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatchWithHttpInfo(salesOrder, salesOrderItem, billingPlan, billingPlanItem, modifiedASlsOrderItemBillingPlanItemType);
        }

        /// <summary>
        /// Updates a billing plan item of a sales order item. Updates a specific billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="modifiedASlsOrderItemBillingPlanItemType">New property values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatchWithHttpInfo(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, ModifiedASlsOrderItemBillingPlanItemType modifiedASlsOrderItemBillingPlanItemType, int operationIndex = 0)
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch");
            }

            // verify the required parameter 'salesOrderItem' is set
            if (salesOrderItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrderItem' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch");
            }

            // verify the required parameter 'billingPlanItem' is set
            if (billingPlanItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlanItem' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch");
            }

            // verify the required parameter 'modifiedASlsOrderItemBillingPlanItemType' is set
            if (modifiedASlsOrderItemBillingPlanItemType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modifiedASlsOrderItemBillingPlanItemType' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("SalesOrderItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrderItem)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlanItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlanItem)); // path parameter
            localVarRequestOptions.Data = modifiedASlsOrderItemBillingPlanItemType;

            localVarRequestOptions.Operation = "ItemBillingPlanItemApi.ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/A_SlsOrderItemBillingPlanItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',BillingPlan='{BillingPlan}',BillingPlanItem='{BillingPlanItem}')", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a billing plan item of a sales order item. Updates a specific billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="modifiedASlsOrderItemBillingPlanItemType">New property values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatchAsync(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, ModifiedASlsOrderItemBillingPlanItemType modifiedASlsOrderItemBillingPlanItemType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatchWithHttpInfoAsync(salesOrder, salesOrderItem, billingPlan, billingPlanItem, modifiedASlsOrderItemBillingPlanItemType, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates a billing plan item of a sales order item. Updates a specific billing plan item of a specific sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="modifiedASlsOrderItemBillingPlanItemType">New property values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatchWithHttpInfoAsync(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, ModifiedASlsOrderItemBillingPlanItemType modifiedASlsOrderItemBillingPlanItemType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch");
            }

            // verify the required parameter 'salesOrderItem' is set
            if (salesOrderItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrderItem' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch");
            }

            // verify the required parameter 'billingPlanItem' is set
            if (billingPlanItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlanItem' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch");
            }

            // verify the required parameter 'modifiedASlsOrderItemBillingPlanItemType' is set
            if (modifiedASlsOrderItemBillingPlanItemType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modifiedASlsOrderItemBillingPlanItemType' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("SalesOrderItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrderItem)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlanItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlanItem)); // path parameter
            localVarRequestOptions.Data = modifiedASlsOrderItemBillingPlanItemType;

            localVarRequestOptions.Operation = "ItemBillingPlanItemApi.ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/A_SlsOrderItemBillingPlanItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',BillingPlan='{BillingPlan}',BillingPlanItem='{BillingPlanItem}')", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reads the item billing plan for an item billing plan item. Reads the item billing plan data for a specific billing plan item of a sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ASalesOrderItemBillingPlanType</returns>
        public ASalesOrderItemBillingPlanType ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ASalesOrderItemBillingPlanType> localVarResponse = ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGetWithHttpInfo(salesOrder, salesOrderItem, billingPlan, billingPlanItem, select, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads the item billing plan for an item billing plan item. Reads the item billing plan data for a specific billing plan item of a sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ASalesOrderItemBillingPlanType</returns>
        public Org.OpenAPITools.Client.ApiResponse<ASalesOrderItemBillingPlanType> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGetWithHttpInfo(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet");
            }

            // verify the required parameter 'salesOrderItem' is set
            if (salesOrderItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrderItem' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet");
            }

            // verify the required parameter 'billingPlanItem' is set
            if (billingPlanItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlanItem' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("SalesOrderItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrderItem)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlanItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlanItem)); // path parameter
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$select", select));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$expand", expand));
            }

            localVarRequestOptions.Operation = "ItemBillingPlanItemApi.ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ASalesOrderItemBillingPlanType>("/A_SlsOrderItemBillingPlanItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',BillingPlan='{BillingPlan}',BillingPlanItem='{BillingPlanItem}')/to_BillingPlan", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reads the item billing plan for an item billing plan item. Reads the item billing plan data for a specific billing plan item of a sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ASalesOrderItemBillingPlanType</returns>
        public async System.Threading.Tasks.Task<ASalesOrderItemBillingPlanType> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGetAsync(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ASalesOrderItemBillingPlanType> localVarResponse = await ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGetWithHttpInfoAsync(salesOrder, salesOrderItem, billingPlan, billingPlanItem, select, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads the item billing plan for an item billing plan item. Reads the item billing plan data for a specific billing plan item of a sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ASalesOrderItemBillingPlanType)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ASalesOrderItemBillingPlanType>> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGetWithHttpInfoAsync(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet");
            }

            // verify the required parameter 'salesOrderItem' is set
            if (salesOrderItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrderItem' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet");
            }

            // verify the required parameter 'billingPlanItem' is set
            if (billingPlanItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlanItem' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("SalesOrderItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrderItem)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlanItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlanItem)); // path parameter
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$select", select));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$expand", expand));
            }

            localVarRequestOptions.Operation = "ItemBillingPlanItemApi.ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ASalesOrderItemBillingPlanType>("/A_SlsOrderItemBillingPlanItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',BillingPlan='{BillingPlan}',BillingPlanItem='{BillingPlanItem}')/to_BillingPlan", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToBillingPlanGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reads the sales order header for an item billing plan item. Reads the sales order header data for a specific billing plan item of a sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ASalesOrderType</returns>
        public ASalesOrderType ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ASalesOrderType> localVarResponse = ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGetWithHttpInfo(salesOrder, salesOrderItem, billingPlan, billingPlanItem, select, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads the sales order header for an item billing plan item. Reads the sales order header data for a specific billing plan item of a sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ASalesOrderType</returns>
        public Org.OpenAPITools.Client.ApiResponse<ASalesOrderType> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGetWithHttpInfo(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet");
            }

            // verify the required parameter 'salesOrderItem' is set
            if (salesOrderItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrderItem' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet");
            }

            // verify the required parameter 'billingPlanItem' is set
            if (billingPlanItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlanItem' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("SalesOrderItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrderItem)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlanItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlanItem)); // path parameter
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$select", select));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$expand", expand));
            }

            localVarRequestOptions.Operation = "ItemBillingPlanItemApi.ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ASalesOrderType>("/A_SlsOrderItemBillingPlanItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',BillingPlan='{BillingPlan}',BillingPlanItem='{BillingPlanItem}')/to_SalesOrder", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reads the sales order header for an item billing plan item. Reads the sales order header data for a specific billing plan item of a sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ASalesOrderType</returns>
        public async System.Threading.Tasks.Task<ASalesOrderType> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGetAsync(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ASalesOrderType> localVarResponse = await ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGetWithHttpInfoAsync(salesOrder, salesOrderItem, billingPlan, billingPlanItem, select, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads the sales order header for an item billing plan item. Reads the sales order header data for a specific billing plan item of a sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ASalesOrderType)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ASalesOrderType>> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGetWithHttpInfoAsync(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet");
            }

            // verify the required parameter 'salesOrderItem' is set
            if (salesOrderItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrderItem' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet");
            }

            // verify the required parameter 'billingPlanItem' is set
            if (billingPlanItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlanItem' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("SalesOrderItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrderItem)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlanItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlanItem)); // path parameter
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$select", select));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$expand", expand));
            }

            localVarRequestOptions.Operation = "ItemBillingPlanItemApi.ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ASalesOrderType>("/A_SlsOrderItemBillingPlanItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',BillingPlan='{BillingPlan}',BillingPlanItem='{BillingPlanItem}')/to_SalesOrder", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reads the sales order item for a billing plan item of this sales order item. Reads the sales order item data for a specific billing plan item of this sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ASalesOrderItemType</returns>
        public ASalesOrderItemType ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ASalesOrderItemType> localVarResponse = ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGetWithHttpInfo(salesOrder, salesOrderItem, billingPlan, billingPlanItem, select, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads the sales order item for a billing plan item of this sales order item. Reads the sales order item data for a specific billing plan item of this sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ASalesOrderItemType</returns>
        public Org.OpenAPITools.Client.ApiResponse<ASalesOrderItemType> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGetWithHttpInfo(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet");
            }

            // verify the required parameter 'salesOrderItem' is set
            if (salesOrderItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrderItem' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet");
            }

            // verify the required parameter 'billingPlanItem' is set
            if (billingPlanItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlanItem' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("SalesOrderItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrderItem)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlanItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlanItem)); // path parameter
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$select", select));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$expand", expand));
            }

            localVarRequestOptions.Operation = "ItemBillingPlanItemApi.ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ASalesOrderItemType>("/A_SlsOrderItemBillingPlanItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',BillingPlan='{BillingPlan}',BillingPlanItem='{BillingPlanItem}')/to_SalesOrderItem", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reads the sales order item for a billing plan item of this sales order item. Reads the sales order item data for a specific billing plan item of this sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ASalesOrderItemType</returns>
        public async System.Threading.Tasks.Task<ASalesOrderItemType> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGetAsync(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ASalesOrderItemType> localVarResponse = await ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGetWithHttpInfoAsync(salesOrder, salesOrderItem, billingPlan, billingPlanItem, select, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads the sales order item for a billing plan item of this sales order item. Reads the sales order item data for a specific billing plan item of this sales order item. Consumers must pass the following key fields: sales order ID, item number, number of the item billing plan, and item number of the item billing plan.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrder">Sales Order</param>
        /// <param name="salesOrderItem">Sales Order Item</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number</param>
        /// <param name="billingPlanItem">Item for billing plan/invoice plan/payment cards</param>
        /// <param name="select">Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)</param>
        /// <param name="expand">Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ASalesOrderItemType)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ASalesOrderItemType>> ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGetWithHttpInfoAsync(string salesOrder, string salesOrderItem, string billingPlan, string billingPlanItem, List<string>? select = default(List<string>?), List<string>? expand = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'salesOrder' is set
            if (salesOrder == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrder' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet");
            }

            // verify the required parameter 'salesOrderItem' is set
            if (salesOrderItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'salesOrderItem' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet");
            }

            // verify the required parameter 'billingPlan' is set
            if (billingPlan == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlan' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet");
            }

            // verify the required parameter 'billingPlanItem' is set
            if (billingPlanItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'billingPlanItem' when calling ItemBillingPlanItemApi->ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SalesOrder", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrder)); // path parameter
            localVarRequestOptions.PathParameters.Add("SalesOrderItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(salesOrderItem)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlan", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlan)); // path parameter
            localVarRequestOptions.PathParameters.Add("BillingPlanItem", Org.OpenAPITools.Client.ClientUtils.ParameterToString(billingPlanItem)); // path parameter
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$select", select));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "$expand", expand));
            }

            localVarRequestOptions.Operation = "ItemBillingPlanItemApi.ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2Auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ASalesOrderItemType>("/A_SlsOrderItemBillingPlanItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',BillingPlan='{BillingPlan}',BillingPlanItem='{BillingPlanItem}')/to_SalesOrderItem", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
