/*
 * Sales Order (A2X)
 *
 * In every API call, you can make use of the following operations:   - You can read entire sales orders or only parts of the data, using the provided filters.   - You can create sales orders. You can use deep insert requests, that is, you create a header plus at least one of the following entities: header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, header related object, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object.   If the header already exists, you can create the following sub-entities on their own: header partner, header pricing element, header text, payment plan, header related object, item partner, item pricing element, item text, and item related object.   - For existing sales orders, you can create new items. You can use deep insert requests, that is, you create an item plus at least one of the following entities: item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object. If the item already exists, you can create the following sub-entities on their own: item partner, item pricing element, item text, item related object, and item schedule line.   - For existing sales orders, you can update the following entities (that is, you can change the content of their properties): header, header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item schedule line.   - For existing sales orders, you can delete the following entities: header, header partner, header pricing element, header billing plan item, header text, payment plan, header related object, item, item partner, item pricing element, item billing plan item, item text, item related object, and item schedule line.   - You can accept or deny approval requests for sales orders that cannot be processed without the consent of an approver.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// APISALESORDERSRVASalesOrderItemTypeUpdate
    /// </summary>
    [DataContract(Name = "API_SALES_ORDER_SRV.A_SalesOrderItemType-update")]
    public partial class APISALESORDERSRVASalesOrderItemTypeUpdate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="APISALESORDERSRVASalesOrderItemTypeUpdate" /> class.
        /// </summary>
        /// <param name="higherLevelItem">Higher-Level Item in Bill of Material Structures.</param>
        /// <param name="salesOrderItemCategory">Sales Document Item Category.</param>
        /// <param name="salesOrderItemText">Short Text for Sales Order Item.</param>
        /// <param name="purchaseOrderByCustomer">purchaseOrderByCustomer.</param>
        /// <param name="purchaseOrderByShipToParty">Ship-to Party&#39;s Customer Reference.</param>
        /// <param name="underlyingPurchaseOrderItem">Item Number of the Underlying Purchase Order.</param>
        /// <param name="material">Material Number.</param>
        /// <param name="materialByCustomer">Material Number Used by Customer.</param>
        /// <param name="pricingDate">Date for Pricing and Exchange Rate.</param>
        /// <param name="pricingReferenceMaterial">Pricing Reference Material.</param>
        /// <param name="billingPlan">Billing Plan Number / Invoicing Plan Number.</param>
        /// <param name="requestedQuantity">requestedQuantity.</param>
        /// <param name="requestedQuantityUnit">Unit of the Requested Quantity.</param>
        /// <param name="requestedQuantitySAPUnit">SAP Unit Code for Requested Quantity.</param>
        /// <param name="requestedQuantityISOUnit">ISO Unit Code for Requested Quantity.</param>
        /// <param name="itemWeightSAPUnit">SAP Unit Code for Item Weight.</param>
        /// <param name="itemWeightISOUnit">ISO Unit Code for Item Weight.</param>
        /// <param name="itemVolumeSAPUnit">SAP Unit Code for Item Volume.</param>
        /// <param name="itemVolumeISOUnit">ISO Unit Code for Item Volume.</param>
        /// <param name="materialGroup">materialGroup.</param>
        /// <param name="materialPricingGroup">materialPricingGroup.</param>
        /// <param name="additionalMaterialGroup1">additionalMaterialGroup1.</param>
        /// <param name="additionalMaterialGroup2">additionalMaterialGroup2.</param>
        /// <param name="additionalMaterialGroup3">additionalMaterialGroup3.</param>
        /// <param name="additionalMaterialGroup4">additionalMaterialGroup4.</param>
        /// <param name="additionalMaterialGroup5">additionalMaterialGroup5.</param>
        /// <param name="billingDocumentDate">billingDocumentDate.</param>
        /// <param name="contractAccount">Contract Account Number.</param>
        /// <param name="additionalValueDays">Additional Value Days.</param>
        /// <param name="servicesRenderedDate">Date on which services are rendered.</param>
        /// <param name="batch">Batch Number.</param>
        /// <param name="productionPlant">Plant (Own or External).</param>
        /// <param name="storageLocation">storageLocation.</param>
        /// <param name="deliveryGroup">Delivery Group (Items are delivered together).</param>
        /// <param name="shippingPoint">Shipping Point / Receiving Point.</param>
        /// <param name="shippingType">shippingType.</param>
        /// <param name="deliveryPriority">deliveryPriority.</param>
        /// <param name="deliveryDateQuantityIsFixed">Delivery Date and Quantity Fixed.</param>
        /// <param name="deliveryDateTypeRule">Delivery Date Rule.</param>
        /// <param name="incotermsClassification">Incoterms (Part 1).</param>
        /// <param name="incotermsTransferLocation">incotermsTransferLocation.</param>
        /// <param name="incotermsLocation1">incotermsLocation1.</param>
        /// <param name="incotermsLocation2">incotermsLocation2.</param>
        /// <param name="taxAmount">Tax Amount in Document Currency.</param>
        /// <param name="productTaxClassification1">Tax Classification for Material.</param>
        /// <param name="productTaxClassification2">Tax Classification for Material.</param>
        /// <param name="productTaxClassification3">Tax Classification for Material.</param>
        /// <param name="productTaxClassification4">Tax Classification for Material.</param>
        /// <param name="productTaxClassification5">Tax Classification for Material.</param>
        /// <param name="productTaxClassification6">Tax Classification for Material.</param>
        /// <param name="productTaxClassification7">Tax Classification for Material.</param>
        /// <param name="productTaxClassification8">Tax Classification for Material.</param>
        /// <param name="productTaxClassification9">Tax Classification for Material.</param>
        /// <param name="matlAccountAssignmentGroup">Account Assignment Group for Material.</param>
        /// <param name="costAmount">Cost in Document Currency.</param>
        /// <param name="customerPaymentTerms">Key for Terms of Payment.</param>
        /// <param name="fixedValueDate">fixedValueDate.</param>
        /// <param name="customerGroup">customerGroup.</param>
        /// <param name="salesDocumentRjcnReason">Reason for Rejection of Sales Documents.</param>
        /// <param name="itemBillingBlockReason">Billing Block for Item.</param>
        /// <param name="slsDocIsRlvtForProofOfDeliv">Relevant for POD processing.</param>
        /// <param name="wBSElement">Work Breakdown Structure Element (WBS Element).</param>
        /// <param name="profitCenter">profitCenter.</param>
        /// <param name="accountingExchangeRate">Exchange Rate for Postings to Financial Accounting.</param>
        /// <param name="referenceSDDocument">Document Number of Reference Document.</param>
        /// <param name="referenceSDDocumentItem">Item Number of the Reference Item.</param>
        public APISALESORDERSRVASalesOrderItemTypeUpdate(string higherLevelItem = default(string), string salesOrderItemCategory = default(string), string salesOrderItemText = default(string), string purchaseOrderByCustomer = default(string), string purchaseOrderByShipToParty = default(string), string underlyingPurchaseOrderItem = default(string), string material = default(string), string materialByCustomer = default(string), string pricingDate = default(string), string pricingReferenceMaterial = default(string), string billingPlan = default(string), decimal? requestedQuantity = default(decimal?), string requestedQuantityUnit = default(string), string requestedQuantitySAPUnit = default(string), string requestedQuantityISOUnit = default(string), string itemWeightSAPUnit = default(string), string itemWeightISOUnit = default(string), string itemVolumeSAPUnit = default(string), string itemVolumeISOUnit = default(string), string materialGroup = default(string), string materialPricingGroup = default(string), string additionalMaterialGroup1 = default(string), string additionalMaterialGroup2 = default(string), string additionalMaterialGroup3 = default(string), string additionalMaterialGroup4 = default(string), string additionalMaterialGroup5 = default(string), string billingDocumentDate = default(string), string contractAccount = default(string), string additionalValueDays = default(string), string servicesRenderedDate = default(string), string batch = default(string), string productionPlant = default(string), string storageLocation = default(string), string deliveryGroup = default(string), string shippingPoint = default(string), string shippingType = default(string), string deliveryPriority = default(string), bool? deliveryDateQuantityIsFixed = default(bool?), string deliveryDateTypeRule = default(string), string incotermsClassification = default(string), string incotermsTransferLocation = default(string), string incotermsLocation1 = default(string), string incotermsLocation2 = default(string), decimal? taxAmount = default(decimal?), string productTaxClassification1 = default(string), string productTaxClassification2 = default(string), string productTaxClassification3 = default(string), string productTaxClassification4 = default(string), string productTaxClassification5 = default(string), string productTaxClassification6 = default(string), string productTaxClassification7 = default(string), string productTaxClassification8 = default(string), string productTaxClassification9 = default(string), string matlAccountAssignmentGroup = default(string), decimal? costAmount = default(decimal?), string customerPaymentTerms = default(string), string fixedValueDate = default(string), string customerGroup = default(string), string salesDocumentRjcnReason = default(string), string itemBillingBlockReason = default(string), bool? slsDocIsRlvtForProofOfDeliv = default(bool?), string wBSElement = default(string), string profitCenter = default(string), decimal? accountingExchangeRate = default(decimal?), string referenceSDDocument = default(string), string referenceSDDocumentItem = default(string))
        {
            this.HigherLevelItem = higherLevelItem;
            this.SalesOrderItemCategory = salesOrderItemCategory;
            this.SalesOrderItemText = salesOrderItemText;
            this.PurchaseOrderByCustomer = purchaseOrderByCustomer;
            this.PurchaseOrderByShipToParty = purchaseOrderByShipToParty;
            this.UnderlyingPurchaseOrderItem = underlyingPurchaseOrderItem;
            this.Material = material;
            this.MaterialByCustomer = materialByCustomer;
            this.PricingDate = pricingDate;
            this.PricingReferenceMaterial = pricingReferenceMaterial;
            this.BillingPlan = billingPlan;
            this.RequestedQuantity = requestedQuantity;
            this.RequestedQuantityUnit = requestedQuantityUnit;
            this.RequestedQuantitySAPUnit = requestedQuantitySAPUnit;
            this.RequestedQuantityISOUnit = requestedQuantityISOUnit;
            this.ItemWeightSAPUnit = itemWeightSAPUnit;
            this.ItemWeightISOUnit = itemWeightISOUnit;
            this.ItemVolumeSAPUnit = itemVolumeSAPUnit;
            this.ItemVolumeISOUnit = itemVolumeISOUnit;
            this.MaterialGroup = materialGroup;
            this.MaterialPricingGroup = materialPricingGroup;
            this.AdditionalMaterialGroup1 = additionalMaterialGroup1;
            this.AdditionalMaterialGroup2 = additionalMaterialGroup2;
            this.AdditionalMaterialGroup3 = additionalMaterialGroup3;
            this.AdditionalMaterialGroup4 = additionalMaterialGroup4;
            this.AdditionalMaterialGroup5 = additionalMaterialGroup5;
            this.BillingDocumentDate = billingDocumentDate;
            this.ContractAccount = contractAccount;
            this.AdditionalValueDays = additionalValueDays;
            this.ServicesRenderedDate = servicesRenderedDate;
            this.Batch = batch;
            this.ProductionPlant = productionPlant;
            this.StorageLocation = storageLocation;
            this.DeliveryGroup = deliveryGroup;
            this.ShippingPoint = shippingPoint;
            this.ShippingType = shippingType;
            this.DeliveryPriority = deliveryPriority;
            this.DeliveryDateQuantityIsFixed = deliveryDateQuantityIsFixed;
            this.DeliveryDateTypeRule = deliveryDateTypeRule;
            this.IncotermsClassification = incotermsClassification;
            this.IncotermsTransferLocation = incotermsTransferLocation;
            this.IncotermsLocation1 = incotermsLocation1;
            this.IncotermsLocation2 = incotermsLocation2;
            this.TaxAmount = taxAmount;
            this.ProductTaxClassification1 = productTaxClassification1;
            this.ProductTaxClassification2 = productTaxClassification2;
            this.ProductTaxClassification3 = productTaxClassification3;
            this.ProductTaxClassification4 = productTaxClassification4;
            this.ProductTaxClassification5 = productTaxClassification5;
            this.ProductTaxClassification6 = productTaxClassification6;
            this.ProductTaxClassification7 = productTaxClassification7;
            this.ProductTaxClassification8 = productTaxClassification8;
            this.ProductTaxClassification9 = productTaxClassification9;
            this.MatlAccountAssignmentGroup = matlAccountAssignmentGroup;
            this.CostAmount = costAmount;
            this.CustomerPaymentTerms = customerPaymentTerms;
            this.FixedValueDate = fixedValueDate;
            this.CustomerGroup = customerGroup;
            this.SalesDocumentRjcnReason = salesDocumentRjcnReason;
            this.ItemBillingBlockReason = itemBillingBlockReason;
            this.SlsDocIsRlvtForProofOfDeliv = slsDocIsRlvtForProofOfDeliv;
            this.WBSElement = wBSElement;
            this.ProfitCenter = profitCenter;
            this.AccountingExchangeRate = accountingExchangeRate;
            this.ReferenceSDDocument = referenceSDDocument;
            this.ReferenceSDDocumentItem = referenceSDDocumentItem;
        }

        /// <summary>
        /// Higher-Level Item in Bill of Material Structures
        /// </summary>
        /// <value>Higher-Level Item in Bill of Material Structures</value>
        [DataMember(Name = "HigherLevelItem", EmitDefaultValue = true)]
        public string HigherLevelItem { get; set; }

        /// <summary>
        /// Sales Document Item Category
        /// </summary>
        /// <value>Sales Document Item Category</value>
        [DataMember(Name = "SalesOrderItemCategory", EmitDefaultValue = true)]
        public string SalesOrderItemCategory { get; set; }

        /// <summary>
        /// Short Text for Sales Order Item
        /// </summary>
        /// <value>Short Text for Sales Order Item</value>
        [DataMember(Name = "SalesOrderItemText", EmitDefaultValue = true)]
        public string SalesOrderItemText { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderByCustomer
        /// </summary>
        [DataMember(Name = "PurchaseOrderByCustomer", EmitDefaultValue = true)]
        public string PurchaseOrderByCustomer { get; set; }

        /// <summary>
        /// Ship-to Party&#39;s Customer Reference
        /// </summary>
        /// <value>Ship-to Party&#39;s Customer Reference</value>
        [DataMember(Name = "PurchaseOrderByShipToParty", EmitDefaultValue = true)]
        public string PurchaseOrderByShipToParty { get; set; }

        /// <summary>
        /// Item Number of the Underlying Purchase Order
        /// </summary>
        /// <value>Item Number of the Underlying Purchase Order</value>
        [DataMember(Name = "UnderlyingPurchaseOrderItem", EmitDefaultValue = true)]
        public string UnderlyingPurchaseOrderItem { get; set; }

        /// <summary>
        /// Material Number
        /// </summary>
        /// <value>Material Number</value>
        [DataMember(Name = "Material", EmitDefaultValue = true)]
        public string Material { get; set; }

        /// <summary>
        /// Material Number Used by Customer
        /// </summary>
        /// <value>Material Number Used by Customer</value>
        [DataMember(Name = "MaterialByCustomer", EmitDefaultValue = true)]
        public string MaterialByCustomer { get; set; }

        /// <summary>
        /// Date for Pricing and Exchange Rate
        /// </summary>
        /// <value>Date for Pricing and Exchange Rate</value>
        /*
        <example>/Date(1492041600000)/</example>
        */
        [DataMember(Name = "PricingDate", EmitDefaultValue = true)]
        public string PricingDate { get; set; }

        /// <summary>
        /// Pricing Reference Material
        /// </summary>
        /// <value>Pricing Reference Material</value>
        [DataMember(Name = "PricingReferenceMaterial", EmitDefaultValue = true)]
        public string PricingReferenceMaterial { get; set; }

        /// <summary>
        /// Billing Plan Number / Invoicing Plan Number
        /// </summary>
        /// <value>Billing Plan Number / Invoicing Plan Number</value>
        [DataMember(Name = "BillingPlan", EmitDefaultValue = true)]
        public string BillingPlan { get; set; }

        /// <summary>
        /// Gets or Sets RequestedQuantity
        /// </summary>
        /*
        <example>0</example>
        */
        [DataMember(Name = "RequestedQuantity", EmitDefaultValue = true)]
        public decimal? RequestedQuantity { get; set; }

        /// <summary>
        /// Unit of the Requested Quantity
        /// </summary>
        /// <value>Unit of the Requested Quantity</value>
        [DataMember(Name = "RequestedQuantityUnit", EmitDefaultValue = true)]
        public string RequestedQuantityUnit { get; set; }

        /// <summary>
        /// SAP Unit Code for Requested Quantity
        /// </summary>
        /// <value>SAP Unit Code for Requested Quantity</value>
        [DataMember(Name = "RequestedQuantitySAPUnit", EmitDefaultValue = true)]
        public string RequestedQuantitySAPUnit { get; set; }

        /// <summary>
        /// ISO Unit Code for Requested Quantity
        /// </summary>
        /// <value>ISO Unit Code for Requested Quantity</value>
        [DataMember(Name = "RequestedQuantityISOUnit", EmitDefaultValue = true)]
        public string RequestedQuantityISOUnit { get; set; }

        /// <summary>
        /// SAP Unit Code for Item Weight
        /// </summary>
        /// <value>SAP Unit Code for Item Weight</value>
        [DataMember(Name = "ItemWeightSAPUnit", EmitDefaultValue = true)]
        public string ItemWeightSAPUnit { get; set; }

        /// <summary>
        /// ISO Unit Code for Item Weight
        /// </summary>
        /// <value>ISO Unit Code for Item Weight</value>
        [DataMember(Name = "ItemWeightISOUnit", EmitDefaultValue = true)]
        public string ItemWeightISOUnit { get; set; }

        /// <summary>
        /// SAP Unit Code for Item Volume
        /// </summary>
        /// <value>SAP Unit Code for Item Volume</value>
        [DataMember(Name = "ItemVolumeSAPUnit", EmitDefaultValue = true)]
        public string ItemVolumeSAPUnit { get; set; }

        /// <summary>
        /// ISO Unit Code for Item Volume
        /// </summary>
        /// <value>ISO Unit Code for Item Volume</value>
        [DataMember(Name = "ItemVolumeISOUnit", EmitDefaultValue = true)]
        public string ItemVolumeISOUnit { get; set; }

        /// <summary>
        /// Gets or Sets MaterialGroup
        /// </summary>
        [DataMember(Name = "MaterialGroup", EmitDefaultValue = true)]
        public string MaterialGroup { get; set; }

        /// <summary>
        /// Gets or Sets MaterialPricingGroup
        /// </summary>
        [DataMember(Name = "MaterialPricingGroup", EmitDefaultValue = true)]
        public string MaterialPricingGroup { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalMaterialGroup1
        /// </summary>
        [DataMember(Name = "AdditionalMaterialGroup1", EmitDefaultValue = true)]
        public string AdditionalMaterialGroup1 { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalMaterialGroup2
        /// </summary>
        [DataMember(Name = "AdditionalMaterialGroup2", EmitDefaultValue = true)]
        public string AdditionalMaterialGroup2 { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalMaterialGroup3
        /// </summary>
        [DataMember(Name = "AdditionalMaterialGroup3", EmitDefaultValue = true)]
        public string AdditionalMaterialGroup3 { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalMaterialGroup4
        /// </summary>
        [DataMember(Name = "AdditionalMaterialGroup4", EmitDefaultValue = true)]
        public string AdditionalMaterialGroup4 { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalMaterialGroup5
        /// </summary>
        [DataMember(Name = "AdditionalMaterialGroup5", EmitDefaultValue = true)]
        public string AdditionalMaterialGroup5 { get; set; }

        /// <summary>
        /// Gets or Sets BillingDocumentDate
        /// </summary>
        /*
        <example>/Date(1492041600000)/</example>
        */
        [DataMember(Name = "BillingDocumentDate", EmitDefaultValue = true)]
        public string BillingDocumentDate { get; set; }

        /// <summary>
        /// Contract Account Number
        /// </summary>
        /// <value>Contract Account Number</value>
        [DataMember(Name = "ContractAccount", EmitDefaultValue = true)]
        public string ContractAccount { get; set; }

        /// <summary>
        /// Additional Value Days
        /// </summary>
        /// <value>Additional Value Days</value>
        [DataMember(Name = "AdditionalValueDays", EmitDefaultValue = true)]
        public string AdditionalValueDays { get; set; }

        /// <summary>
        /// Date on which services are rendered
        /// </summary>
        /// <value>Date on which services are rendered</value>
        /*
        <example>/Date(1492041600000)/</example>
        */
        [DataMember(Name = "ServicesRenderedDate", EmitDefaultValue = true)]
        public string ServicesRenderedDate { get; set; }

        /// <summary>
        /// Batch Number
        /// </summary>
        /// <value>Batch Number</value>
        [DataMember(Name = "Batch", EmitDefaultValue = true)]
        public string Batch { get; set; }

        /// <summary>
        /// Plant (Own or External)
        /// </summary>
        /// <value>Plant (Own or External)</value>
        [DataMember(Name = "ProductionPlant", EmitDefaultValue = true)]
        public string ProductionPlant { get; set; }

        /// <summary>
        /// Gets or Sets StorageLocation
        /// </summary>
        [DataMember(Name = "StorageLocation", EmitDefaultValue = true)]
        public string StorageLocation { get; set; }

        /// <summary>
        /// Delivery Group (Items are delivered together)
        /// </summary>
        /// <value>Delivery Group (Items are delivered together)</value>
        [DataMember(Name = "DeliveryGroup", EmitDefaultValue = true)]
        public string DeliveryGroup { get; set; }

        /// <summary>
        /// Shipping Point / Receiving Point
        /// </summary>
        /// <value>Shipping Point / Receiving Point</value>
        [DataMember(Name = "ShippingPoint", EmitDefaultValue = true)]
        public string ShippingPoint { get; set; }

        /// <summary>
        /// Gets or Sets ShippingType
        /// </summary>
        [DataMember(Name = "ShippingType", EmitDefaultValue = true)]
        public string ShippingType { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryPriority
        /// </summary>
        [DataMember(Name = "DeliveryPriority", EmitDefaultValue = true)]
        public string DeliveryPriority { get; set; }

        /// <summary>
        /// Delivery Date and Quantity Fixed
        /// </summary>
        /// <value>Delivery Date and Quantity Fixed</value>
        [DataMember(Name = "DeliveryDateQuantityIsFixed", EmitDefaultValue = true)]
        public bool? DeliveryDateQuantityIsFixed { get; set; }

        /// <summary>
        /// Delivery Date Rule
        /// </summary>
        /// <value>Delivery Date Rule</value>
        [DataMember(Name = "DeliveryDateTypeRule", EmitDefaultValue = true)]
        public string DeliveryDateTypeRule { get; set; }

        /// <summary>
        /// Incoterms (Part 1)
        /// </summary>
        /// <value>Incoterms (Part 1)</value>
        [DataMember(Name = "IncotermsClassification", EmitDefaultValue = true)]
        public string IncotermsClassification { get; set; }

        /// <summary>
        /// Gets or Sets IncotermsTransferLocation
        /// </summary>
        [DataMember(Name = "IncotermsTransferLocation", EmitDefaultValue = true)]
        public string IncotermsTransferLocation { get; set; }

        /// <summary>
        /// Gets or Sets IncotermsLocation1
        /// </summary>
        [DataMember(Name = "IncotermsLocation1", EmitDefaultValue = true)]
        public string IncotermsLocation1 { get; set; }

        /// <summary>
        /// Gets or Sets IncotermsLocation2
        /// </summary>
        [DataMember(Name = "IncotermsLocation2", EmitDefaultValue = true)]
        public string IncotermsLocation2 { get; set; }

        /// <summary>
        /// Tax Amount in Document Currency
        /// </summary>
        /// <value>Tax Amount in Document Currency</value>
        /*
        <example>0</example>
        */
        [DataMember(Name = "TaxAmount", EmitDefaultValue = true)]
        public decimal? TaxAmount { get; set; }

        /// <summary>
        /// Tax Classification for Material
        /// </summary>
        /// <value>Tax Classification for Material</value>
        [DataMember(Name = "ProductTaxClassification1", EmitDefaultValue = true)]
        public string ProductTaxClassification1 { get; set; }

        /// <summary>
        /// Tax Classification for Material
        /// </summary>
        /// <value>Tax Classification for Material</value>
        [DataMember(Name = "ProductTaxClassification2", EmitDefaultValue = true)]
        public string ProductTaxClassification2 { get; set; }

        /// <summary>
        /// Tax Classification for Material
        /// </summary>
        /// <value>Tax Classification for Material</value>
        [DataMember(Name = "ProductTaxClassification3", EmitDefaultValue = true)]
        public string ProductTaxClassification3 { get; set; }

        /// <summary>
        /// Tax Classification for Material
        /// </summary>
        /// <value>Tax Classification for Material</value>
        [DataMember(Name = "ProductTaxClassification4", EmitDefaultValue = true)]
        public string ProductTaxClassification4 { get; set; }

        /// <summary>
        /// Tax Classification for Material
        /// </summary>
        /// <value>Tax Classification for Material</value>
        [DataMember(Name = "ProductTaxClassification5", EmitDefaultValue = true)]
        public string ProductTaxClassification5 { get; set; }

        /// <summary>
        /// Tax Classification for Material
        /// </summary>
        /// <value>Tax Classification for Material</value>
        [DataMember(Name = "ProductTaxClassification6", EmitDefaultValue = true)]
        public string ProductTaxClassification6 { get; set; }

        /// <summary>
        /// Tax Classification for Material
        /// </summary>
        /// <value>Tax Classification for Material</value>
        [DataMember(Name = "ProductTaxClassification7", EmitDefaultValue = true)]
        public string ProductTaxClassification7 { get; set; }

        /// <summary>
        /// Tax Classification for Material
        /// </summary>
        /// <value>Tax Classification for Material</value>
        [DataMember(Name = "ProductTaxClassification8", EmitDefaultValue = true)]
        public string ProductTaxClassification8 { get; set; }

        /// <summary>
        /// Tax Classification for Material
        /// </summary>
        /// <value>Tax Classification for Material</value>
        [DataMember(Name = "ProductTaxClassification9", EmitDefaultValue = true)]
        public string ProductTaxClassification9 { get; set; }

        /// <summary>
        /// Account Assignment Group for Material
        /// </summary>
        /// <value>Account Assignment Group for Material</value>
        [DataMember(Name = "MatlAccountAssignmentGroup", EmitDefaultValue = true)]
        public string MatlAccountAssignmentGroup { get; set; }

        /// <summary>
        /// Cost in Document Currency
        /// </summary>
        /// <value>Cost in Document Currency</value>
        /*
        <example>0</example>
        */
        [DataMember(Name = "CostAmount", EmitDefaultValue = true)]
        public decimal? CostAmount { get; set; }

        /// <summary>
        /// Key for Terms of Payment
        /// </summary>
        /// <value>Key for Terms of Payment</value>
        [DataMember(Name = "CustomerPaymentTerms", EmitDefaultValue = true)]
        public string CustomerPaymentTerms { get; set; }

        /// <summary>
        /// Gets or Sets FixedValueDate
        /// </summary>
        /*
        <example>/Date(1492041600000)/</example>
        */
        [DataMember(Name = "FixedValueDate", EmitDefaultValue = true)]
        public string FixedValueDate { get; set; }

        /// <summary>
        /// Gets or Sets CustomerGroup
        /// </summary>
        [DataMember(Name = "CustomerGroup", EmitDefaultValue = true)]
        public string CustomerGroup { get; set; }

        /// <summary>
        /// Reason for Rejection of Sales Documents
        /// </summary>
        /// <value>Reason for Rejection of Sales Documents</value>
        [DataMember(Name = "SalesDocumentRjcnReason", EmitDefaultValue = true)]
        public string SalesDocumentRjcnReason { get; set; }

        /// <summary>
        /// Billing Block for Item
        /// </summary>
        /// <value>Billing Block for Item</value>
        [DataMember(Name = "ItemBillingBlockReason", EmitDefaultValue = true)]
        public string ItemBillingBlockReason { get; set; }

        /// <summary>
        /// Relevant for POD processing
        /// </summary>
        /// <value>Relevant for POD processing</value>
        [DataMember(Name = "SlsDocIsRlvtForProofOfDeliv", EmitDefaultValue = true)]
        public bool? SlsDocIsRlvtForProofOfDeliv { get; set; }

        /// <summary>
        /// Work Breakdown Structure Element (WBS Element)
        /// </summary>
        /// <value>Work Breakdown Structure Element (WBS Element)</value>
        [DataMember(Name = "WBSElement", EmitDefaultValue = true)]
        public string WBSElement { get; set; }

        /// <summary>
        /// Gets or Sets ProfitCenter
        /// </summary>
        [DataMember(Name = "ProfitCenter", EmitDefaultValue = true)]
        public string ProfitCenter { get; set; }

        /// <summary>
        /// Exchange Rate for Postings to Financial Accounting
        /// </summary>
        /// <value>Exchange Rate for Postings to Financial Accounting</value>
        /*
        <example>0</example>
        */
        [DataMember(Name = "AccountingExchangeRate", EmitDefaultValue = true)]
        public decimal? AccountingExchangeRate { get; set; }

        /// <summary>
        /// Document Number of Reference Document
        /// </summary>
        /// <value>Document Number of Reference Document</value>
        [DataMember(Name = "ReferenceSDDocument", EmitDefaultValue = true)]
        public string ReferenceSDDocument { get; set; }

        /// <summary>
        /// Item Number of the Reference Item
        /// </summary>
        /// <value>Item Number of the Reference Item</value>
        [DataMember(Name = "ReferenceSDDocumentItem", EmitDefaultValue = true)]
        public string ReferenceSDDocumentItem { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class APISALESORDERSRVASalesOrderItemTypeUpdate {\n");
            sb.Append("  HigherLevelItem: ").Append(HigherLevelItem).Append("\n");
            sb.Append("  SalesOrderItemCategory: ").Append(SalesOrderItemCategory).Append("\n");
            sb.Append("  SalesOrderItemText: ").Append(SalesOrderItemText).Append("\n");
            sb.Append("  PurchaseOrderByCustomer: ").Append(PurchaseOrderByCustomer).Append("\n");
            sb.Append("  PurchaseOrderByShipToParty: ").Append(PurchaseOrderByShipToParty).Append("\n");
            sb.Append("  UnderlyingPurchaseOrderItem: ").Append(UnderlyingPurchaseOrderItem).Append("\n");
            sb.Append("  Material: ").Append(Material).Append("\n");
            sb.Append("  MaterialByCustomer: ").Append(MaterialByCustomer).Append("\n");
            sb.Append("  PricingDate: ").Append(PricingDate).Append("\n");
            sb.Append("  PricingReferenceMaterial: ").Append(PricingReferenceMaterial).Append("\n");
            sb.Append("  BillingPlan: ").Append(BillingPlan).Append("\n");
            sb.Append("  RequestedQuantity: ").Append(RequestedQuantity).Append("\n");
            sb.Append("  RequestedQuantityUnit: ").Append(RequestedQuantityUnit).Append("\n");
            sb.Append("  RequestedQuantitySAPUnit: ").Append(RequestedQuantitySAPUnit).Append("\n");
            sb.Append("  RequestedQuantityISOUnit: ").Append(RequestedQuantityISOUnit).Append("\n");
            sb.Append("  ItemWeightSAPUnit: ").Append(ItemWeightSAPUnit).Append("\n");
            sb.Append("  ItemWeightISOUnit: ").Append(ItemWeightISOUnit).Append("\n");
            sb.Append("  ItemVolumeSAPUnit: ").Append(ItemVolumeSAPUnit).Append("\n");
            sb.Append("  ItemVolumeISOUnit: ").Append(ItemVolumeISOUnit).Append("\n");
            sb.Append("  MaterialGroup: ").Append(MaterialGroup).Append("\n");
            sb.Append("  MaterialPricingGroup: ").Append(MaterialPricingGroup).Append("\n");
            sb.Append("  AdditionalMaterialGroup1: ").Append(AdditionalMaterialGroup1).Append("\n");
            sb.Append("  AdditionalMaterialGroup2: ").Append(AdditionalMaterialGroup2).Append("\n");
            sb.Append("  AdditionalMaterialGroup3: ").Append(AdditionalMaterialGroup3).Append("\n");
            sb.Append("  AdditionalMaterialGroup4: ").Append(AdditionalMaterialGroup4).Append("\n");
            sb.Append("  AdditionalMaterialGroup5: ").Append(AdditionalMaterialGroup5).Append("\n");
            sb.Append("  BillingDocumentDate: ").Append(BillingDocumentDate).Append("\n");
            sb.Append("  ContractAccount: ").Append(ContractAccount).Append("\n");
            sb.Append("  AdditionalValueDays: ").Append(AdditionalValueDays).Append("\n");
            sb.Append("  ServicesRenderedDate: ").Append(ServicesRenderedDate).Append("\n");
            sb.Append("  Batch: ").Append(Batch).Append("\n");
            sb.Append("  ProductionPlant: ").Append(ProductionPlant).Append("\n");
            sb.Append("  StorageLocation: ").Append(StorageLocation).Append("\n");
            sb.Append("  DeliveryGroup: ").Append(DeliveryGroup).Append("\n");
            sb.Append("  ShippingPoint: ").Append(ShippingPoint).Append("\n");
            sb.Append("  ShippingType: ").Append(ShippingType).Append("\n");
            sb.Append("  DeliveryPriority: ").Append(DeliveryPriority).Append("\n");
            sb.Append("  DeliveryDateQuantityIsFixed: ").Append(DeliveryDateQuantityIsFixed).Append("\n");
            sb.Append("  DeliveryDateTypeRule: ").Append(DeliveryDateTypeRule).Append("\n");
            sb.Append("  IncotermsClassification: ").Append(IncotermsClassification).Append("\n");
            sb.Append("  IncotermsTransferLocation: ").Append(IncotermsTransferLocation).Append("\n");
            sb.Append("  IncotermsLocation1: ").Append(IncotermsLocation1).Append("\n");
            sb.Append("  IncotermsLocation2: ").Append(IncotermsLocation2).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  ProductTaxClassification1: ").Append(ProductTaxClassification1).Append("\n");
            sb.Append("  ProductTaxClassification2: ").Append(ProductTaxClassification2).Append("\n");
            sb.Append("  ProductTaxClassification3: ").Append(ProductTaxClassification3).Append("\n");
            sb.Append("  ProductTaxClassification4: ").Append(ProductTaxClassification4).Append("\n");
            sb.Append("  ProductTaxClassification5: ").Append(ProductTaxClassification5).Append("\n");
            sb.Append("  ProductTaxClassification6: ").Append(ProductTaxClassification6).Append("\n");
            sb.Append("  ProductTaxClassification7: ").Append(ProductTaxClassification7).Append("\n");
            sb.Append("  ProductTaxClassification8: ").Append(ProductTaxClassification8).Append("\n");
            sb.Append("  ProductTaxClassification9: ").Append(ProductTaxClassification9).Append("\n");
            sb.Append("  MatlAccountAssignmentGroup: ").Append(MatlAccountAssignmentGroup).Append("\n");
            sb.Append("  CostAmount: ").Append(CostAmount).Append("\n");
            sb.Append("  CustomerPaymentTerms: ").Append(CustomerPaymentTerms).Append("\n");
            sb.Append("  FixedValueDate: ").Append(FixedValueDate).Append("\n");
            sb.Append("  CustomerGroup: ").Append(CustomerGroup).Append("\n");
            sb.Append("  SalesDocumentRjcnReason: ").Append(SalesDocumentRjcnReason).Append("\n");
            sb.Append("  ItemBillingBlockReason: ").Append(ItemBillingBlockReason).Append("\n");
            sb.Append("  SlsDocIsRlvtForProofOfDeliv: ").Append(SlsDocIsRlvtForProofOfDeliv).Append("\n");
            sb.Append("  WBSElement: ").Append(WBSElement).Append("\n");
            sb.Append("  ProfitCenter: ").Append(ProfitCenter).Append("\n");
            sb.Append("  AccountingExchangeRate: ").Append(AccountingExchangeRate).Append("\n");
            sb.Append("  ReferenceSDDocument: ").Append(ReferenceSDDocument).Append("\n");
            sb.Append("  ReferenceSDDocumentItem: ").Append(ReferenceSDDocumentItem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // HigherLevelItem (string) maxLength
            if (this.HigherLevelItem != null && this.HigherLevelItem.Length > 6)
            {
                yield return new ValidationResult("Invalid value for HigherLevelItem, length must be less than 6.", new [] { "HigherLevelItem" });
            }

            // SalesOrderItemCategory (string) maxLength
            if (this.SalesOrderItemCategory != null && this.SalesOrderItemCategory.Length > 4)
            {
                yield return new ValidationResult("Invalid value for SalesOrderItemCategory, length must be less than 4.", new [] { "SalesOrderItemCategory" });
            }

            // SalesOrderItemText (string) maxLength
            if (this.SalesOrderItemText != null && this.SalesOrderItemText.Length > 40)
            {
                yield return new ValidationResult("Invalid value for SalesOrderItemText, length must be less than 40.", new [] { "SalesOrderItemText" });
            }

            // PurchaseOrderByCustomer (string) maxLength
            if (this.PurchaseOrderByCustomer != null && this.PurchaseOrderByCustomer.Length > 35)
            {
                yield return new ValidationResult("Invalid value for PurchaseOrderByCustomer, length must be less than 35.", new [] { "PurchaseOrderByCustomer" });
            }

            // PurchaseOrderByShipToParty (string) maxLength
            if (this.PurchaseOrderByShipToParty != null && this.PurchaseOrderByShipToParty.Length > 35)
            {
                yield return new ValidationResult("Invalid value for PurchaseOrderByShipToParty, length must be less than 35.", new [] { "PurchaseOrderByShipToParty" });
            }

            // UnderlyingPurchaseOrderItem (string) maxLength
            if (this.UnderlyingPurchaseOrderItem != null && this.UnderlyingPurchaseOrderItem.Length > 6)
            {
                yield return new ValidationResult("Invalid value for UnderlyingPurchaseOrderItem, length must be less than 6.", new [] { "UnderlyingPurchaseOrderItem" });
            }

            // Material (string) maxLength
            if (this.Material != null && this.Material.Length > 40)
            {
                yield return new ValidationResult("Invalid value for Material, length must be less than 40.", new [] { "Material" });
            }

            // MaterialByCustomer (string) maxLength
            if (this.MaterialByCustomer != null && this.MaterialByCustomer.Length > 35)
            {
                yield return new ValidationResult("Invalid value for MaterialByCustomer, length must be less than 35.", new [] { "MaterialByCustomer" });
            }

            // PricingReferenceMaterial (string) maxLength
            if (this.PricingReferenceMaterial != null && this.PricingReferenceMaterial.Length > 40)
            {
                yield return new ValidationResult("Invalid value for PricingReferenceMaterial, length must be less than 40.", new [] { "PricingReferenceMaterial" });
            }

            // BillingPlan (string) maxLength
            if (this.BillingPlan != null && this.BillingPlan.Length > 10)
            {
                yield return new ValidationResult("Invalid value for BillingPlan, length must be less than 10.", new [] { "BillingPlan" });
            }

            // RequestedQuantityUnit (string) maxLength
            if (this.RequestedQuantityUnit != null && this.RequestedQuantityUnit.Length > 3)
            {
                yield return new ValidationResult("Invalid value for RequestedQuantityUnit, length must be less than 3.", new [] { "RequestedQuantityUnit" });
            }

            // RequestedQuantitySAPUnit (string) maxLength
            if (this.RequestedQuantitySAPUnit != null && this.RequestedQuantitySAPUnit.Length > 3)
            {
                yield return new ValidationResult("Invalid value for RequestedQuantitySAPUnit, length must be less than 3.", new [] { "RequestedQuantitySAPUnit" });
            }

            // RequestedQuantityISOUnit (string) maxLength
            if (this.RequestedQuantityISOUnit != null && this.RequestedQuantityISOUnit.Length > 3)
            {
                yield return new ValidationResult("Invalid value for RequestedQuantityISOUnit, length must be less than 3.", new [] { "RequestedQuantityISOUnit" });
            }

            // ItemWeightSAPUnit (string) maxLength
            if (this.ItemWeightSAPUnit != null && this.ItemWeightSAPUnit.Length > 3)
            {
                yield return new ValidationResult("Invalid value for ItemWeightSAPUnit, length must be less than 3.", new [] { "ItemWeightSAPUnit" });
            }

            // ItemWeightISOUnit (string) maxLength
            if (this.ItemWeightISOUnit != null && this.ItemWeightISOUnit.Length > 3)
            {
                yield return new ValidationResult("Invalid value for ItemWeightISOUnit, length must be less than 3.", new [] { "ItemWeightISOUnit" });
            }

            // ItemVolumeSAPUnit (string) maxLength
            if (this.ItemVolumeSAPUnit != null && this.ItemVolumeSAPUnit.Length > 3)
            {
                yield return new ValidationResult("Invalid value for ItemVolumeSAPUnit, length must be less than 3.", new [] { "ItemVolumeSAPUnit" });
            }

            // ItemVolumeISOUnit (string) maxLength
            if (this.ItemVolumeISOUnit != null && this.ItemVolumeISOUnit.Length > 3)
            {
                yield return new ValidationResult("Invalid value for ItemVolumeISOUnit, length must be less than 3.", new [] { "ItemVolumeISOUnit" });
            }

            // MaterialGroup (string) maxLength
            if (this.MaterialGroup != null && this.MaterialGroup.Length > 9)
            {
                yield return new ValidationResult("Invalid value for MaterialGroup, length must be less than 9.", new [] { "MaterialGroup" });
            }

            // MaterialPricingGroup (string) maxLength
            if (this.MaterialPricingGroup != null && this.MaterialPricingGroup.Length > 2)
            {
                yield return new ValidationResult("Invalid value for MaterialPricingGroup, length must be less than 2.", new [] { "MaterialPricingGroup" });
            }

            // AdditionalMaterialGroup1 (string) maxLength
            if (this.AdditionalMaterialGroup1 != null && this.AdditionalMaterialGroup1.Length > 3)
            {
                yield return new ValidationResult("Invalid value for AdditionalMaterialGroup1, length must be less than 3.", new [] { "AdditionalMaterialGroup1" });
            }

            // AdditionalMaterialGroup2 (string) maxLength
            if (this.AdditionalMaterialGroup2 != null && this.AdditionalMaterialGroup2.Length > 3)
            {
                yield return new ValidationResult("Invalid value for AdditionalMaterialGroup2, length must be less than 3.", new [] { "AdditionalMaterialGroup2" });
            }

            // AdditionalMaterialGroup3 (string) maxLength
            if (this.AdditionalMaterialGroup3 != null && this.AdditionalMaterialGroup3.Length > 3)
            {
                yield return new ValidationResult("Invalid value for AdditionalMaterialGroup3, length must be less than 3.", new [] { "AdditionalMaterialGroup3" });
            }

            // AdditionalMaterialGroup4 (string) maxLength
            if (this.AdditionalMaterialGroup4 != null && this.AdditionalMaterialGroup4.Length > 3)
            {
                yield return new ValidationResult("Invalid value for AdditionalMaterialGroup4, length must be less than 3.", new [] { "AdditionalMaterialGroup4" });
            }

            // AdditionalMaterialGroup5 (string) maxLength
            if (this.AdditionalMaterialGroup5 != null && this.AdditionalMaterialGroup5.Length > 3)
            {
                yield return new ValidationResult("Invalid value for AdditionalMaterialGroup5, length must be less than 3.", new [] { "AdditionalMaterialGroup5" });
            }

            // ContractAccount (string) maxLength
            if (this.ContractAccount != null && this.ContractAccount.Length > 12)
            {
                yield return new ValidationResult("Invalid value for ContractAccount, length must be less than 12.", new [] { "ContractAccount" });
            }

            // AdditionalValueDays (string) maxLength
            if (this.AdditionalValueDays != null && this.AdditionalValueDays.Length > 2)
            {
                yield return new ValidationResult("Invalid value for AdditionalValueDays, length must be less than 2.", new [] { "AdditionalValueDays" });
            }

            // Batch (string) maxLength
            if (this.Batch != null && this.Batch.Length > 10)
            {
                yield return new ValidationResult("Invalid value for Batch, length must be less than 10.", new [] { "Batch" });
            }

            // ProductionPlant (string) maxLength
            if (this.ProductionPlant != null && this.ProductionPlant.Length > 4)
            {
                yield return new ValidationResult("Invalid value for ProductionPlant, length must be less than 4.", new [] { "ProductionPlant" });
            }

            // StorageLocation (string) maxLength
            if (this.StorageLocation != null && this.StorageLocation.Length > 4)
            {
                yield return new ValidationResult("Invalid value for StorageLocation, length must be less than 4.", new [] { "StorageLocation" });
            }

            // DeliveryGroup (string) maxLength
            if (this.DeliveryGroup != null && this.DeliveryGroup.Length > 3)
            {
                yield return new ValidationResult("Invalid value for DeliveryGroup, length must be less than 3.", new [] { "DeliveryGroup" });
            }

            // ShippingPoint (string) maxLength
            if (this.ShippingPoint != null && this.ShippingPoint.Length > 4)
            {
                yield return new ValidationResult("Invalid value for ShippingPoint, length must be less than 4.", new [] { "ShippingPoint" });
            }

            // ShippingType (string) maxLength
            if (this.ShippingType != null && this.ShippingType.Length > 2)
            {
                yield return new ValidationResult("Invalid value for ShippingType, length must be less than 2.", new [] { "ShippingType" });
            }

            // DeliveryPriority (string) maxLength
            if (this.DeliveryPriority != null && this.DeliveryPriority.Length > 2)
            {
                yield return new ValidationResult("Invalid value for DeliveryPriority, length must be less than 2.", new [] { "DeliveryPriority" });
            }

            // DeliveryDateTypeRule (string) maxLength
            if (this.DeliveryDateTypeRule != null && this.DeliveryDateTypeRule.Length > 1)
            {
                yield return new ValidationResult("Invalid value for DeliveryDateTypeRule, length must be less than 1.", new [] { "DeliveryDateTypeRule" });
            }

            // IncotermsClassification (string) maxLength
            if (this.IncotermsClassification != null && this.IncotermsClassification.Length > 3)
            {
                yield return new ValidationResult("Invalid value for IncotermsClassification, length must be less than 3.", new [] { "IncotermsClassification" });
            }

            // IncotermsTransferLocation (string) maxLength
            if (this.IncotermsTransferLocation != null && this.IncotermsTransferLocation.Length > 28)
            {
                yield return new ValidationResult("Invalid value for IncotermsTransferLocation, length must be less than 28.", new [] { "IncotermsTransferLocation" });
            }

            // IncotermsLocation1 (string) maxLength
            if (this.IncotermsLocation1 != null && this.IncotermsLocation1.Length > 70)
            {
                yield return new ValidationResult("Invalid value for IncotermsLocation1, length must be less than 70.", new [] { "IncotermsLocation1" });
            }

            // IncotermsLocation2 (string) maxLength
            if (this.IncotermsLocation2 != null && this.IncotermsLocation2.Length > 70)
            {
                yield return new ValidationResult("Invalid value for IncotermsLocation2, length must be less than 70.", new [] { "IncotermsLocation2" });
            }

            // ProductTaxClassification1 (string) maxLength
            if (this.ProductTaxClassification1 != null && this.ProductTaxClassification1.Length > 1)
            {
                yield return new ValidationResult("Invalid value for ProductTaxClassification1, length must be less than 1.", new [] { "ProductTaxClassification1" });
            }

            // ProductTaxClassification2 (string) maxLength
            if (this.ProductTaxClassification2 != null && this.ProductTaxClassification2.Length > 1)
            {
                yield return new ValidationResult("Invalid value for ProductTaxClassification2, length must be less than 1.", new [] { "ProductTaxClassification2" });
            }

            // ProductTaxClassification3 (string) maxLength
            if (this.ProductTaxClassification3 != null && this.ProductTaxClassification3.Length > 1)
            {
                yield return new ValidationResult("Invalid value for ProductTaxClassification3, length must be less than 1.", new [] { "ProductTaxClassification3" });
            }

            // ProductTaxClassification4 (string) maxLength
            if (this.ProductTaxClassification4 != null && this.ProductTaxClassification4.Length > 1)
            {
                yield return new ValidationResult("Invalid value for ProductTaxClassification4, length must be less than 1.", new [] { "ProductTaxClassification4" });
            }

            // ProductTaxClassification5 (string) maxLength
            if (this.ProductTaxClassification5 != null && this.ProductTaxClassification5.Length > 1)
            {
                yield return new ValidationResult("Invalid value for ProductTaxClassification5, length must be less than 1.", new [] { "ProductTaxClassification5" });
            }

            // ProductTaxClassification6 (string) maxLength
            if (this.ProductTaxClassification6 != null && this.ProductTaxClassification6.Length > 1)
            {
                yield return new ValidationResult("Invalid value for ProductTaxClassification6, length must be less than 1.", new [] { "ProductTaxClassification6" });
            }

            // ProductTaxClassification7 (string) maxLength
            if (this.ProductTaxClassification7 != null && this.ProductTaxClassification7.Length > 1)
            {
                yield return new ValidationResult("Invalid value for ProductTaxClassification7, length must be less than 1.", new [] { "ProductTaxClassification7" });
            }

            // ProductTaxClassification8 (string) maxLength
            if (this.ProductTaxClassification8 != null && this.ProductTaxClassification8.Length > 1)
            {
                yield return new ValidationResult("Invalid value for ProductTaxClassification8, length must be less than 1.", new [] { "ProductTaxClassification8" });
            }

            // ProductTaxClassification9 (string) maxLength
            if (this.ProductTaxClassification9 != null && this.ProductTaxClassification9.Length > 1)
            {
                yield return new ValidationResult("Invalid value for ProductTaxClassification9, length must be less than 1.", new [] { "ProductTaxClassification9" });
            }

            // MatlAccountAssignmentGroup (string) maxLength
            if (this.MatlAccountAssignmentGroup != null && this.MatlAccountAssignmentGroup.Length > 2)
            {
                yield return new ValidationResult("Invalid value for MatlAccountAssignmentGroup, length must be less than 2.", new [] { "MatlAccountAssignmentGroup" });
            }

            // CustomerPaymentTerms (string) maxLength
            if (this.CustomerPaymentTerms != null && this.CustomerPaymentTerms.Length > 4)
            {
                yield return new ValidationResult("Invalid value for CustomerPaymentTerms, length must be less than 4.", new [] { "CustomerPaymentTerms" });
            }

            // CustomerGroup (string) maxLength
            if (this.CustomerGroup != null && this.CustomerGroup.Length > 2)
            {
                yield return new ValidationResult("Invalid value for CustomerGroup, length must be less than 2.", new [] { "CustomerGroup" });
            }

            // SalesDocumentRjcnReason (string) maxLength
            if (this.SalesDocumentRjcnReason != null && this.SalesDocumentRjcnReason.Length > 2)
            {
                yield return new ValidationResult("Invalid value for SalesDocumentRjcnReason, length must be less than 2.", new [] { "SalesDocumentRjcnReason" });
            }

            // ItemBillingBlockReason (string) maxLength
            if (this.ItemBillingBlockReason != null && this.ItemBillingBlockReason.Length > 2)
            {
                yield return new ValidationResult("Invalid value for ItemBillingBlockReason, length must be less than 2.", new [] { "ItemBillingBlockReason" });
            }

            // WBSElement (string) maxLength
            if (this.WBSElement != null && this.WBSElement.Length > 24)
            {
                yield return new ValidationResult("Invalid value for WBSElement, length must be less than 24.", new [] { "WBSElement" });
            }

            // ProfitCenter (string) maxLength
            if (this.ProfitCenter != null && this.ProfitCenter.Length > 10)
            {
                yield return new ValidationResult("Invalid value for ProfitCenter, length must be less than 10.", new [] { "ProfitCenter" });
            }

            // ReferenceSDDocument (string) maxLength
            if (this.ReferenceSDDocument != null && this.ReferenceSDDocument.Length > 10)
            {
                yield return new ValidationResult("Invalid value for ReferenceSDDocument, length must be less than 10.", new [] { "ReferenceSDDocument" });
            }

            // ReferenceSDDocumentItem (string) maxLength
            if (this.ReferenceSDDocumentItem != null && this.ReferenceSDDocumentItem.Length > 6)
            {
                yield return new ValidationResult("Invalid value for ReferenceSDDocumentItem, length must be less than 6.", new [] { "ReferenceSDDocumentItem" });
            }

            yield break;
        }
    }

}
