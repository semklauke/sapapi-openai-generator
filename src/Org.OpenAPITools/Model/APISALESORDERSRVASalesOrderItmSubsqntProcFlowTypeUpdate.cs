/*
 * Sales Order (A2X)
 *
 * In every API call, you can make use of the following operations:   - You can read entire sales orders or only parts of the data, using the provided filters.   - You can create sales orders. You can use deep insert requests, that is, you create a header plus at least one of the following entities: header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, header related object, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object.   If the header already exists, you can create the following sub-entities on their own: header partner, header pricing element, header text, payment plan, header related object, item partner, item pricing element, item text, and item related object.   - For existing sales orders, you can create new items. You can use deep insert requests, that is, you create an item plus at least one of the following entities: item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object. If the item already exists, you can create the following sub-entities on their own: item partner, item pricing element, item text, item related object, and item schedule line.   - For existing sales orders, you can update the following entities (that is, you can change the content of their properties): header, header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item schedule line.   - For existing sales orders, you can delete the following entities: header, header partner, header pricing element, header billing plan item, header text, payment plan, header related object, item, item partner, item pricing element, item billing plan item, item text, item related object, and item schedule line.   - You can accept or deny approval requests for sales orders that cannot be processed without the consent of an approver.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// APISALESORDERSRVASalesOrderItmSubsqntProcFlowTypeUpdate
    /// </summary>
    [DataContract(Name = "API_SALES_ORDER_SRV.A_SalesOrderItmSubsqntProcFlowType-update")]
    public partial class APISALESORDERSRVASalesOrderItmSubsqntProcFlowTypeUpdate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="APISALESORDERSRVASalesOrderItmSubsqntProcFlowTypeUpdate" /> class.
        /// </summary>
        /// <param name="subsequentDocument">Subsequent Sales and Distribution Document.</param>
        /// <param name="subsequentDocumentItem">Subsequent Item of an SD Document.</param>
        /// <param name="subsequentDocumentCategory">Document Category of Subsequent Document.</param>
        /// <param name="processFlowLevel">Level of the document flow record.</param>
        /// <param name="relatedProcFlowDocStsFieldName">relatedProcFlowDocStsFieldName.</param>
        /// <param name="sDProcessStatus">Overall Processing Status (Item).</param>
        /// <param name="accountingTransferStatus">Status for Transfer to Accounting.</param>
        /// <param name="prelimBillingDocumentStatus">Preliminary Billing Document Status.</param>
        /// <param name="subsqntDocItmPrecdgDocument">Preceding sales and distribution document.</param>
        /// <param name="subsqntDocItmPrecdgDocItem">Preceding Item of an SD Document.</param>
        /// <param name="subsqntDocItmPrecdgDocCategory">Document Category of Preceding SD Document.</param>
        /// <param name="creationDate">Record Creation Date.</param>
        /// <param name="creationTime">Entry time.</param>
        /// <param name="lastChangeDate">Last Changed On.</param>
        public APISALESORDERSRVASalesOrderItmSubsqntProcFlowTypeUpdate(string subsequentDocument = default(string), string subsequentDocumentItem = default(string), string subsequentDocumentCategory = default(string), string processFlowLevel = default(string), string relatedProcFlowDocStsFieldName = default(string), string sDProcessStatus = default(string), string accountingTransferStatus = default(string), string prelimBillingDocumentStatus = default(string), string subsqntDocItmPrecdgDocument = default(string), string subsqntDocItmPrecdgDocItem = default(string), string subsqntDocItmPrecdgDocCategory = default(string), string creationDate = default(string), string creationTime = default(string), string lastChangeDate = default(string))
        {
            this.SubsequentDocument = subsequentDocument;
            this.SubsequentDocumentItem = subsequentDocumentItem;
            this.SubsequentDocumentCategory = subsequentDocumentCategory;
            this.ProcessFlowLevel = processFlowLevel;
            this.RelatedProcFlowDocStsFieldName = relatedProcFlowDocStsFieldName;
            this.SDProcessStatus = sDProcessStatus;
            this.AccountingTransferStatus = accountingTransferStatus;
            this.PrelimBillingDocumentStatus = prelimBillingDocumentStatus;
            this.SubsqntDocItmPrecdgDocument = subsqntDocItmPrecdgDocument;
            this.SubsqntDocItmPrecdgDocItem = subsqntDocItmPrecdgDocItem;
            this.SubsqntDocItmPrecdgDocCategory = subsqntDocItmPrecdgDocCategory;
            this.CreationDate = creationDate;
            this.CreationTime = creationTime;
            this.LastChangeDate = lastChangeDate;
        }

        /// <summary>
        /// Subsequent Sales and Distribution Document
        /// </summary>
        /// <value>Subsequent Sales and Distribution Document</value>
        [DataMember(Name = "SubsequentDocument", EmitDefaultValue = true)]
        public string SubsequentDocument { get; set; }

        /// <summary>
        /// Subsequent Item of an SD Document
        /// </summary>
        /// <value>Subsequent Item of an SD Document</value>
        [DataMember(Name = "SubsequentDocumentItem", EmitDefaultValue = true)]
        public string SubsequentDocumentItem { get; set; }

        /// <summary>
        /// Document Category of Subsequent Document
        /// </summary>
        /// <value>Document Category of Subsequent Document</value>
        [DataMember(Name = "SubsequentDocumentCategory", EmitDefaultValue = true)]
        public string SubsequentDocumentCategory { get; set; }

        /// <summary>
        /// Level of the document flow record
        /// </summary>
        /// <value>Level of the document flow record</value>
        [DataMember(Name = "ProcessFlowLevel", EmitDefaultValue = true)]
        public string ProcessFlowLevel { get; set; }

        /// <summary>
        /// Gets or Sets RelatedProcFlowDocStsFieldName
        /// </summary>
        [DataMember(Name = "RelatedProcFlowDocStsFieldName", EmitDefaultValue = true)]
        public string RelatedProcFlowDocStsFieldName { get; set; }

        /// <summary>
        /// Overall Processing Status (Item)
        /// </summary>
        /// <value>Overall Processing Status (Item)</value>
        [DataMember(Name = "SDProcessStatus", EmitDefaultValue = true)]
        public string SDProcessStatus { get; set; }

        /// <summary>
        /// Status for Transfer to Accounting
        /// </summary>
        /// <value>Status for Transfer to Accounting</value>
        [DataMember(Name = "AccountingTransferStatus", EmitDefaultValue = true)]
        public string AccountingTransferStatus { get; set; }

        /// <summary>
        /// Preliminary Billing Document Status
        /// </summary>
        /// <value>Preliminary Billing Document Status</value>
        [DataMember(Name = "PrelimBillingDocumentStatus", EmitDefaultValue = true)]
        public string PrelimBillingDocumentStatus { get; set; }

        /// <summary>
        /// Preceding sales and distribution document
        /// </summary>
        /// <value>Preceding sales and distribution document</value>
        [DataMember(Name = "SubsqntDocItmPrecdgDocument", EmitDefaultValue = true)]
        public string SubsqntDocItmPrecdgDocument { get; set; }

        /// <summary>
        /// Preceding Item of an SD Document
        /// </summary>
        /// <value>Preceding Item of an SD Document</value>
        [DataMember(Name = "SubsqntDocItmPrecdgDocItem", EmitDefaultValue = true)]
        public string SubsqntDocItmPrecdgDocItem { get; set; }

        /// <summary>
        /// Document Category of Preceding SD Document
        /// </summary>
        /// <value>Document Category of Preceding SD Document</value>
        [DataMember(Name = "SubsqntDocItmPrecdgDocCategory", EmitDefaultValue = true)]
        public string SubsqntDocItmPrecdgDocCategory { get; set; }

        /// <summary>
        /// Record Creation Date
        /// </summary>
        /// <value>Record Creation Date</value>
        /*
        <example>/Date(1492041600000)/</example>
        */
        [DataMember(Name = "CreationDate", EmitDefaultValue = true)]
        public string CreationDate { get; set; }

        /// <summary>
        /// Entry time
        /// </summary>
        /// <value>Entry time</value>
        /*
        <example>PT15H51M04S</example>
        */
        [DataMember(Name = "CreationTime", EmitDefaultValue = true)]
        public string CreationTime { get; set; }

        /// <summary>
        /// Last Changed On
        /// </summary>
        /// <value>Last Changed On</value>
        /*
        <example>/Date(1492041600000)/</example>
        */
        [DataMember(Name = "LastChangeDate", EmitDefaultValue = true)]
        public string LastChangeDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class APISALESORDERSRVASalesOrderItmSubsqntProcFlowTypeUpdate {\n");
            sb.Append("  SubsequentDocument: ").Append(SubsequentDocument).Append("\n");
            sb.Append("  SubsequentDocumentItem: ").Append(SubsequentDocumentItem).Append("\n");
            sb.Append("  SubsequentDocumentCategory: ").Append(SubsequentDocumentCategory).Append("\n");
            sb.Append("  ProcessFlowLevel: ").Append(ProcessFlowLevel).Append("\n");
            sb.Append("  RelatedProcFlowDocStsFieldName: ").Append(RelatedProcFlowDocStsFieldName).Append("\n");
            sb.Append("  SDProcessStatus: ").Append(SDProcessStatus).Append("\n");
            sb.Append("  AccountingTransferStatus: ").Append(AccountingTransferStatus).Append("\n");
            sb.Append("  PrelimBillingDocumentStatus: ").Append(PrelimBillingDocumentStatus).Append("\n");
            sb.Append("  SubsqntDocItmPrecdgDocument: ").Append(SubsqntDocItmPrecdgDocument).Append("\n");
            sb.Append("  SubsqntDocItmPrecdgDocItem: ").Append(SubsqntDocItmPrecdgDocItem).Append("\n");
            sb.Append("  SubsqntDocItmPrecdgDocCategory: ").Append(SubsqntDocItmPrecdgDocCategory).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  LastChangeDate: ").Append(LastChangeDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SubsequentDocument (string) maxLength
            if (this.SubsequentDocument != null && this.SubsequentDocument.Length > 10)
            {
                yield return new ValidationResult("Invalid value for SubsequentDocument, length must be less than 10.", new [] { "SubsequentDocument" });
            }

            // SubsequentDocumentItem (string) maxLength
            if (this.SubsequentDocumentItem != null && this.SubsequentDocumentItem.Length > 6)
            {
                yield return new ValidationResult("Invalid value for SubsequentDocumentItem, length must be less than 6.", new [] { "SubsequentDocumentItem" });
            }

            // SubsequentDocumentCategory (string) maxLength
            if (this.SubsequentDocumentCategory != null && this.SubsequentDocumentCategory.Length > 4)
            {
                yield return new ValidationResult("Invalid value for SubsequentDocumentCategory, length must be less than 4.", new [] { "SubsequentDocumentCategory" });
            }

            // ProcessFlowLevel (string) maxLength
            if (this.ProcessFlowLevel != null && this.ProcessFlowLevel.Length > 2)
            {
                yield return new ValidationResult("Invalid value for ProcessFlowLevel, length must be less than 2.", new [] { "ProcessFlowLevel" });
            }

            // RelatedProcFlowDocStsFieldName (string) maxLength
            if (this.RelatedProcFlowDocStsFieldName != null && this.RelatedProcFlowDocStsFieldName.Length > 30)
            {
                yield return new ValidationResult("Invalid value for RelatedProcFlowDocStsFieldName, length must be less than 30.", new [] { "RelatedProcFlowDocStsFieldName" });
            }

            // SDProcessStatus (string) maxLength
            if (this.SDProcessStatus != null && this.SDProcessStatus.Length > 1)
            {
                yield return new ValidationResult("Invalid value for SDProcessStatus, length must be less than 1.", new [] { "SDProcessStatus" });
            }

            // AccountingTransferStatus (string) maxLength
            if (this.AccountingTransferStatus != null && this.AccountingTransferStatus.Length > 1)
            {
                yield return new ValidationResult("Invalid value for AccountingTransferStatus, length must be less than 1.", new [] { "AccountingTransferStatus" });
            }

            // PrelimBillingDocumentStatus (string) maxLength
            if (this.PrelimBillingDocumentStatus != null && this.PrelimBillingDocumentStatus.Length > 1)
            {
                yield return new ValidationResult("Invalid value for PrelimBillingDocumentStatus, length must be less than 1.", new [] { "PrelimBillingDocumentStatus" });
            }

            // SubsqntDocItmPrecdgDocument (string) maxLength
            if (this.SubsqntDocItmPrecdgDocument != null && this.SubsqntDocItmPrecdgDocument.Length > 10)
            {
                yield return new ValidationResult("Invalid value for SubsqntDocItmPrecdgDocument, length must be less than 10.", new [] { "SubsqntDocItmPrecdgDocument" });
            }

            // SubsqntDocItmPrecdgDocItem (string) maxLength
            if (this.SubsqntDocItmPrecdgDocItem != null && this.SubsqntDocItmPrecdgDocItem.Length > 6)
            {
                yield return new ValidationResult("Invalid value for SubsqntDocItmPrecdgDocItem, length must be less than 6.", new [] { "SubsqntDocItmPrecdgDocItem" });
            }

            // SubsqntDocItmPrecdgDocCategory (string) maxLength
            if (this.SubsqntDocItmPrecdgDocCategory != null && this.SubsqntDocItmPrecdgDocCategory.Length > 4)
            {
                yield return new ValidationResult("Invalid value for SubsqntDocItmPrecdgDocCategory, length must be less than 4.", new [] { "SubsqntDocItmPrecdgDocCategory" });
            }

            yield break;
        }
    }

}
