/*
 * Sales Order (A2X)
 *
 * In every API call, you can make use of the following operations:   - You can read entire sales orders or only parts of the data, using the provided filters.   - You can create sales orders. You can use deep insert requests, that is, you create a header plus at least one of the following entities: header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, header related object, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object.   If the header already exists, you can create the following sub-entities on their own: header partner, header pricing element, header text, payment plan, header related object, item partner, item pricing element, item text, and item related object.   - For existing sales orders, you can create new items. You can use deep insert requests, that is, you create an item plus at least one of the following entities: item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object. If the item already exists, you can create the following sub-entities on their own: item partner, item pricing element, item text, item related object, and item schedule line.   - For existing sales orders, you can update the following entities (that is, you can change the content of their properties): header, header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item schedule line.   - For existing sales orders, you can delete the following entities: header, header partner, header pricing element, header billing plan item, header text, payment plan, header related object, item, item partner, item pricing element, item billing plan item, item text, item related object, and item schedule line.   - You can accept or deny approval requests for sales orders that cannot be processed without the consent of an approver.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// APISALESORDERSRVASalesOrderItemBillingPlanType
    /// </summary>
    [DataContract(Name = "API_SALES_ORDER_SRV.A_SalesOrderItemBillingPlanType")]
    public partial class APISALESORDERSRVASalesOrderItemBillingPlanType : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="APISALESORDERSRVASalesOrderItemBillingPlanType" /> class.
        /// </summary>
        /// <param name="salesOrder">salesOrder.</param>
        /// <param name="salesOrderItem">Sales Order Item.</param>
        /// <param name="billingPlan">Billing/Invoicing Plan Number.</param>
        /// <param name="billingPlanIsInHeader">Indicator for Billing Plan on Header.</param>
        /// <param name="billingPlanStartDate">Start Date of Billing/Invoicing Plan.</param>
        /// <param name="billingPlanStartDateRule">Rule for Origin of Start Date of Billing/Invoicing Plan.</param>
        /// <param name="referenceBillingPlan">Reference Billing Plan Number / Invoicing Plan Number.</param>
        /// <param name="billingPlanCategory">Billing plan category.</param>
        /// <param name="billingPlanType">Billing/Invoicing Plan Type.</param>
        /// <param name="billingPlanEndDate">End Date of Billing/Invoicing Plan.</param>
        /// <param name="billingPlanEndDateRule">Rule for Origin of End Date for Billing/Invoicing Plan.</param>
        /// <param name="billingPlanSearchTerm">Sort Field.</param>
        /// <param name="toBillingPlanItem">toBillingPlanItem.</param>
        /// <param name="toSalesOrder">toSalesOrder.</param>
        /// <param name="toSalesOrderItem">toSalesOrderItem.</param>
        public APISALESORDERSRVASalesOrderItemBillingPlanType(string salesOrder = default(string), string salesOrderItem = default(string), string billingPlan = default(string), bool? billingPlanIsInHeader = default(bool?), string billingPlanStartDate = default(string), string billingPlanStartDateRule = default(string), string referenceBillingPlan = default(string), string billingPlanCategory = default(string), string billingPlanType = default(string), string billingPlanEndDate = default(string), string billingPlanEndDateRule = default(string), string billingPlanSearchTerm = default(string), APISALESORDERSRVASalesOrderItemBillingPlanTypeToBillingPlanItem toBillingPlanItem = default(APISALESORDERSRVASalesOrderItemBillingPlanTypeToBillingPlanItem), APISALESORDERSRVASalesOrderType toSalesOrder = default(APISALESORDERSRVASalesOrderType), APISALESORDERSRVASalesOrderItemType toSalesOrderItem = default(APISALESORDERSRVASalesOrderItemType))
        {
            this.SalesOrder = salesOrder;
            this.SalesOrderItem = salesOrderItem;
            this.BillingPlan = billingPlan;
            this.BillingPlanIsInHeader = billingPlanIsInHeader;
            this.BillingPlanStartDate = billingPlanStartDate;
            this.BillingPlanStartDateRule = billingPlanStartDateRule;
            this.ReferenceBillingPlan = referenceBillingPlan;
            this.BillingPlanCategory = billingPlanCategory;
            this.BillingPlanType = billingPlanType;
            this.BillingPlanEndDate = billingPlanEndDate;
            this.BillingPlanEndDateRule = billingPlanEndDateRule;
            this.BillingPlanSearchTerm = billingPlanSearchTerm;
            this.ToBillingPlanItem = toBillingPlanItem;
            this.ToSalesOrder = toSalesOrder;
            this.ToSalesOrderItem = toSalesOrderItem;
        }

        /// <summary>
        /// Gets or Sets SalesOrder
        /// </summary>
        [DataMember(Name = "SalesOrder", EmitDefaultValue = false)]
        public string SalesOrder { get; set; }

        /// <summary>
        /// Sales Order Item
        /// </summary>
        /// <value>Sales Order Item</value>
        [DataMember(Name = "SalesOrderItem", EmitDefaultValue = false)]
        public string SalesOrderItem { get; set; }

        /// <summary>
        /// Billing/Invoicing Plan Number
        /// </summary>
        /// <value>Billing/Invoicing Plan Number</value>
        [DataMember(Name = "BillingPlan", EmitDefaultValue = false)]
        public string BillingPlan { get; set; }

        /// <summary>
        /// Indicator for Billing Plan on Header
        /// </summary>
        /// <value>Indicator for Billing Plan on Header</value>
        [DataMember(Name = "BillingPlanIsInHeader", EmitDefaultValue = true)]
        public bool? BillingPlanIsInHeader { get; set; }

        /// <summary>
        /// Start Date of Billing/Invoicing Plan
        /// </summary>
        /// <value>Start Date of Billing/Invoicing Plan</value>
        /*
        <example>/Date(1492041600000)/</example>
        */
        [DataMember(Name = "BillingPlanStartDate", EmitDefaultValue = true)]
        public string BillingPlanStartDate { get; set; }

        /// <summary>
        /// Rule for Origin of Start Date of Billing/Invoicing Plan
        /// </summary>
        /// <value>Rule for Origin of Start Date of Billing/Invoicing Plan</value>
        [DataMember(Name = "BillingPlanStartDateRule", EmitDefaultValue = true)]
        public string BillingPlanStartDateRule { get; set; }

        /// <summary>
        /// Reference Billing Plan Number / Invoicing Plan Number
        /// </summary>
        /// <value>Reference Billing Plan Number / Invoicing Plan Number</value>
        [DataMember(Name = "ReferenceBillingPlan", EmitDefaultValue = true)]
        public string ReferenceBillingPlan { get; set; }

        /// <summary>
        /// Billing plan category
        /// </summary>
        /// <value>Billing plan category</value>
        [DataMember(Name = "BillingPlanCategory", EmitDefaultValue = true)]
        public string BillingPlanCategory { get; set; }

        /// <summary>
        /// Billing/Invoicing Plan Type
        /// </summary>
        /// <value>Billing/Invoicing Plan Type</value>
        [DataMember(Name = "BillingPlanType", EmitDefaultValue = true)]
        public string BillingPlanType { get; set; }

        /// <summary>
        /// End Date of Billing/Invoicing Plan
        /// </summary>
        /// <value>End Date of Billing/Invoicing Plan</value>
        /*
        <example>/Date(1492041600000)/</example>
        */
        [DataMember(Name = "BillingPlanEndDate", EmitDefaultValue = true)]
        public string BillingPlanEndDate { get; set; }

        /// <summary>
        /// Rule for Origin of End Date for Billing/Invoicing Plan
        /// </summary>
        /// <value>Rule for Origin of End Date for Billing/Invoicing Plan</value>
        [DataMember(Name = "BillingPlanEndDateRule", EmitDefaultValue = true)]
        public string BillingPlanEndDateRule { get; set; }

        /// <summary>
        /// Sort Field
        /// </summary>
        /// <value>Sort Field</value>
        [DataMember(Name = "BillingPlanSearchTerm", EmitDefaultValue = true)]
        public string BillingPlanSearchTerm { get; set; }

        /// <summary>
        /// Gets or Sets ToBillingPlanItem
        /// </summary>
        [DataMember(Name = "to_BillingPlanItem", EmitDefaultValue = false)]
        public APISALESORDERSRVASalesOrderItemBillingPlanTypeToBillingPlanItem ToBillingPlanItem { get; set; }

        /// <summary>
        /// Gets or Sets ToSalesOrder
        /// </summary>
        [DataMember(Name = "to_SalesOrder", EmitDefaultValue = false)]
        public APISALESORDERSRVASalesOrderType ToSalesOrder { get; set; }

        /// <summary>
        /// Gets or Sets ToSalesOrderItem
        /// </summary>
        [DataMember(Name = "to_SalesOrderItem", EmitDefaultValue = false)]
        public APISALESORDERSRVASalesOrderItemType ToSalesOrderItem { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class APISALESORDERSRVASalesOrderItemBillingPlanType {\n");
            sb.Append("  SalesOrder: ").Append(SalesOrder).Append("\n");
            sb.Append("  SalesOrderItem: ").Append(SalesOrderItem).Append("\n");
            sb.Append("  BillingPlan: ").Append(BillingPlan).Append("\n");
            sb.Append("  BillingPlanIsInHeader: ").Append(BillingPlanIsInHeader).Append("\n");
            sb.Append("  BillingPlanStartDate: ").Append(BillingPlanStartDate).Append("\n");
            sb.Append("  BillingPlanStartDateRule: ").Append(BillingPlanStartDateRule).Append("\n");
            sb.Append("  ReferenceBillingPlan: ").Append(ReferenceBillingPlan).Append("\n");
            sb.Append("  BillingPlanCategory: ").Append(BillingPlanCategory).Append("\n");
            sb.Append("  BillingPlanType: ").Append(BillingPlanType).Append("\n");
            sb.Append("  BillingPlanEndDate: ").Append(BillingPlanEndDate).Append("\n");
            sb.Append("  BillingPlanEndDateRule: ").Append(BillingPlanEndDateRule).Append("\n");
            sb.Append("  BillingPlanSearchTerm: ").Append(BillingPlanSearchTerm).Append("\n");
            sb.Append("  ToBillingPlanItem: ").Append(ToBillingPlanItem).Append("\n");
            sb.Append("  ToSalesOrder: ").Append(ToSalesOrder).Append("\n");
            sb.Append("  ToSalesOrderItem: ").Append(ToSalesOrderItem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SalesOrder (string) maxLength
            if (this.SalesOrder != null && this.SalesOrder.Length > 10)
            {
                yield return new ValidationResult("Invalid value for SalesOrder, length must be less than 10.", new [] { "SalesOrder" });
            }

            // SalesOrderItem (string) maxLength
            if (this.SalesOrderItem != null && this.SalesOrderItem.Length > 6)
            {
                yield return new ValidationResult("Invalid value for SalesOrderItem, length must be less than 6.", new [] { "SalesOrderItem" });
            }

            // BillingPlan (string) maxLength
            if (this.BillingPlan != null && this.BillingPlan.Length > 10)
            {
                yield return new ValidationResult("Invalid value for BillingPlan, length must be less than 10.", new [] { "BillingPlan" });
            }

            // BillingPlanStartDateRule (string) maxLength
            if (this.BillingPlanStartDateRule != null && this.BillingPlanStartDateRule.Length > 2)
            {
                yield return new ValidationResult("Invalid value for BillingPlanStartDateRule, length must be less than 2.", new [] { "BillingPlanStartDateRule" });
            }

            // ReferenceBillingPlan (string) maxLength
            if (this.ReferenceBillingPlan != null && this.ReferenceBillingPlan.Length > 10)
            {
                yield return new ValidationResult("Invalid value for ReferenceBillingPlan, length must be less than 10.", new [] { "ReferenceBillingPlan" });
            }

            // BillingPlanCategory (string) maxLength
            if (this.BillingPlanCategory != null && this.BillingPlanCategory.Length > 1)
            {
                yield return new ValidationResult("Invalid value for BillingPlanCategory, length must be less than 1.", new [] { "BillingPlanCategory" });
            }

            // BillingPlanType (string) maxLength
            if (this.BillingPlanType != null && this.BillingPlanType.Length > 2)
            {
                yield return new ValidationResult("Invalid value for BillingPlanType, length must be less than 2.", new [] { "BillingPlanType" });
            }

            // BillingPlanEndDateRule (string) maxLength
            if (this.BillingPlanEndDateRule != null && this.BillingPlanEndDateRule.Length > 2)
            {
                yield return new ValidationResult("Invalid value for BillingPlanEndDateRule, length must be less than 2.", new [] { "BillingPlanEndDateRule" });
            }

            // BillingPlanSearchTerm (string) maxLength
            if (this.BillingPlanSearchTerm != null && this.BillingPlanSearchTerm.Length > 10)
            {
                yield return new ValidationResult("Invalid value for BillingPlanSearchTerm, length must be less than 10.", new [] { "BillingPlanSearchTerm" });
            }

            yield break;
        }
    }

}
