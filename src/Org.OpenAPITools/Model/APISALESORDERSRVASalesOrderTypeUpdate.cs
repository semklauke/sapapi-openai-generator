/*
 * Sales Order (A2X)
 *
 * In every API call, you can make use of the following operations:   - You can read entire sales orders or only parts of the data, using the provided filters.   - You can create sales orders. You can use deep insert requests, that is, you create a header plus at least one of the following entities: header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, header related object, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object.   If the header already exists, you can create the following sub-entities on their own: header partner, header pricing element, header text, payment plan, header related object, item partner, item pricing element, item text, and item related object.   - For existing sales orders, you can create new items. You can use deep insert requests, that is, you create an item plus at least one of the following entities: item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object. If the item already exists, you can create the following sub-entities on their own: item partner, item pricing element, item text, item related object, and item schedule line.   - For existing sales orders, you can update the following entities (that is, you can change the content of their properties): header, header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item schedule line.   - For existing sales orders, you can delete the following entities: header, header partner, header pricing element, header billing plan item, header text, payment plan, header related object, item, item partner, item pricing element, item billing plan item, item text, item related object, and item schedule line.   - You can accept or deny approval requests for sales orders that cannot be processed without the consent of an approver.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// APISALESORDERSRVASalesOrderTypeUpdate
    /// </summary>
    [DataContract(Name = "API_SALES_ORDER_SRV.A_SalesOrderType-update")]
    public partial class APISALESORDERSRVASalesOrderTypeUpdate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="APISALESORDERSRVASalesOrderTypeUpdate" /> class.
        /// </summary>
        /// <param name="salesOrderType">salesOrderType.</param>
        /// <param name="salesOrganization">salesOrganization.</param>
        /// <param name="distributionChannel">distributionChannel.</param>
        /// <param name="organizationDivision">organizationDivision.</param>
        /// <param name="salesGroup">salesGroup.</param>
        /// <param name="salesOffice">salesOffice.</param>
        /// <param name="salesDistrict">salesDistrict.</param>
        /// <param name="soldToParty">soldToParty.</param>
        /// <param name="purchaseOrderByCustomer">purchaseOrderByCustomer.</param>
        /// <param name="purchaseOrderByShipToParty">Ship-to Party&#39;s Customer Reference.</param>
        /// <param name="customerPurchaseOrderType">Customer Purchase Order Type.</param>
        /// <param name="customerPurchaseOrderDate">customerPurchaseOrderDate.</param>
        /// <param name="salesOrderDate">Document Date (Date Received/Sent).</param>
        /// <param name="transactionCurrency">SD Document Currency.</param>
        /// <param name="sDDocumentReason">Order Reason (Reason for the Business Transaction).</param>
        /// <param name="pricingDate">Date for Pricing and Exchange Rate.</param>
        /// <param name="priceDetnExchangeRate">Exchange Rate for Price Determination.</param>
        /// <param name="billingPlan">Billing Plan Number / Invoicing Plan Number.</param>
        /// <param name="requestedDeliveryDate">requestedDeliveryDate.</param>
        /// <param name="shippingCondition">shippingCondition.</param>
        /// <param name="completeDeliveryIsDefined">Complete Delivery Defined for Each Sales Order.</param>
        /// <param name="shippingType">shippingType.</param>
        /// <param name="headerBillingBlockReason">Billing Block in SD Document.</param>
        /// <param name="deliveryBlockReason">Delivery Block (Document Header).</param>
        /// <param name="deliveryDateTypeRule">deliveryDateTypeRule.</param>
        /// <param name="incotermsClassification">Incoterms (Part 1).</param>
        /// <param name="incotermsTransferLocation">incotermsTransferLocation.</param>
        /// <param name="incotermsLocation1">incotermsLocation1.</param>
        /// <param name="incotermsLocation2">incotermsLocation2.</param>
        /// <param name="incotermsVersion">incotermsVersion.</param>
        /// <param name="customerPriceGroup">customerPriceGroup.</param>
        /// <param name="priceListType">priceListType.</param>
        /// <param name="customerPaymentTerms">Key for Terms of Payment.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="fixedValueDate">fixedValueDate.</param>
        /// <param name="assignmentReference">Assignment Number.</param>
        /// <param name="referenceSDDocument">Document Number of Reference Document.</param>
        /// <param name="accountingDocExternalReference">Reference Document Number.</param>
        /// <param name="customerAccountAssignmentGroup">customerAccountAssignmentGroup.</param>
        /// <param name="accountingExchangeRate">Exchange Rate for Postings to Financial Accounting.</param>
        /// <param name="customerGroup">customerGroup.</param>
        /// <param name="additionalCustomerGroup1">additionalCustomerGroup1.</param>
        /// <param name="additionalCustomerGroup2">additionalCustomerGroup2.</param>
        /// <param name="additionalCustomerGroup3">additionalCustomerGroup3.</param>
        /// <param name="additionalCustomerGroup4">additionalCustomerGroup4.</param>
        /// <param name="additionalCustomerGroup5">additionalCustomerGroup5.</param>
        /// <param name="slsDocIsRlvtForProofOfDeliv">slsDocIsRlvtForProofOfDeliv.</param>
        /// <param name="customerTaxClassification1">Alternative Tax Classification.</param>
        /// <param name="customerTaxClassification2">Tax Classification 2 for Customer.</param>
        /// <param name="customerTaxClassification3">Tax Classification 3 for Customer.</param>
        /// <param name="customerTaxClassification4">Tax Classification 4 for Customer.</param>
        /// <param name="customerTaxClassification5">Tax Classification 5 for Customer.</param>
        /// <param name="customerTaxClassification6">Tax Classification 6 for Customer.</param>
        /// <param name="customerTaxClassification7">Tax Classification 7 for Customer.</param>
        /// <param name="customerTaxClassification8">Tax Classification 8 for Customer.</param>
        /// <param name="customerTaxClassification9">Tax Classification 9 for Customer.</param>
        /// <param name="taxDepartureCountry">taxDepartureCountry.</param>
        /// <param name="vATRegistrationCountry">vATRegistrationCountry.</param>
        /// <param name="billingDocumentDate">billingDocumentDate.</param>
        /// <param name="contractAccount">Contract Account Number.</param>
        /// <param name="additionalValueDays">Additional Value Days.</param>
        /// <param name="customerPurchaseOrderSuplmnt">Purchase order number supplement.</param>
        /// <param name="servicesRenderedDate">Date on which services are rendered.</param>
        public APISALESORDERSRVASalesOrderTypeUpdate(string salesOrderType = default(string), string salesOrganization = default(string), string distributionChannel = default(string), string organizationDivision = default(string), string salesGroup = default(string), string salesOffice = default(string), string salesDistrict = default(string), string soldToParty = default(string), string purchaseOrderByCustomer = default(string), string purchaseOrderByShipToParty = default(string), string customerPurchaseOrderType = default(string), string customerPurchaseOrderDate = default(string), string salesOrderDate = default(string), string transactionCurrency = default(string), string sDDocumentReason = default(string), string pricingDate = default(string), decimal? priceDetnExchangeRate = default(decimal?), string billingPlan = default(string), string requestedDeliveryDate = default(string), string shippingCondition = default(string), bool? completeDeliveryIsDefined = default(bool?), string shippingType = default(string), string headerBillingBlockReason = default(string), string deliveryBlockReason = default(string), string deliveryDateTypeRule = default(string), string incotermsClassification = default(string), string incotermsTransferLocation = default(string), string incotermsLocation1 = default(string), string incotermsLocation2 = default(string), string incotermsVersion = default(string), string customerPriceGroup = default(string), string priceListType = default(string), string customerPaymentTerms = default(string), string paymentMethod = default(string), string fixedValueDate = default(string), string assignmentReference = default(string), string referenceSDDocument = default(string), string accountingDocExternalReference = default(string), string customerAccountAssignmentGroup = default(string), decimal? accountingExchangeRate = default(decimal?), string customerGroup = default(string), string additionalCustomerGroup1 = default(string), string additionalCustomerGroup2 = default(string), string additionalCustomerGroup3 = default(string), string additionalCustomerGroup4 = default(string), string additionalCustomerGroup5 = default(string), bool? slsDocIsRlvtForProofOfDeliv = default(bool?), string customerTaxClassification1 = default(string), string customerTaxClassification2 = default(string), string customerTaxClassification3 = default(string), string customerTaxClassification4 = default(string), string customerTaxClassification5 = default(string), string customerTaxClassification6 = default(string), string customerTaxClassification7 = default(string), string customerTaxClassification8 = default(string), string customerTaxClassification9 = default(string), string taxDepartureCountry = default(string), string vATRegistrationCountry = default(string), string billingDocumentDate = default(string), string contractAccount = default(string), string additionalValueDays = default(string), string customerPurchaseOrderSuplmnt = default(string), string servicesRenderedDate = default(string))
        {
            this.SalesOrderType = salesOrderType;
            this.SalesOrganization = salesOrganization;
            this.DistributionChannel = distributionChannel;
            this.OrganizationDivision = organizationDivision;
            this.SalesGroup = salesGroup;
            this.SalesOffice = salesOffice;
            this.SalesDistrict = salesDistrict;
            this.SoldToParty = soldToParty;
            this.PurchaseOrderByCustomer = purchaseOrderByCustomer;
            this.PurchaseOrderByShipToParty = purchaseOrderByShipToParty;
            this.CustomerPurchaseOrderType = customerPurchaseOrderType;
            this.CustomerPurchaseOrderDate = customerPurchaseOrderDate;
            this.SalesOrderDate = salesOrderDate;
            this.TransactionCurrency = transactionCurrency;
            this.SDDocumentReason = sDDocumentReason;
            this.PricingDate = pricingDate;
            this.PriceDetnExchangeRate = priceDetnExchangeRate;
            this.BillingPlan = billingPlan;
            this.RequestedDeliveryDate = requestedDeliveryDate;
            this.ShippingCondition = shippingCondition;
            this.CompleteDeliveryIsDefined = completeDeliveryIsDefined;
            this.ShippingType = shippingType;
            this.HeaderBillingBlockReason = headerBillingBlockReason;
            this.DeliveryBlockReason = deliveryBlockReason;
            this.DeliveryDateTypeRule = deliveryDateTypeRule;
            this.IncotermsClassification = incotermsClassification;
            this.IncotermsTransferLocation = incotermsTransferLocation;
            this.IncotermsLocation1 = incotermsLocation1;
            this.IncotermsLocation2 = incotermsLocation2;
            this.IncotermsVersion = incotermsVersion;
            this.CustomerPriceGroup = customerPriceGroup;
            this.PriceListType = priceListType;
            this.CustomerPaymentTerms = customerPaymentTerms;
            this.PaymentMethod = paymentMethod;
            this.FixedValueDate = fixedValueDate;
            this.AssignmentReference = assignmentReference;
            this.ReferenceSDDocument = referenceSDDocument;
            this.AccountingDocExternalReference = accountingDocExternalReference;
            this.CustomerAccountAssignmentGroup = customerAccountAssignmentGroup;
            this.AccountingExchangeRate = accountingExchangeRate;
            this.CustomerGroup = customerGroup;
            this.AdditionalCustomerGroup1 = additionalCustomerGroup1;
            this.AdditionalCustomerGroup2 = additionalCustomerGroup2;
            this.AdditionalCustomerGroup3 = additionalCustomerGroup3;
            this.AdditionalCustomerGroup4 = additionalCustomerGroup4;
            this.AdditionalCustomerGroup5 = additionalCustomerGroup5;
            this.SlsDocIsRlvtForProofOfDeliv = slsDocIsRlvtForProofOfDeliv;
            this.CustomerTaxClassification1 = customerTaxClassification1;
            this.CustomerTaxClassification2 = customerTaxClassification2;
            this.CustomerTaxClassification3 = customerTaxClassification3;
            this.CustomerTaxClassification4 = customerTaxClassification4;
            this.CustomerTaxClassification5 = customerTaxClassification5;
            this.CustomerTaxClassification6 = customerTaxClassification6;
            this.CustomerTaxClassification7 = customerTaxClassification7;
            this.CustomerTaxClassification8 = customerTaxClassification8;
            this.CustomerTaxClassification9 = customerTaxClassification9;
            this.TaxDepartureCountry = taxDepartureCountry;
            this.VATRegistrationCountry = vATRegistrationCountry;
            this.BillingDocumentDate = billingDocumentDate;
            this.ContractAccount = contractAccount;
            this.AdditionalValueDays = additionalValueDays;
            this.CustomerPurchaseOrderSuplmnt = customerPurchaseOrderSuplmnt;
            this.ServicesRenderedDate = servicesRenderedDate;
        }

        /// <summary>
        /// Gets or Sets SalesOrderType
        /// </summary>
        [DataMember(Name = "SalesOrderType", EmitDefaultValue = true)]
        public string SalesOrderType { get; set; }

        /// <summary>
        /// Gets or Sets SalesOrganization
        /// </summary>
        [DataMember(Name = "SalesOrganization", EmitDefaultValue = true)]
        public string SalesOrganization { get; set; }

        /// <summary>
        /// Gets or Sets DistributionChannel
        /// </summary>
        [DataMember(Name = "DistributionChannel", EmitDefaultValue = true)]
        public string DistributionChannel { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationDivision
        /// </summary>
        [DataMember(Name = "OrganizationDivision", EmitDefaultValue = true)]
        public string OrganizationDivision { get; set; }

        /// <summary>
        /// Gets or Sets SalesGroup
        /// </summary>
        [DataMember(Name = "SalesGroup", EmitDefaultValue = true)]
        public string SalesGroup { get; set; }

        /// <summary>
        /// Gets or Sets SalesOffice
        /// </summary>
        [DataMember(Name = "SalesOffice", EmitDefaultValue = true)]
        public string SalesOffice { get; set; }

        /// <summary>
        /// Gets or Sets SalesDistrict
        /// </summary>
        [DataMember(Name = "SalesDistrict", EmitDefaultValue = true)]
        public string SalesDistrict { get; set; }

        /// <summary>
        /// Gets or Sets SoldToParty
        /// </summary>
        [DataMember(Name = "SoldToParty", EmitDefaultValue = true)]
        public string SoldToParty { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderByCustomer
        /// </summary>
        [DataMember(Name = "PurchaseOrderByCustomer", EmitDefaultValue = true)]
        public string PurchaseOrderByCustomer { get; set; }

        /// <summary>
        /// Ship-to Party&#39;s Customer Reference
        /// </summary>
        /// <value>Ship-to Party&#39;s Customer Reference</value>
        [DataMember(Name = "PurchaseOrderByShipToParty", EmitDefaultValue = true)]
        public string PurchaseOrderByShipToParty { get; set; }

        /// <summary>
        /// Customer Purchase Order Type
        /// </summary>
        /// <value>Customer Purchase Order Type</value>
        [DataMember(Name = "CustomerPurchaseOrderType", EmitDefaultValue = true)]
        public string CustomerPurchaseOrderType { get; set; }

        /// <summary>
        /// Gets or Sets CustomerPurchaseOrderDate
        /// </summary>
        /*
        <example>/Date(1492041600000)/</example>
        */
        [DataMember(Name = "CustomerPurchaseOrderDate", EmitDefaultValue = true)]
        public string CustomerPurchaseOrderDate { get; set; }

        /// <summary>
        /// Document Date (Date Received/Sent)
        /// </summary>
        /// <value>Document Date (Date Received/Sent)</value>
        /*
        <example>/Date(1492041600000)/</example>
        */
        [DataMember(Name = "SalesOrderDate", EmitDefaultValue = true)]
        public string SalesOrderDate { get; set; }

        /// <summary>
        /// SD Document Currency
        /// </summary>
        /// <value>SD Document Currency</value>
        [DataMember(Name = "TransactionCurrency", EmitDefaultValue = true)]
        public string TransactionCurrency { get; set; }

        /// <summary>
        /// Order Reason (Reason for the Business Transaction)
        /// </summary>
        /// <value>Order Reason (Reason for the Business Transaction)</value>
        [DataMember(Name = "SDDocumentReason", EmitDefaultValue = true)]
        public string SDDocumentReason { get; set; }

        /// <summary>
        /// Date for Pricing and Exchange Rate
        /// </summary>
        /// <value>Date for Pricing and Exchange Rate</value>
        /*
        <example>/Date(1492041600000)/</example>
        */
        [DataMember(Name = "PricingDate", EmitDefaultValue = true)]
        public string PricingDate { get; set; }

        /// <summary>
        /// Exchange Rate for Price Determination
        /// </summary>
        /// <value>Exchange Rate for Price Determination</value>
        /*
        <example>0</example>
        */
        [DataMember(Name = "PriceDetnExchangeRate", EmitDefaultValue = true)]
        public decimal? PriceDetnExchangeRate { get; set; }

        /// <summary>
        /// Billing Plan Number / Invoicing Plan Number
        /// </summary>
        /// <value>Billing Plan Number / Invoicing Plan Number</value>
        [DataMember(Name = "BillingPlan", EmitDefaultValue = true)]
        public string BillingPlan { get; set; }

        /// <summary>
        /// Gets or Sets RequestedDeliveryDate
        /// </summary>
        /*
        <example>/Date(1492041600000)/</example>
        */
        [DataMember(Name = "RequestedDeliveryDate", EmitDefaultValue = true)]
        public string RequestedDeliveryDate { get; set; }

        /// <summary>
        /// Gets or Sets ShippingCondition
        /// </summary>
        [DataMember(Name = "ShippingCondition", EmitDefaultValue = true)]
        public string ShippingCondition { get; set; }

        /// <summary>
        /// Complete Delivery Defined for Each Sales Order
        /// </summary>
        /// <value>Complete Delivery Defined for Each Sales Order</value>
        [DataMember(Name = "CompleteDeliveryIsDefined", EmitDefaultValue = true)]
        public bool? CompleteDeliveryIsDefined { get; set; }

        /// <summary>
        /// Gets or Sets ShippingType
        /// </summary>
        [DataMember(Name = "ShippingType", EmitDefaultValue = true)]
        public string ShippingType { get; set; }

        /// <summary>
        /// Billing Block in SD Document
        /// </summary>
        /// <value>Billing Block in SD Document</value>
        [DataMember(Name = "HeaderBillingBlockReason", EmitDefaultValue = true)]
        public string HeaderBillingBlockReason { get; set; }

        /// <summary>
        /// Delivery Block (Document Header)
        /// </summary>
        /// <value>Delivery Block (Document Header)</value>
        [DataMember(Name = "DeliveryBlockReason", EmitDefaultValue = true)]
        public string DeliveryBlockReason { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryDateTypeRule
        /// </summary>
        [DataMember(Name = "DeliveryDateTypeRule", EmitDefaultValue = true)]
        public string DeliveryDateTypeRule { get; set; }

        /// <summary>
        /// Incoterms (Part 1)
        /// </summary>
        /// <value>Incoterms (Part 1)</value>
        [DataMember(Name = "IncotermsClassification", EmitDefaultValue = true)]
        public string IncotermsClassification { get; set; }

        /// <summary>
        /// Gets or Sets IncotermsTransferLocation
        /// </summary>
        [DataMember(Name = "IncotermsTransferLocation", EmitDefaultValue = true)]
        public string IncotermsTransferLocation { get; set; }

        /// <summary>
        /// Gets or Sets IncotermsLocation1
        /// </summary>
        [DataMember(Name = "IncotermsLocation1", EmitDefaultValue = true)]
        public string IncotermsLocation1 { get; set; }

        /// <summary>
        /// Gets or Sets IncotermsLocation2
        /// </summary>
        [DataMember(Name = "IncotermsLocation2", EmitDefaultValue = true)]
        public string IncotermsLocation2 { get; set; }

        /// <summary>
        /// Gets or Sets IncotermsVersion
        /// </summary>
        [DataMember(Name = "IncotermsVersion", EmitDefaultValue = true)]
        public string IncotermsVersion { get; set; }

        /// <summary>
        /// Gets or Sets CustomerPriceGroup
        /// </summary>
        [DataMember(Name = "CustomerPriceGroup", EmitDefaultValue = true)]
        public string CustomerPriceGroup { get; set; }

        /// <summary>
        /// Gets or Sets PriceListType
        /// </summary>
        [DataMember(Name = "PriceListType", EmitDefaultValue = true)]
        public string PriceListType { get; set; }

        /// <summary>
        /// Key for Terms of Payment
        /// </summary>
        /// <value>Key for Terms of Payment</value>
        [DataMember(Name = "CustomerPaymentTerms", EmitDefaultValue = true)]
        public string CustomerPaymentTerms { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "PaymentMethod", EmitDefaultValue = true)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets FixedValueDate
        /// </summary>
        /*
        <example>/Date(1492041600000)/</example>
        */
        [DataMember(Name = "FixedValueDate", EmitDefaultValue = true)]
        public string FixedValueDate { get; set; }

        /// <summary>
        /// Assignment Number
        /// </summary>
        /// <value>Assignment Number</value>
        [DataMember(Name = "AssignmentReference", EmitDefaultValue = true)]
        public string AssignmentReference { get; set; }

        /// <summary>
        /// Document Number of Reference Document
        /// </summary>
        /// <value>Document Number of Reference Document</value>
        [DataMember(Name = "ReferenceSDDocument", EmitDefaultValue = true)]
        public string ReferenceSDDocument { get; set; }

        /// <summary>
        /// Reference Document Number
        /// </summary>
        /// <value>Reference Document Number</value>
        [DataMember(Name = "AccountingDocExternalReference", EmitDefaultValue = true)]
        public string AccountingDocExternalReference { get; set; }

        /// <summary>
        /// Gets or Sets CustomerAccountAssignmentGroup
        /// </summary>
        [DataMember(Name = "CustomerAccountAssignmentGroup", EmitDefaultValue = true)]
        public string CustomerAccountAssignmentGroup { get; set; }

        /// <summary>
        /// Exchange Rate for Postings to Financial Accounting
        /// </summary>
        /// <value>Exchange Rate for Postings to Financial Accounting</value>
        /*
        <example>0</example>
        */
        [DataMember(Name = "AccountingExchangeRate", EmitDefaultValue = true)]
        public decimal? AccountingExchangeRate { get; set; }

        /// <summary>
        /// Gets or Sets CustomerGroup
        /// </summary>
        [DataMember(Name = "CustomerGroup", EmitDefaultValue = true)]
        public string CustomerGroup { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalCustomerGroup1
        /// </summary>
        [DataMember(Name = "AdditionalCustomerGroup1", EmitDefaultValue = true)]
        public string AdditionalCustomerGroup1 { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalCustomerGroup2
        /// </summary>
        [DataMember(Name = "AdditionalCustomerGroup2", EmitDefaultValue = true)]
        public string AdditionalCustomerGroup2 { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalCustomerGroup3
        /// </summary>
        [DataMember(Name = "AdditionalCustomerGroup3", EmitDefaultValue = true)]
        public string AdditionalCustomerGroup3 { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalCustomerGroup4
        /// </summary>
        [DataMember(Name = "AdditionalCustomerGroup4", EmitDefaultValue = true)]
        public string AdditionalCustomerGroup4 { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalCustomerGroup5
        /// </summary>
        [DataMember(Name = "AdditionalCustomerGroup5", EmitDefaultValue = true)]
        public string AdditionalCustomerGroup5 { get; set; }

        /// <summary>
        /// Gets or Sets SlsDocIsRlvtForProofOfDeliv
        /// </summary>
        [DataMember(Name = "SlsDocIsRlvtForProofOfDeliv", EmitDefaultValue = true)]
        public bool? SlsDocIsRlvtForProofOfDeliv { get; set; }

        /// <summary>
        /// Alternative Tax Classification
        /// </summary>
        /// <value>Alternative Tax Classification</value>
        [DataMember(Name = "CustomerTaxClassification1", EmitDefaultValue = true)]
        public string CustomerTaxClassification1 { get; set; }

        /// <summary>
        /// Tax Classification 2 for Customer
        /// </summary>
        /// <value>Tax Classification 2 for Customer</value>
        [DataMember(Name = "CustomerTaxClassification2", EmitDefaultValue = true)]
        public string CustomerTaxClassification2 { get; set; }

        /// <summary>
        /// Tax Classification 3 for Customer
        /// </summary>
        /// <value>Tax Classification 3 for Customer</value>
        [DataMember(Name = "CustomerTaxClassification3", EmitDefaultValue = true)]
        public string CustomerTaxClassification3 { get; set; }

        /// <summary>
        /// Tax Classification 4 for Customer
        /// </summary>
        /// <value>Tax Classification 4 for Customer</value>
        [DataMember(Name = "CustomerTaxClassification4", EmitDefaultValue = true)]
        public string CustomerTaxClassification4 { get; set; }

        /// <summary>
        /// Tax Classification 5 for Customer
        /// </summary>
        /// <value>Tax Classification 5 for Customer</value>
        [DataMember(Name = "CustomerTaxClassification5", EmitDefaultValue = true)]
        public string CustomerTaxClassification5 { get; set; }

        /// <summary>
        /// Tax Classification 6 for Customer
        /// </summary>
        /// <value>Tax Classification 6 for Customer</value>
        [DataMember(Name = "CustomerTaxClassification6", EmitDefaultValue = true)]
        public string CustomerTaxClassification6 { get; set; }

        /// <summary>
        /// Tax Classification 7 for Customer
        /// </summary>
        /// <value>Tax Classification 7 for Customer</value>
        [DataMember(Name = "CustomerTaxClassification7", EmitDefaultValue = true)]
        public string CustomerTaxClassification7 { get; set; }

        /// <summary>
        /// Tax Classification 8 for Customer
        /// </summary>
        /// <value>Tax Classification 8 for Customer</value>
        [DataMember(Name = "CustomerTaxClassification8", EmitDefaultValue = true)]
        public string CustomerTaxClassification8 { get; set; }

        /// <summary>
        /// Tax Classification 9 for Customer
        /// </summary>
        /// <value>Tax Classification 9 for Customer</value>
        [DataMember(Name = "CustomerTaxClassification9", EmitDefaultValue = true)]
        public string CustomerTaxClassification9 { get; set; }

        /// <summary>
        /// Gets or Sets TaxDepartureCountry
        /// </summary>
        [DataMember(Name = "TaxDepartureCountry", EmitDefaultValue = true)]
        public string TaxDepartureCountry { get; set; }

        /// <summary>
        /// Gets or Sets VATRegistrationCountry
        /// </summary>
        [DataMember(Name = "VATRegistrationCountry", EmitDefaultValue = true)]
        public string VATRegistrationCountry { get; set; }

        /// <summary>
        /// Gets or Sets BillingDocumentDate
        /// </summary>
        /*
        <example>/Date(1492041600000)/</example>
        */
        [DataMember(Name = "BillingDocumentDate", EmitDefaultValue = true)]
        public string BillingDocumentDate { get; set; }

        /// <summary>
        /// Contract Account Number
        /// </summary>
        /// <value>Contract Account Number</value>
        [DataMember(Name = "ContractAccount", EmitDefaultValue = true)]
        public string ContractAccount { get; set; }

        /// <summary>
        /// Additional Value Days
        /// </summary>
        /// <value>Additional Value Days</value>
        [DataMember(Name = "AdditionalValueDays", EmitDefaultValue = true)]
        public string AdditionalValueDays { get; set; }

        /// <summary>
        /// Purchase order number supplement
        /// </summary>
        /// <value>Purchase order number supplement</value>
        [DataMember(Name = "CustomerPurchaseOrderSuplmnt", EmitDefaultValue = true)]
        public string CustomerPurchaseOrderSuplmnt { get; set; }

        /// <summary>
        /// Date on which services are rendered
        /// </summary>
        /// <value>Date on which services are rendered</value>
        /*
        <example>/Date(1492041600000)/</example>
        */
        [DataMember(Name = "ServicesRenderedDate", EmitDefaultValue = true)]
        public string ServicesRenderedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class APISALESORDERSRVASalesOrderTypeUpdate {\n");
            sb.Append("  SalesOrderType: ").Append(SalesOrderType).Append("\n");
            sb.Append("  SalesOrganization: ").Append(SalesOrganization).Append("\n");
            sb.Append("  DistributionChannel: ").Append(DistributionChannel).Append("\n");
            sb.Append("  OrganizationDivision: ").Append(OrganizationDivision).Append("\n");
            sb.Append("  SalesGroup: ").Append(SalesGroup).Append("\n");
            sb.Append("  SalesOffice: ").Append(SalesOffice).Append("\n");
            sb.Append("  SalesDistrict: ").Append(SalesDistrict).Append("\n");
            sb.Append("  SoldToParty: ").Append(SoldToParty).Append("\n");
            sb.Append("  PurchaseOrderByCustomer: ").Append(PurchaseOrderByCustomer).Append("\n");
            sb.Append("  PurchaseOrderByShipToParty: ").Append(PurchaseOrderByShipToParty).Append("\n");
            sb.Append("  CustomerPurchaseOrderType: ").Append(CustomerPurchaseOrderType).Append("\n");
            sb.Append("  CustomerPurchaseOrderDate: ").Append(CustomerPurchaseOrderDate).Append("\n");
            sb.Append("  SalesOrderDate: ").Append(SalesOrderDate).Append("\n");
            sb.Append("  TransactionCurrency: ").Append(TransactionCurrency).Append("\n");
            sb.Append("  SDDocumentReason: ").Append(SDDocumentReason).Append("\n");
            sb.Append("  PricingDate: ").Append(PricingDate).Append("\n");
            sb.Append("  PriceDetnExchangeRate: ").Append(PriceDetnExchangeRate).Append("\n");
            sb.Append("  BillingPlan: ").Append(BillingPlan).Append("\n");
            sb.Append("  RequestedDeliveryDate: ").Append(RequestedDeliveryDate).Append("\n");
            sb.Append("  ShippingCondition: ").Append(ShippingCondition).Append("\n");
            sb.Append("  CompleteDeliveryIsDefined: ").Append(CompleteDeliveryIsDefined).Append("\n");
            sb.Append("  ShippingType: ").Append(ShippingType).Append("\n");
            sb.Append("  HeaderBillingBlockReason: ").Append(HeaderBillingBlockReason).Append("\n");
            sb.Append("  DeliveryBlockReason: ").Append(DeliveryBlockReason).Append("\n");
            sb.Append("  DeliveryDateTypeRule: ").Append(DeliveryDateTypeRule).Append("\n");
            sb.Append("  IncotermsClassification: ").Append(IncotermsClassification).Append("\n");
            sb.Append("  IncotermsTransferLocation: ").Append(IncotermsTransferLocation).Append("\n");
            sb.Append("  IncotermsLocation1: ").Append(IncotermsLocation1).Append("\n");
            sb.Append("  IncotermsLocation2: ").Append(IncotermsLocation2).Append("\n");
            sb.Append("  IncotermsVersion: ").Append(IncotermsVersion).Append("\n");
            sb.Append("  CustomerPriceGroup: ").Append(CustomerPriceGroup).Append("\n");
            sb.Append("  PriceListType: ").Append(PriceListType).Append("\n");
            sb.Append("  CustomerPaymentTerms: ").Append(CustomerPaymentTerms).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  FixedValueDate: ").Append(FixedValueDate).Append("\n");
            sb.Append("  AssignmentReference: ").Append(AssignmentReference).Append("\n");
            sb.Append("  ReferenceSDDocument: ").Append(ReferenceSDDocument).Append("\n");
            sb.Append("  AccountingDocExternalReference: ").Append(AccountingDocExternalReference).Append("\n");
            sb.Append("  CustomerAccountAssignmentGroup: ").Append(CustomerAccountAssignmentGroup).Append("\n");
            sb.Append("  AccountingExchangeRate: ").Append(AccountingExchangeRate).Append("\n");
            sb.Append("  CustomerGroup: ").Append(CustomerGroup).Append("\n");
            sb.Append("  AdditionalCustomerGroup1: ").Append(AdditionalCustomerGroup1).Append("\n");
            sb.Append("  AdditionalCustomerGroup2: ").Append(AdditionalCustomerGroup2).Append("\n");
            sb.Append("  AdditionalCustomerGroup3: ").Append(AdditionalCustomerGroup3).Append("\n");
            sb.Append("  AdditionalCustomerGroup4: ").Append(AdditionalCustomerGroup4).Append("\n");
            sb.Append("  AdditionalCustomerGroup5: ").Append(AdditionalCustomerGroup5).Append("\n");
            sb.Append("  SlsDocIsRlvtForProofOfDeliv: ").Append(SlsDocIsRlvtForProofOfDeliv).Append("\n");
            sb.Append("  CustomerTaxClassification1: ").Append(CustomerTaxClassification1).Append("\n");
            sb.Append("  CustomerTaxClassification2: ").Append(CustomerTaxClassification2).Append("\n");
            sb.Append("  CustomerTaxClassification3: ").Append(CustomerTaxClassification3).Append("\n");
            sb.Append("  CustomerTaxClassification4: ").Append(CustomerTaxClassification4).Append("\n");
            sb.Append("  CustomerTaxClassification5: ").Append(CustomerTaxClassification5).Append("\n");
            sb.Append("  CustomerTaxClassification6: ").Append(CustomerTaxClassification6).Append("\n");
            sb.Append("  CustomerTaxClassification7: ").Append(CustomerTaxClassification7).Append("\n");
            sb.Append("  CustomerTaxClassification8: ").Append(CustomerTaxClassification8).Append("\n");
            sb.Append("  CustomerTaxClassification9: ").Append(CustomerTaxClassification9).Append("\n");
            sb.Append("  TaxDepartureCountry: ").Append(TaxDepartureCountry).Append("\n");
            sb.Append("  VATRegistrationCountry: ").Append(VATRegistrationCountry).Append("\n");
            sb.Append("  BillingDocumentDate: ").Append(BillingDocumentDate).Append("\n");
            sb.Append("  ContractAccount: ").Append(ContractAccount).Append("\n");
            sb.Append("  AdditionalValueDays: ").Append(AdditionalValueDays).Append("\n");
            sb.Append("  CustomerPurchaseOrderSuplmnt: ").Append(CustomerPurchaseOrderSuplmnt).Append("\n");
            sb.Append("  ServicesRenderedDate: ").Append(ServicesRenderedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SalesOrderType (string) maxLength
            if (this.SalesOrderType != null && this.SalesOrderType.Length > 4)
            {
                yield return new ValidationResult("Invalid value for SalesOrderType, length must be less than 4.", new [] { "SalesOrderType" });
            }

            // SalesOrganization (string) maxLength
            if (this.SalesOrganization != null && this.SalesOrganization.Length > 4)
            {
                yield return new ValidationResult("Invalid value for SalesOrganization, length must be less than 4.", new [] { "SalesOrganization" });
            }

            // DistributionChannel (string) maxLength
            if (this.DistributionChannel != null && this.DistributionChannel.Length > 2)
            {
                yield return new ValidationResult("Invalid value for DistributionChannel, length must be less than 2.", new [] { "DistributionChannel" });
            }

            // OrganizationDivision (string) maxLength
            if (this.OrganizationDivision != null && this.OrganizationDivision.Length > 2)
            {
                yield return new ValidationResult("Invalid value for OrganizationDivision, length must be less than 2.", new [] { "OrganizationDivision" });
            }

            // SalesGroup (string) maxLength
            if (this.SalesGroup != null && this.SalesGroup.Length > 3)
            {
                yield return new ValidationResult("Invalid value for SalesGroup, length must be less than 3.", new [] { "SalesGroup" });
            }

            // SalesOffice (string) maxLength
            if (this.SalesOffice != null && this.SalesOffice.Length > 4)
            {
                yield return new ValidationResult("Invalid value for SalesOffice, length must be less than 4.", new [] { "SalesOffice" });
            }

            // SalesDistrict (string) maxLength
            if (this.SalesDistrict != null && this.SalesDistrict.Length > 6)
            {
                yield return new ValidationResult("Invalid value for SalesDistrict, length must be less than 6.", new [] { "SalesDistrict" });
            }

            // SoldToParty (string) maxLength
            if (this.SoldToParty != null && this.SoldToParty.Length > 10)
            {
                yield return new ValidationResult("Invalid value for SoldToParty, length must be less than 10.", new [] { "SoldToParty" });
            }

            // PurchaseOrderByCustomer (string) maxLength
            if (this.PurchaseOrderByCustomer != null && this.PurchaseOrderByCustomer.Length > 35)
            {
                yield return new ValidationResult("Invalid value for PurchaseOrderByCustomer, length must be less than 35.", new [] { "PurchaseOrderByCustomer" });
            }

            // PurchaseOrderByShipToParty (string) maxLength
            if (this.PurchaseOrderByShipToParty != null && this.PurchaseOrderByShipToParty.Length > 35)
            {
                yield return new ValidationResult("Invalid value for PurchaseOrderByShipToParty, length must be less than 35.", new [] { "PurchaseOrderByShipToParty" });
            }

            // CustomerPurchaseOrderType (string) maxLength
            if (this.CustomerPurchaseOrderType != null && this.CustomerPurchaseOrderType.Length > 4)
            {
                yield return new ValidationResult("Invalid value for CustomerPurchaseOrderType, length must be less than 4.", new [] { "CustomerPurchaseOrderType" });
            }

            // TransactionCurrency (string) maxLength
            if (this.TransactionCurrency != null && this.TransactionCurrency.Length > 5)
            {
                yield return new ValidationResult("Invalid value for TransactionCurrency, length must be less than 5.", new [] { "TransactionCurrency" });
            }

            // SDDocumentReason (string) maxLength
            if (this.SDDocumentReason != null && this.SDDocumentReason.Length > 3)
            {
                yield return new ValidationResult("Invalid value for SDDocumentReason, length must be less than 3.", new [] { "SDDocumentReason" });
            }

            // BillingPlan (string) maxLength
            if (this.BillingPlan != null && this.BillingPlan.Length > 10)
            {
                yield return new ValidationResult("Invalid value for BillingPlan, length must be less than 10.", new [] { "BillingPlan" });
            }

            // ShippingCondition (string) maxLength
            if (this.ShippingCondition != null && this.ShippingCondition.Length > 2)
            {
                yield return new ValidationResult("Invalid value for ShippingCondition, length must be less than 2.", new [] { "ShippingCondition" });
            }

            // ShippingType (string) maxLength
            if (this.ShippingType != null && this.ShippingType.Length > 2)
            {
                yield return new ValidationResult("Invalid value for ShippingType, length must be less than 2.", new [] { "ShippingType" });
            }

            // HeaderBillingBlockReason (string) maxLength
            if (this.HeaderBillingBlockReason != null && this.HeaderBillingBlockReason.Length > 2)
            {
                yield return new ValidationResult("Invalid value for HeaderBillingBlockReason, length must be less than 2.", new [] { "HeaderBillingBlockReason" });
            }

            // DeliveryBlockReason (string) maxLength
            if (this.DeliveryBlockReason != null && this.DeliveryBlockReason.Length > 2)
            {
                yield return new ValidationResult("Invalid value for DeliveryBlockReason, length must be less than 2.", new [] { "DeliveryBlockReason" });
            }

            // DeliveryDateTypeRule (string) maxLength
            if (this.DeliveryDateTypeRule != null && this.DeliveryDateTypeRule.Length > 1)
            {
                yield return new ValidationResult("Invalid value for DeliveryDateTypeRule, length must be less than 1.", new [] { "DeliveryDateTypeRule" });
            }

            // IncotermsClassification (string) maxLength
            if (this.IncotermsClassification != null && this.IncotermsClassification.Length > 3)
            {
                yield return new ValidationResult("Invalid value for IncotermsClassification, length must be less than 3.", new [] { "IncotermsClassification" });
            }

            // IncotermsTransferLocation (string) maxLength
            if (this.IncotermsTransferLocation != null && this.IncotermsTransferLocation.Length > 28)
            {
                yield return new ValidationResult("Invalid value for IncotermsTransferLocation, length must be less than 28.", new [] { "IncotermsTransferLocation" });
            }

            // IncotermsLocation1 (string) maxLength
            if (this.IncotermsLocation1 != null && this.IncotermsLocation1.Length > 70)
            {
                yield return new ValidationResult("Invalid value for IncotermsLocation1, length must be less than 70.", new [] { "IncotermsLocation1" });
            }

            // IncotermsLocation2 (string) maxLength
            if (this.IncotermsLocation2 != null && this.IncotermsLocation2.Length > 70)
            {
                yield return new ValidationResult("Invalid value for IncotermsLocation2, length must be less than 70.", new [] { "IncotermsLocation2" });
            }

            // IncotermsVersion (string) maxLength
            if (this.IncotermsVersion != null && this.IncotermsVersion.Length > 4)
            {
                yield return new ValidationResult("Invalid value for IncotermsVersion, length must be less than 4.", new [] { "IncotermsVersion" });
            }

            // CustomerPriceGroup (string) maxLength
            if (this.CustomerPriceGroup != null && this.CustomerPriceGroup.Length > 2)
            {
                yield return new ValidationResult("Invalid value for CustomerPriceGroup, length must be less than 2.", new [] { "CustomerPriceGroup" });
            }

            // PriceListType (string) maxLength
            if (this.PriceListType != null && this.PriceListType.Length > 2)
            {
                yield return new ValidationResult("Invalid value for PriceListType, length must be less than 2.", new [] { "PriceListType" });
            }

            // CustomerPaymentTerms (string) maxLength
            if (this.CustomerPaymentTerms != null && this.CustomerPaymentTerms.Length > 4)
            {
                yield return new ValidationResult("Invalid value for CustomerPaymentTerms, length must be less than 4.", new [] { "CustomerPaymentTerms" });
            }

            // PaymentMethod (string) maxLength
            if (this.PaymentMethod != null && this.PaymentMethod.Length > 1)
            {
                yield return new ValidationResult("Invalid value for PaymentMethod, length must be less than 1.", new [] { "PaymentMethod" });
            }

            // AssignmentReference (string) maxLength
            if (this.AssignmentReference != null && this.AssignmentReference.Length > 18)
            {
                yield return new ValidationResult("Invalid value for AssignmentReference, length must be less than 18.", new [] { "AssignmentReference" });
            }

            // ReferenceSDDocument (string) maxLength
            if (this.ReferenceSDDocument != null && this.ReferenceSDDocument.Length > 10)
            {
                yield return new ValidationResult("Invalid value for ReferenceSDDocument, length must be less than 10.", new [] { "ReferenceSDDocument" });
            }

            // AccountingDocExternalReference (string) maxLength
            if (this.AccountingDocExternalReference != null && this.AccountingDocExternalReference.Length > 16)
            {
                yield return new ValidationResult("Invalid value for AccountingDocExternalReference, length must be less than 16.", new [] { "AccountingDocExternalReference" });
            }

            // CustomerAccountAssignmentGroup (string) maxLength
            if (this.CustomerAccountAssignmentGroup != null && this.CustomerAccountAssignmentGroup.Length > 2)
            {
                yield return new ValidationResult("Invalid value for CustomerAccountAssignmentGroup, length must be less than 2.", new [] { "CustomerAccountAssignmentGroup" });
            }

            // CustomerGroup (string) maxLength
            if (this.CustomerGroup != null && this.CustomerGroup.Length > 2)
            {
                yield return new ValidationResult("Invalid value for CustomerGroup, length must be less than 2.", new [] { "CustomerGroup" });
            }

            // AdditionalCustomerGroup1 (string) maxLength
            if (this.AdditionalCustomerGroup1 != null && this.AdditionalCustomerGroup1.Length > 3)
            {
                yield return new ValidationResult("Invalid value for AdditionalCustomerGroup1, length must be less than 3.", new [] { "AdditionalCustomerGroup1" });
            }

            // AdditionalCustomerGroup2 (string) maxLength
            if (this.AdditionalCustomerGroup2 != null && this.AdditionalCustomerGroup2.Length > 3)
            {
                yield return new ValidationResult("Invalid value for AdditionalCustomerGroup2, length must be less than 3.", new [] { "AdditionalCustomerGroup2" });
            }

            // AdditionalCustomerGroup3 (string) maxLength
            if (this.AdditionalCustomerGroup3 != null && this.AdditionalCustomerGroup3.Length > 3)
            {
                yield return new ValidationResult("Invalid value for AdditionalCustomerGroup3, length must be less than 3.", new [] { "AdditionalCustomerGroup3" });
            }

            // AdditionalCustomerGroup4 (string) maxLength
            if (this.AdditionalCustomerGroup4 != null && this.AdditionalCustomerGroup4.Length > 3)
            {
                yield return new ValidationResult("Invalid value for AdditionalCustomerGroup4, length must be less than 3.", new [] { "AdditionalCustomerGroup4" });
            }

            // AdditionalCustomerGroup5 (string) maxLength
            if (this.AdditionalCustomerGroup5 != null && this.AdditionalCustomerGroup5.Length > 3)
            {
                yield return new ValidationResult("Invalid value for AdditionalCustomerGroup5, length must be less than 3.", new [] { "AdditionalCustomerGroup5" });
            }

            // CustomerTaxClassification1 (string) maxLength
            if (this.CustomerTaxClassification1 != null && this.CustomerTaxClassification1.Length > 1)
            {
                yield return new ValidationResult("Invalid value for CustomerTaxClassification1, length must be less than 1.", new [] { "CustomerTaxClassification1" });
            }

            // CustomerTaxClassification2 (string) maxLength
            if (this.CustomerTaxClassification2 != null && this.CustomerTaxClassification2.Length > 1)
            {
                yield return new ValidationResult("Invalid value for CustomerTaxClassification2, length must be less than 1.", new [] { "CustomerTaxClassification2" });
            }

            // CustomerTaxClassification3 (string) maxLength
            if (this.CustomerTaxClassification3 != null && this.CustomerTaxClassification3.Length > 1)
            {
                yield return new ValidationResult("Invalid value for CustomerTaxClassification3, length must be less than 1.", new [] { "CustomerTaxClassification3" });
            }

            // CustomerTaxClassification4 (string) maxLength
            if (this.CustomerTaxClassification4 != null && this.CustomerTaxClassification4.Length > 1)
            {
                yield return new ValidationResult("Invalid value for CustomerTaxClassification4, length must be less than 1.", new [] { "CustomerTaxClassification4" });
            }

            // CustomerTaxClassification5 (string) maxLength
            if (this.CustomerTaxClassification5 != null && this.CustomerTaxClassification5.Length > 1)
            {
                yield return new ValidationResult("Invalid value for CustomerTaxClassification5, length must be less than 1.", new [] { "CustomerTaxClassification5" });
            }

            // CustomerTaxClassification6 (string) maxLength
            if (this.CustomerTaxClassification6 != null && this.CustomerTaxClassification6.Length > 1)
            {
                yield return new ValidationResult("Invalid value for CustomerTaxClassification6, length must be less than 1.", new [] { "CustomerTaxClassification6" });
            }

            // CustomerTaxClassification7 (string) maxLength
            if (this.CustomerTaxClassification7 != null && this.CustomerTaxClassification7.Length > 1)
            {
                yield return new ValidationResult("Invalid value for CustomerTaxClassification7, length must be less than 1.", new [] { "CustomerTaxClassification7" });
            }

            // CustomerTaxClassification8 (string) maxLength
            if (this.CustomerTaxClassification8 != null && this.CustomerTaxClassification8.Length > 1)
            {
                yield return new ValidationResult("Invalid value for CustomerTaxClassification8, length must be less than 1.", new [] { "CustomerTaxClassification8" });
            }

            // CustomerTaxClassification9 (string) maxLength
            if (this.CustomerTaxClassification9 != null && this.CustomerTaxClassification9.Length > 1)
            {
                yield return new ValidationResult("Invalid value for CustomerTaxClassification9, length must be less than 1.", new [] { "CustomerTaxClassification9" });
            }

            // TaxDepartureCountry (string) maxLength
            if (this.TaxDepartureCountry != null && this.TaxDepartureCountry.Length > 3)
            {
                yield return new ValidationResult("Invalid value for TaxDepartureCountry, length must be less than 3.", new [] { "TaxDepartureCountry" });
            }

            // VATRegistrationCountry (string) maxLength
            if (this.VATRegistrationCountry != null && this.VATRegistrationCountry.Length > 3)
            {
                yield return new ValidationResult("Invalid value for VATRegistrationCountry, length must be less than 3.", new [] { "VATRegistrationCountry" });
            }

            // ContractAccount (string) maxLength
            if (this.ContractAccount != null && this.ContractAccount.Length > 12)
            {
                yield return new ValidationResult("Invalid value for ContractAccount, length must be less than 12.", new [] { "ContractAccount" });
            }

            // AdditionalValueDays (string) maxLength
            if (this.AdditionalValueDays != null && this.AdditionalValueDays.Length > 2)
            {
                yield return new ValidationResult("Invalid value for AdditionalValueDays, length must be less than 2.", new [] { "AdditionalValueDays" });
            }

            // CustomerPurchaseOrderSuplmnt (string) maxLength
            if (this.CustomerPurchaseOrderSuplmnt != null && this.CustomerPurchaseOrderSuplmnt.Length > 4)
            {
                yield return new ValidationResult("Invalid value for CustomerPurchaseOrderSuplmnt, length must be less than 4.", new [] { "CustomerPurchaseOrderSuplmnt" });
            }

            yield break;
        }
    }

}
