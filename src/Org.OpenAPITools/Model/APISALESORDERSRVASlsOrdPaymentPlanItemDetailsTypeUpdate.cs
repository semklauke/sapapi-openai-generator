/*
 * Sales Order (A2X)
 *
 * In every API call, you can make use of the following operations:   - You can read entire sales orders or only parts of the data, using the provided filters.   - You can create sales orders. You can use deep insert requests, that is, you create a header plus at least one of the following entities: header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, header related object, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object.   If the header already exists, you can create the following sub-entities on their own: header partner, header pricing element, header text, payment plan, header related object, item partner, item pricing element, item text, and item related object.   - For existing sales orders, you can create new items. You can use deep insert requests, that is, you create an item plus at least one of the following entities: item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object. If the item already exists, you can create the following sub-entities on their own: item partner, item pricing element, item text, item related object, and item schedule line.   - For existing sales orders, you can update the following entities (that is, you can change the content of their properties): header, header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item schedule line.   - For existing sales orders, you can delete the following entities: header, header partner, header pricing element, header billing plan item, header text, payment plan, header related object, item, item partner, item pricing element, item billing plan item, item text, item related object, and item schedule line.   - You can accept or deny approval requests for sales orders that cannot be processed without the consent of an approver.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// APISALESORDERSRVASlsOrdPaymentPlanItemDetailsTypeUpdate
    /// </summary>
    [DataContract(Name = "API_SALES_ORDER_SRV.A_SlsOrdPaymentPlanItemDetailsType-update")]
    public partial class APISALESORDERSRVASlsOrdPaymentPlanItemDetailsTypeUpdate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="APISALESORDERSRVASlsOrdPaymentPlanItemDetailsTypeUpdate" /> class.
        /// </summary>
        /// <param name="electronicPaymentType">Electronic Payment: Payment Type.</param>
        /// <param name="electronicPayment">Electronic Payment: Account Number.</param>
        /// <param name="ePaytValidityStartDate">Electronic Payment: Valid from.</param>
        /// <param name="ePaytValidityEndDate">Electronic Payment: Valid to.</param>
        /// <param name="electronicPaymentHolderName">Electronic Payment: Name of Account Holder.</param>
        /// <param name="authorizedAmountInAuthznCrcy">Electronic Payment: Authorized Amount.</param>
        /// <param name="authorizationByDigitalPaytSrvc">Electronic Payment: Authorization Number.</param>
        /// <param name="ePaytByDigitalPaymentSrvc">Token for Digital Payment Integration in SD.</param>
        /// <param name="paymentServiceProvider">Payment Service Provider for Digital Payments.</param>
        /// <param name="paymentByPaymentServicePrvdr">Digital Payments: Payment ID from Payment Service Provider.</param>
        /// <param name="transactionByPaytSrvcPrvdr">SAP Digital Payments: Transaction ID of PSP.</param>
        /// <param name="merchantByClearingHouse">Electronic Payment: Merchant ID at Clearing House.</param>
        /// <param name="paymentCardAuthznRelationID">Unique identifier of a previous successful authorization.</param>
        /// <param name="maximumToBeAuthorizedAmount">Value to be billed/calc. on date in billing/invoice plan.</param>
        public APISALESORDERSRVASlsOrdPaymentPlanItemDetailsTypeUpdate(string electronicPaymentType = default(string), string electronicPayment = default(string), string ePaytValidityStartDate = default(string), string ePaytValidityEndDate = default(string), string electronicPaymentHolderName = default(string), decimal? authorizedAmountInAuthznCrcy = default(decimal?), string authorizationByDigitalPaytSrvc = default(string), string ePaytByDigitalPaymentSrvc = default(string), string paymentServiceProvider = default(string), string paymentByPaymentServicePrvdr = default(string), string transactionByPaytSrvcPrvdr = default(string), string merchantByClearingHouse = default(string), string paymentCardAuthznRelationID = default(string), decimal? maximumToBeAuthorizedAmount = default(decimal?))
        {
            this.ElectronicPaymentType = electronicPaymentType;
            this.ElectronicPayment = electronicPayment;
            this.EPaytValidityStartDate = ePaytValidityStartDate;
            this.EPaytValidityEndDate = ePaytValidityEndDate;
            this.ElectronicPaymentHolderName = electronicPaymentHolderName;
            this.AuthorizedAmountInAuthznCrcy = authorizedAmountInAuthznCrcy;
            this.AuthorizationByDigitalPaytSrvc = authorizationByDigitalPaytSrvc;
            this.EPaytByDigitalPaymentSrvc = ePaytByDigitalPaymentSrvc;
            this.PaymentServiceProvider = paymentServiceProvider;
            this.PaymentByPaymentServicePrvdr = paymentByPaymentServicePrvdr;
            this.TransactionByPaytSrvcPrvdr = transactionByPaytSrvcPrvdr;
            this.MerchantByClearingHouse = merchantByClearingHouse;
            this.PaymentCardAuthznRelationID = paymentCardAuthznRelationID;
            this.MaximumToBeAuthorizedAmount = maximumToBeAuthorizedAmount;
        }

        /// <summary>
        /// Electronic Payment: Payment Type
        /// </summary>
        /// <value>Electronic Payment: Payment Type</value>
        [DataMember(Name = "ElectronicPaymentType", EmitDefaultValue = true)]
        public string ElectronicPaymentType { get; set; }

        /// <summary>
        /// Electronic Payment: Account Number
        /// </summary>
        /// <value>Electronic Payment: Account Number</value>
        [DataMember(Name = "ElectronicPayment", EmitDefaultValue = true)]
        public string ElectronicPayment { get; set; }

        /// <summary>
        /// Electronic Payment: Valid from
        /// </summary>
        /// <value>Electronic Payment: Valid from</value>
        /*
        <example>/Date(1492041600000)/</example>
        */
        [DataMember(Name = "EPaytValidityStartDate", EmitDefaultValue = true)]
        public string EPaytValidityStartDate { get; set; }

        /// <summary>
        /// Electronic Payment: Valid to
        /// </summary>
        /// <value>Electronic Payment: Valid to</value>
        /*
        <example>/Date(1492041600000)/</example>
        */
        [DataMember(Name = "EPaytValidityEndDate", EmitDefaultValue = true)]
        public string EPaytValidityEndDate { get; set; }

        /// <summary>
        /// Electronic Payment: Name of Account Holder
        /// </summary>
        /// <value>Electronic Payment: Name of Account Holder</value>
        [DataMember(Name = "ElectronicPaymentHolderName", EmitDefaultValue = true)]
        public string ElectronicPaymentHolderName { get; set; }

        /// <summary>
        /// Electronic Payment: Authorized Amount
        /// </summary>
        /// <value>Electronic Payment: Authorized Amount</value>
        /*
        <example>0</example>
        */
        [DataMember(Name = "AuthorizedAmountInAuthznCrcy", EmitDefaultValue = true)]
        public decimal? AuthorizedAmountInAuthznCrcy { get; set; }

        /// <summary>
        /// Electronic Payment: Authorization Number
        /// </summary>
        /// <value>Electronic Payment: Authorization Number</value>
        [DataMember(Name = "AuthorizationByDigitalPaytSrvc", EmitDefaultValue = true)]
        public string AuthorizationByDigitalPaytSrvc { get; set; }

        /// <summary>
        /// Token for Digital Payment Integration in SD
        /// </summary>
        /// <value>Token for Digital Payment Integration in SD</value>
        [DataMember(Name = "EPaytByDigitalPaymentSrvc", EmitDefaultValue = true)]
        public string EPaytByDigitalPaymentSrvc { get; set; }

        /// <summary>
        /// Payment Service Provider for Digital Payments
        /// </summary>
        /// <value>Payment Service Provider for Digital Payments</value>
        [DataMember(Name = "PaymentServiceProvider", EmitDefaultValue = true)]
        public string PaymentServiceProvider { get; set; }

        /// <summary>
        /// Digital Payments: Payment ID from Payment Service Provider
        /// </summary>
        /// <value>Digital Payments: Payment ID from Payment Service Provider</value>
        [DataMember(Name = "PaymentByPaymentServicePrvdr", EmitDefaultValue = true)]
        public string PaymentByPaymentServicePrvdr { get; set; }

        /// <summary>
        /// SAP Digital Payments: Transaction ID of PSP
        /// </summary>
        /// <value>SAP Digital Payments: Transaction ID of PSP</value>
        [DataMember(Name = "TransactionByPaytSrvcPrvdr", EmitDefaultValue = true)]
        public string TransactionByPaytSrvcPrvdr { get; set; }

        /// <summary>
        /// Electronic Payment: Merchant ID at Clearing House
        /// </summary>
        /// <value>Electronic Payment: Merchant ID at Clearing House</value>
        [DataMember(Name = "MerchantByClearingHouse", EmitDefaultValue = true)]
        public string MerchantByClearingHouse { get; set; }

        /// <summary>
        /// Unique identifier of a previous successful authorization
        /// </summary>
        /// <value>Unique identifier of a previous successful authorization</value>
        [DataMember(Name = "PaymentCardAuthznRelationID", EmitDefaultValue = true)]
        public string PaymentCardAuthznRelationID { get; set; }

        /// <summary>
        /// Value to be billed/calc. on date in billing/invoice plan
        /// </summary>
        /// <value>Value to be billed/calc. on date in billing/invoice plan</value>
        /*
        <example>0</example>
        */
        [DataMember(Name = "MaximumToBeAuthorizedAmount", EmitDefaultValue = true)]
        public decimal? MaximumToBeAuthorizedAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class APISALESORDERSRVASlsOrdPaymentPlanItemDetailsTypeUpdate {\n");
            sb.Append("  ElectronicPaymentType: ").Append(ElectronicPaymentType).Append("\n");
            sb.Append("  ElectronicPayment: ").Append(ElectronicPayment).Append("\n");
            sb.Append("  EPaytValidityStartDate: ").Append(EPaytValidityStartDate).Append("\n");
            sb.Append("  EPaytValidityEndDate: ").Append(EPaytValidityEndDate).Append("\n");
            sb.Append("  ElectronicPaymentHolderName: ").Append(ElectronicPaymentHolderName).Append("\n");
            sb.Append("  AuthorizedAmountInAuthznCrcy: ").Append(AuthorizedAmountInAuthznCrcy).Append("\n");
            sb.Append("  AuthorizationByDigitalPaytSrvc: ").Append(AuthorizationByDigitalPaytSrvc).Append("\n");
            sb.Append("  EPaytByDigitalPaymentSrvc: ").Append(EPaytByDigitalPaymentSrvc).Append("\n");
            sb.Append("  PaymentServiceProvider: ").Append(PaymentServiceProvider).Append("\n");
            sb.Append("  PaymentByPaymentServicePrvdr: ").Append(PaymentByPaymentServicePrvdr).Append("\n");
            sb.Append("  TransactionByPaytSrvcPrvdr: ").Append(TransactionByPaytSrvcPrvdr).Append("\n");
            sb.Append("  MerchantByClearingHouse: ").Append(MerchantByClearingHouse).Append("\n");
            sb.Append("  PaymentCardAuthznRelationID: ").Append(PaymentCardAuthznRelationID).Append("\n");
            sb.Append("  MaximumToBeAuthorizedAmount: ").Append(MaximumToBeAuthorizedAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ElectronicPaymentType (string) maxLength
            if (this.ElectronicPaymentType != null && this.ElectronicPaymentType.Length > 4)
            {
                yield return new ValidationResult("Invalid value for ElectronicPaymentType, length must be less than 4.", new [] { "ElectronicPaymentType" });
            }

            // ElectronicPayment (string) maxLength
            if (this.ElectronicPayment != null && this.ElectronicPayment.Length > 25)
            {
                yield return new ValidationResult("Invalid value for ElectronicPayment, length must be less than 25.", new [] { "ElectronicPayment" });
            }

            // ElectronicPaymentHolderName (string) maxLength
            if (this.ElectronicPaymentHolderName != null && this.ElectronicPaymentHolderName.Length > 40)
            {
                yield return new ValidationResult("Invalid value for ElectronicPaymentHolderName, length must be less than 40.", new [] { "ElectronicPaymentHolderName" });
            }

            // AuthorizationByDigitalPaytSrvc (string) maxLength
            if (this.AuthorizationByDigitalPaytSrvc != null && this.AuthorizationByDigitalPaytSrvc.Length > 10)
            {
                yield return new ValidationResult("Invalid value for AuthorizationByDigitalPaytSrvc, length must be less than 10.", new [] { "AuthorizationByDigitalPaytSrvc" });
            }

            // EPaytByDigitalPaymentSrvc (string) maxLength
            if (this.EPaytByDigitalPaymentSrvc != null && this.EPaytByDigitalPaymentSrvc.Length > 25)
            {
                yield return new ValidationResult("Invalid value for EPaytByDigitalPaymentSrvc, length must be less than 25.", new [] { "EPaytByDigitalPaymentSrvc" });
            }

            // PaymentServiceProvider (string) maxLength
            if (this.PaymentServiceProvider != null && this.PaymentServiceProvider.Length > 4)
            {
                yield return new ValidationResult("Invalid value for PaymentServiceProvider, length must be less than 4.", new [] { "PaymentServiceProvider" });
            }

            // PaymentByPaymentServicePrvdr (string) maxLength
            if (this.PaymentByPaymentServicePrvdr != null && this.PaymentByPaymentServicePrvdr.Length > 40)
            {
                yield return new ValidationResult("Invalid value for PaymentByPaymentServicePrvdr, length must be less than 40.", new [] { "PaymentByPaymentServicePrvdr" });
            }

            // TransactionByPaytSrvcPrvdr (string) maxLength
            if (this.TransactionByPaytSrvcPrvdr != null && this.TransactionByPaytSrvcPrvdr.Length > 40)
            {
                yield return new ValidationResult("Invalid value for TransactionByPaytSrvcPrvdr, length must be less than 40.", new [] { "TransactionByPaytSrvcPrvdr" });
            }

            // MerchantByClearingHouse (string) maxLength
            if (this.MerchantByClearingHouse != null && this.MerchantByClearingHouse.Length > 15)
            {
                yield return new ValidationResult("Invalid value for MerchantByClearingHouse, length must be less than 15.", new [] { "MerchantByClearingHouse" });
            }

            // PaymentCardAuthznRelationID (string) maxLength
            if (this.PaymentCardAuthznRelationID != null && this.PaymentCardAuthznRelationID.Length > 44)
            {
                yield return new ValidationResult("Invalid value for PaymentCardAuthznRelationID, length must be less than 44.", new [] { "PaymentCardAuthznRelationID" });
            }

            yield break;
        }
    }

}
