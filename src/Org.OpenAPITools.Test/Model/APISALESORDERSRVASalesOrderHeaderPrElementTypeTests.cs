/*
 * Sales Order (A2X)
 *
 * In every API call, you can make use of the following operations:   - You can read entire sales orders or only parts of the data, using the provided filters.   - You can create sales orders. You can use deep insert requests, that is, you create a header plus at least one of the following entities: header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, header related object, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object.   If the header already exists, you can create the following sub-entities on their own: header partner, header pricing element, header text, payment plan, header related object, item partner, item pricing element, item text, and item related object.   - For existing sales orders, you can create new items. You can use deep insert requests, that is, you create an item plus at least one of the following entities: item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object. If the item already exists, you can create the following sub-entities on their own: item partner, item pricing element, item text, item related object, and item schedule line.   - For existing sales orders, you can update the following entities (that is, you can change the content of their properties): header, header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item schedule line.   - For existing sales orders, you can delete the following entities: header, header partner, header pricing element, header billing plan item, header text, payment plan, header related object, item, item partner, item pricing element, item billing plan item, item text, item related object, and item schedule line.   - You can accept or deny approval requests for sales orders that cannot be processed without the consent of an approver.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Org.OpenAPITools.Model;
using Org.OpenAPITools.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Test.Model
{
    /// <summary>
    ///  Class for testing APISALESORDERSRVASalesOrderHeaderPrElementType
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class APISALESORDERSRVASalesOrderHeaderPrElementTypeTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for APISALESORDERSRVASalesOrderHeaderPrElementType
        //private APISALESORDERSRVASalesOrderHeaderPrElementType instance;

        public APISALESORDERSRVASalesOrderHeaderPrElementTypeTests()
        {
            // TODO uncomment below to create an instance of APISALESORDERSRVASalesOrderHeaderPrElementType
            //instance = new APISALESORDERSRVASalesOrderHeaderPrElementType();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of APISALESORDERSRVASalesOrderHeaderPrElementType
        /// </summary>
        [Fact]
        public void APISALESORDERSRVASalesOrderHeaderPrElementTypeInstanceTest()
        {
            // TODO uncomment below to test "IsType" APISALESORDERSRVASalesOrderHeaderPrElementType
            //Assert.IsType<APISALESORDERSRVASalesOrderHeaderPrElementType>(instance);
        }

        /// <summary>
        /// Test the property 'SalesOrder'
        /// </summary>
        [Fact]
        public void SalesOrderTest()
        {
            // TODO unit test for the property 'SalesOrder'
        }

        /// <summary>
        /// Test the property 'PricingProcedureStep'
        /// </summary>
        [Fact]
        public void PricingProcedureStepTest()
        {
            // TODO unit test for the property 'PricingProcedureStep'
        }

        /// <summary>
        /// Test the property 'PricingProcedureCounter'
        /// </summary>
        [Fact]
        public void PricingProcedureCounterTest()
        {
            // TODO unit test for the property 'PricingProcedureCounter'
        }

        /// <summary>
        /// Test the property 'ConditionType'
        /// </summary>
        [Fact]
        public void ConditionTypeTest()
        {
            // TODO unit test for the property 'ConditionType'
        }

        /// <summary>
        /// Test the property 'PricingDateTime'
        /// </summary>
        [Fact]
        public void PricingDateTimeTest()
        {
            // TODO unit test for the property 'PricingDateTime'
        }

        /// <summary>
        /// Test the property 'PriceConditionDeterminationDte'
        /// </summary>
        [Fact]
        public void PriceConditionDeterminationDteTest()
        {
            // TODO unit test for the property 'PriceConditionDeterminationDte'
        }

        /// <summary>
        /// Test the property 'ConditionCalculationType'
        /// </summary>
        [Fact]
        public void ConditionCalculationTypeTest()
        {
            // TODO unit test for the property 'ConditionCalculationType'
        }

        /// <summary>
        /// Test the property 'ConditionBaseValue'
        /// </summary>
        [Fact]
        public void ConditionBaseValueTest()
        {
            // TODO unit test for the property 'ConditionBaseValue'
        }

        /// <summary>
        /// Test the property 'ConditionRateValue'
        /// </summary>
        [Fact]
        public void ConditionRateValueTest()
        {
            // TODO unit test for the property 'ConditionRateValue'
        }

        /// <summary>
        /// Test the property 'ConditionCurrency'
        /// </summary>
        [Fact]
        public void ConditionCurrencyTest()
        {
            // TODO unit test for the property 'ConditionCurrency'
        }

        /// <summary>
        /// Test the property 'ConditionQuantity'
        /// </summary>
        [Fact]
        public void ConditionQuantityTest()
        {
            // TODO unit test for the property 'ConditionQuantity'
        }

        /// <summary>
        /// Test the property 'ConditionQuantityUnit'
        /// </summary>
        [Fact]
        public void ConditionQuantityUnitTest()
        {
            // TODO unit test for the property 'ConditionQuantityUnit'
        }

        /// <summary>
        /// Test the property 'ConditionQuantitySAPUnit'
        /// </summary>
        [Fact]
        public void ConditionQuantitySAPUnitTest()
        {
            // TODO unit test for the property 'ConditionQuantitySAPUnit'
        }

        /// <summary>
        /// Test the property 'ConditionQuantityISOUnit'
        /// </summary>
        [Fact]
        public void ConditionQuantityISOUnitTest()
        {
            // TODO unit test for the property 'ConditionQuantityISOUnit'
        }

        /// <summary>
        /// Test the property 'ConditionCategory'
        /// </summary>
        [Fact]
        public void ConditionCategoryTest()
        {
            // TODO unit test for the property 'ConditionCategory'
        }

        /// <summary>
        /// Test the property 'ConditionIsForStatistics'
        /// </summary>
        [Fact]
        public void ConditionIsForStatisticsTest()
        {
            // TODO unit test for the property 'ConditionIsForStatistics'
        }

        /// <summary>
        /// Test the property 'PricingScaleType'
        /// </summary>
        [Fact]
        public void PricingScaleTypeTest()
        {
            // TODO unit test for the property 'PricingScaleType'
        }

        /// <summary>
        /// Test the property 'ConditionOrigin'
        /// </summary>
        [Fact]
        public void ConditionOriginTest()
        {
            // TODO unit test for the property 'ConditionOrigin'
        }

        /// <summary>
        /// Test the property 'IsGroupCondition'
        /// </summary>
        [Fact]
        public void IsGroupConditionTest()
        {
            // TODO unit test for the property 'IsGroupCondition'
        }

        /// <summary>
        /// Test the property 'ConditionRecord'
        /// </summary>
        [Fact]
        public void ConditionRecordTest()
        {
            // TODO unit test for the property 'ConditionRecord'
        }

        /// <summary>
        /// Test the property 'ConditionSequentialNumber'
        /// </summary>
        [Fact]
        public void ConditionSequentialNumberTest()
        {
            // TODO unit test for the property 'ConditionSequentialNumber'
        }

        /// <summary>
        /// Test the property 'TaxCode'
        /// </summary>
        [Fact]
        public void TaxCodeTest()
        {
            // TODO unit test for the property 'TaxCode'
        }

        /// <summary>
        /// Test the property 'WithholdingTaxCode'
        /// </summary>
        [Fact]
        public void WithholdingTaxCodeTest()
        {
            // TODO unit test for the property 'WithholdingTaxCode'
        }

        /// <summary>
        /// Test the property 'CndnRoundingOffDiffAmount'
        /// </summary>
        [Fact]
        public void CndnRoundingOffDiffAmountTest()
        {
            // TODO unit test for the property 'CndnRoundingOffDiffAmount'
        }

        /// <summary>
        /// Test the property 'ConditionAmount'
        /// </summary>
        [Fact]
        public void ConditionAmountTest()
        {
            // TODO unit test for the property 'ConditionAmount'
        }

        /// <summary>
        /// Test the property 'TransactionCurrency'
        /// </summary>
        [Fact]
        public void TransactionCurrencyTest()
        {
            // TODO unit test for the property 'TransactionCurrency'
        }

        /// <summary>
        /// Test the property 'ConditionControl'
        /// </summary>
        [Fact]
        public void ConditionControlTest()
        {
            // TODO unit test for the property 'ConditionControl'
        }

        /// <summary>
        /// Test the property 'ConditionInactiveReason'
        /// </summary>
        [Fact]
        public void ConditionInactiveReasonTest()
        {
            // TODO unit test for the property 'ConditionInactiveReason'
        }

        /// <summary>
        /// Test the property 'ConditionClass'
        /// </summary>
        [Fact]
        public void ConditionClassTest()
        {
            // TODO unit test for the property 'ConditionClass'
        }

        /// <summary>
        /// Test the property 'PrcgProcedureCounterForHeader'
        /// </summary>
        [Fact]
        public void PrcgProcedureCounterForHeaderTest()
        {
            // TODO unit test for the property 'PrcgProcedureCounterForHeader'
        }

        /// <summary>
        /// Test the property 'FactorForConditionBasisValue'
        /// </summary>
        [Fact]
        public void FactorForConditionBasisValueTest()
        {
            // TODO unit test for the property 'FactorForConditionBasisValue'
        }

        /// <summary>
        /// Test the property 'StructureCondition'
        /// </summary>
        [Fact]
        public void StructureConditionTest()
        {
            // TODO unit test for the property 'StructureCondition'
        }

        /// <summary>
        /// Test the property 'PeriodFactorForCndnBasisValue'
        /// </summary>
        [Fact]
        public void PeriodFactorForCndnBasisValueTest()
        {
            // TODO unit test for the property 'PeriodFactorForCndnBasisValue'
        }

        /// <summary>
        /// Test the property 'PricingScaleBasis'
        /// </summary>
        [Fact]
        public void PricingScaleBasisTest()
        {
            // TODO unit test for the property 'PricingScaleBasis'
        }

        /// <summary>
        /// Test the property 'ConditionScaleBasisValue'
        /// </summary>
        [Fact]
        public void ConditionScaleBasisValueTest()
        {
            // TODO unit test for the property 'ConditionScaleBasisValue'
        }

        /// <summary>
        /// Test the property 'ConditionScaleBasisUnit'
        /// </summary>
        [Fact]
        public void ConditionScaleBasisUnitTest()
        {
            // TODO unit test for the property 'ConditionScaleBasisUnit'
        }

        /// <summary>
        /// Test the property 'ConditionScaleBasisCurrency'
        /// </summary>
        [Fact]
        public void ConditionScaleBasisCurrencyTest()
        {
            // TODO unit test for the property 'ConditionScaleBasisCurrency'
        }

        /// <summary>
        /// Test the property 'CndnIsRelevantForIntcoBilling'
        /// </summary>
        [Fact]
        public void CndnIsRelevantForIntcoBillingTest()
        {
            // TODO unit test for the property 'CndnIsRelevantForIntcoBilling'
        }

        /// <summary>
        /// Test the property 'ConditionIsManuallyChanged'
        /// </summary>
        [Fact]
        public void ConditionIsManuallyChangedTest()
        {
            // TODO unit test for the property 'ConditionIsManuallyChanged'
        }

        /// <summary>
        /// Test the property 'ConditionIsForConfiguration'
        /// </summary>
        [Fact]
        public void ConditionIsForConfigurationTest()
        {
            // TODO unit test for the property 'ConditionIsForConfiguration'
        }

        /// <summary>
        /// Test the property 'VariantCondition'
        /// </summary>
        [Fact]
        public void VariantConditionTest()
        {
            // TODO unit test for the property 'VariantCondition'
        }

        /// <summary>
        /// Test the property 'ToSalesOrder'
        /// </summary>
        [Fact]
        public void ToSalesOrderTest()
        {
            // TODO unit test for the property 'ToSalesOrder'
        }
    }
}
