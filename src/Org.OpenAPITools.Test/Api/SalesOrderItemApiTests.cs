/*
 * Sales Order (A2X)
 *
 * In every API call, you can make use of the following operations:   - You can read entire sales orders or only parts of the data, using the provided filters.   - You can create sales orders. You can use deep insert requests, that is, you create a header plus at least one of the following entities: header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, header related object, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object.   If the header already exists, you can create the following sub-entities on their own: header partner, header pricing element, header text, payment plan, header related object, item partner, item pricing element, item text, and item related object.   - For existing sales orders, you can create new items. You can use deep insert requests, that is, you create an item plus at least one of the following entities: item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object. If the item already exists, you can create the following sub-entities on their own: item partner, item pricing element, item text, item related object, and item schedule line.   - For existing sales orders, you can update the following entities (that is, you can change the content of their properties): header, header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item schedule line.   - For existing sales orders, you can delete the following entities: header, header partner, header pricing element, header billing plan item, header text, payment plan, header related object, item, item partner, item pricing element, item billing plan item, item text, item related object, and item schedule line.   - You can accept or deny approval requests for sales orders that cannot be processed without the consent of an approver.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing SalesOrderItemApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SalesOrderItemApiTests : IDisposable
    {
        private SalesOrderItemApi instance;

        public SalesOrderItemApiTests()
        {
            instance = new SalesOrderItemApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SalesOrderItemApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SalesOrderItemApi
            //Assert.IsType<SalesOrderItemApi>(instance);
        }

        /// <summary>
        /// Test ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGet
        /// </summary>
        [Fact]
        public void ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //string billingPlan = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGet(salesOrder, salesOrderItem, billingPlan, select, expand);
            //Assert.IsType<ASalesOrderItemType>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemGet
        /// </summary>
        [Fact]
        public void ASalesOrderItemGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? top = null;
            //int? skip = null;
            //string? filter = null;
            //string? inlinecount = null;
            //List<string>? orderby = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItemGet(top, skip, filter, inlinecount, orderby, select, expand);
            //Assert.IsType<Wrapper1>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet
        /// </summary>
        [Fact]
        public void ASalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //string partnerFunction = null;
            //string addressRepresentationCode = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet(salesOrder, salesOrderItem, partnerFunction, addressRepresentationCode, select, expand);
            //Assert.IsType<ASalesOrderItemType>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGet
        /// </summary>
        [Fact]
        public void ASalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //string partnerFunction = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGet(salesOrder, salesOrderItem, partnerFunction, select, expand);
            //Assert.IsType<ASalesOrderItemType>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemPost
        /// </summary>
        [Fact]
        public void ASalesOrderItemPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //APISALESORDERSRVASalesOrderItemTypeCreate aPISALESORDERSRVASalesOrderItemTypeCreate = null;
            //var response = instance.ASalesOrderItemPost(aPISALESORDERSRVASalesOrderItemTypeCreate);
            //Assert.IsType<ASalesOrderItemType>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet
        /// </summary>
        [Fact]
        public void ASalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //string pricingProcedureStep = null;
            //string pricingProcedureCounter = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet(salesOrder, salesOrderItem, pricingProcedureStep, pricingProcedureCounter, select, expand);
            //Assert.IsType<ASalesOrderItemType>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGet
        /// </summary>
        [Fact]
        public void ASalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //string sDDocRelatedObjectSequenceNmbr = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGet(salesOrder, salesOrderItem, sDDocRelatedObjectSequenceNmbr, select, expand);
            //Assert.IsType<ASalesOrderItemType>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDelete
        /// </summary>
        [Fact]
        public void ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //instance.ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDelete(salesOrder, salesOrderItem);
        }

        /// <summary>
        /// Test ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGet
        /// </summary>
        [Fact]
        public void ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGet(salesOrder, salesOrderItem, select, expand);
            //Assert.IsType<ASalesOrderItemType>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatch
        /// </summary>
        [Fact]
        public void ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //ModifiedASalesOrderItemType modifiedASalesOrderItemType = null;
            //instance.ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatch(salesOrder, salesOrderItem, modifiedASalesOrderItemType);
        }

        /// <summary>
        /// Test ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGet
        /// </summary>
        [Fact]
        public void ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGet(salesOrder, salesOrderItem, select, expand);
            //Assert.IsType<ASalesOrderItemBillingPlanType>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGet
        /// </summary>
        [Fact]
        public void ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //int? top = null;
            //int? skip = null;
            //string? filter = null;
            //string? inlinecount = null;
            //List<string>? orderby = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGet(salesOrder, salesOrderItem, top, skip, filter, inlinecount, orderby, select, expand);
            //Assert.IsType<Wrapper12>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPost
        /// </summary>
        [Fact]
        public void ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //APISALESORDERSRVASalesOrderItemPartnerTypeCreate aPISALESORDERSRVASalesOrderItemPartnerTypeCreate = null;
            //var response = instance.ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPost(salesOrder, salesOrderItem, aPISALESORDERSRVASalesOrderItemPartnerTypeCreate);
            //Assert.IsType<ASalesOrderItemPartnerType>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGet
        /// </summary>
        [Fact]
        public void ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //int? top = null;
            //int? skip = null;
            //string? filter = null;
            //string? inlinecount = null;
            //List<string>? orderby = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGet(salesOrder, salesOrderItem, top, skip, filter, inlinecount, orderby, select, expand);
            //Assert.IsType<Wrapper13>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGet
        /// </summary>
        [Fact]
        public void ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //int? top = null;
            //int? skip = null;
            //string? filter = null;
            //string? inlinecount = null;
            //List<string>? orderby = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGet(salesOrder, salesOrderItem, top, skip, filter, inlinecount, orderby, select, expand);
            //Assert.IsType<Wrapper14>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPost
        /// </summary>
        [Fact]
        public void ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //APISALESORDERSRVASalesOrderItemPrElementTypeCreate aPISALESORDERSRVASalesOrderItemPrElementTypeCreate = null;
            //var response = instance.ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPost(salesOrder, salesOrderItem, aPISALESORDERSRVASalesOrderItemPrElementTypeCreate);
            //Assert.IsType<ASalesOrderItemPrElementType>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGet
        /// </summary>
        [Fact]
        public void ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //int? top = null;
            //int? skip = null;
            //string? filter = null;
            //string? inlinecount = null;
            //List<string>? orderby = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGet(salesOrder, salesOrderItem, top, skip, filter, inlinecount, orderby, select, expand);
            //Assert.IsType<Wrapper15>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPost
        /// </summary>
        [Fact]
        public void ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //APISALESORDERSRVASalesOrderItemRelatedObjectTypeCreate aPISALESORDERSRVASalesOrderItemRelatedObjectTypeCreate = null;
            //var response = instance.ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPost(salesOrder, salesOrderItem, aPISALESORDERSRVASalesOrderItemRelatedObjectTypeCreate);
            //Assert.IsType<ASalesOrderItemRelatedObjectType>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet
        /// </summary>
        [Fact]
        public void ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet(salesOrder, salesOrderItem, select, expand);
            //Assert.IsType<ASalesOrderType>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet
        /// </summary>
        [Fact]
        public void ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //int? top = null;
            //int? skip = null;
            //string? filter = null;
            //string? inlinecount = null;
            //List<string>? orderby = null;
            //List<string>? select = null;
            //var response = instance.ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet(salesOrder, salesOrderItem, top, skip, filter, inlinecount, orderby, select);
            //Assert.IsType<Wrapper16>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost
        /// </summary>
        [Fact]
        public void ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //APISALESORDERSRVASalesOrderScheduleLineTypeCreate aPISALESORDERSRVASalesOrderScheduleLineTypeCreate = null;
            //var response = instance.ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost(salesOrder, salesOrderItem, aPISALESORDERSRVASalesOrderScheduleLineTypeCreate);
            //Assert.IsType<ASalesOrderScheduleLineType>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGet
        /// </summary>
        [Fact]
        public void ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //int? top = null;
            //int? skip = null;
            //string? filter = null;
            //string? inlinecount = null;
            //List<string>? orderby = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGet(salesOrder, salesOrderItem, top, skip, filter, inlinecount, orderby, select, expand);
            //Assert.IsType<Wrapper17>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGet
        /// </summary>
        [Fact]
        public void ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //int? top = null;
            //int? skip = null;
            //string? filter = null;
            //string? inlinecount = null;
            //List<string>? orderby = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGet(salesOrder, salesOrderItem, top, skip, filter, inlinecount, orderby, select, expand);
            //Assert.IsType<Wrapper18>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPost
        /// </summary>
        [Fact]
        public void ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //APISALESORDERSRVASalesOrderItemTextTypeCreate aPISALESORDERSRVASalesOrderItemTextTypeCreate = null;
            //var response = instance.ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPost(salesOrder, salesOrderItem, aPISALESORDERSRVASalesOrderItemTextTypeCreate);
            //Assert.IsType<ASalesOrderItemTextType>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet
        /// </summary>
        [Fact]
        public void ASalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //string language = null;
            //string longTextID = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet(salesOrder, salesOrderItem, language, longTextID, select, expand);
            //Assert.IsType<ASalesOrderItemType>(response);
        }

        /// <summary>
        /// Test ASalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet
        /// </summary>
        [Fact]
        public void ASalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //Guid docRelationshipUUID = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet(salesOrder, salesOrderItem, docRelationshipUUID, select, expand);
            //Assert.IsType<ASalesOrderItemType>(response);
        }

        /// <summary>
        /// Test ASalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet
        /// </summary>
        [Fact]
        public void ASalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //Guid docRelationshipUUID = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet(salesOrder, salesOrderItem, docRelationshipUUID, select, expand);
            //Assert.IsType<ASalesOrderItemType>(response);
        }

        /// <summary>
        /// Test ASalesOrderSalesOrderToItemGet
        /// </summary>
        [Fact]
        public void ASalesOrderSalesOrderToItemGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //int? top = null;
            //int? skip = null;
            //string? filter = null;
            //string? inlinecount = null;
            //List<string>? orderby = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderSalesOrderToItemGet(salesOrder, top, skip, filter, inlinecount, orderby, select, expand);
            //Assert.IsType<Wrapper1>(response);
        }

        /// <summary>
        /// Test ASalesOrderSalesOrderToItemPost
        /// </summary>
        [Fact]
        public void ASalesOrderSalesOrderToItemPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //APISALESORDERSRVASalesOrderItemTypeCreate aPISALESORDERSRVASalesOrderItemTypeCreate = null;
            //var response = instance.ASalesOrderSalesOrderToItemPost(salesOrder, aPISALESORDERSRVASalesOrderItemTypeCreate);
            //Assert.IsType<ASalesOrderItemType>(response);
        }

        /// <summary>
        /// Test ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet
        /// </summary>
        [Fact]
        public void ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //string billingPlan = null;
            //string billingPlanItem = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet(salesOrder, salesOrderItem, billingPlan, billingPlanItem, select, expand);
            //Assert.IsType<ASalesOrderItemType>(response);
        }
    }
}
