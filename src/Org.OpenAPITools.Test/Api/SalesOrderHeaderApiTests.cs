/*
 * Sales Order (A2X)
 *
 * In every API call, you can make use of the following operations:   - You can read entire sales orders or only parts of the data, using the provided filters.   - You can create sales orders. You can use deep insert requests, that is, you create a header plus at least one of the following entities: header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, header related object, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object.   If the header already exists, you can create the following sub-entities on their own: header partner, header pricing element, header text, payment plan, header related object, item partner, item pricing element, item text, and item related object.   - For existing sales orders, you can create new items. You can use deep insert requests, that is, you create an item plus at least one of the following entities: item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object. If the item already exists, you can create the following sub-entities on their own: item partner, item pricing element, item text, item related object, and item schedule line.   - For existing sales orders, you can update the following entities (that is, you can change the content of their properties): header, header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item schedule line.   - For existing sales orders, you can delete the following entities: header, header partner, header pricing element, header billing plan item, header text, payment plan, header related object, item, item partner, item pricing element, item billing plan item, item text, item related object, and item schedule line.   - You can accept or deny approval requests for sales orders that cannot be processed without the consent of an approver.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing SalesOrderHeaderApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SalesOrderHeaderApiTests : IDisposable
    {
        private SalesOrderHeaderApi instance;

        public SalesOrderHeaderApiTests()
        {
            instance = new SalesOrderHeaderApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SalesOrderHeaderApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SalesOrderHeaderApi
            //Assert.IsType<SalesOrderHeaderApi>(instance);
        }

        /// <summary>
        /// Test ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet
        /// </summary>
        [Fact]
        public void ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string billingPlan = null;
            //string billingPlanItem = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet(salesOrder, billingPlan, billingPlanItem, select, expand);
            //Assert.IsType<ASalesOrderType>(response);
        }

        /// <summary>
        /// Test ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToSalesOrderGet
        /// </summary>
        [Fact]
        public void ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToSalesOrderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string billingPlan = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToSalesOrderGet(salesOrder, billingPlan, select, expand);
            //Assert.IsType<ASalesOrderType>(response);
        }

        /// <summary>
        /// Test ASalesOrderGet
        /// </summary>
        [Fact]
        public void ASalesOrderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? top = null;
            //int? skip = null;
            //string? filter = null;
            //string? inlinecount = null;
            //List<string>? orderby = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderGet(top, skip, filter, inlinecount, orderby, select, expand);
            //Assert.IsType<Wrapper>(response);
        }

        /// <summary>
        /// Test ASalesOrderHeaderPartnerSalesOrderSalesOrderPartnerFunctionPartnerFunctionToSalesOrderGet
        /// </summary>
        [Fact]
        public void ASalesOrderHeaderPartnerSalesOrderSalesOrderPartnerFunctionPartnerFunctionToSalesOrderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string partnerFunction = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderHeaderPartnerSalesOrderSalesOrderPartnerFunctionPartnerFunctionToSalesOrderGet(salesOrder, partnerFunction, select, expand);
            //Assert.IsType<ASalesOrderType>(response);
        }

        /// <summary>
        /// Test ASalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet
        /// </summary>
        [Fact]
        public void ASalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string pricingProcedureStep = null;
            //string pricingProcedureCounter = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet(salesOrder, pricingProcedureStep, pricingProcedureCounter, select, expand);
            //Assert.IsType<ASalesOrderType>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderGet
        /// </summary>
        [Fact]
        public void ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //string billingPlan = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderGet(salesOrder, salesOrderItem, billingPlan, select, expand);
            //Assert.IsType<ASalesOrderType>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderGet
        /// </summary>
        [Fact]
        public void ASalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //string partnerFunction = null;
            //string addressRepresentationCode = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderGet(salesOrder, salesOrderItem, partnerFunction, addressRepresentationCode, select, expand);
            //Assert.IsType<ASalesOrderType>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderGet
        /// </summary>
        [Fact]
        public void ASalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //string partnerFunction = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderGet(salesOrder, salesOrderItem, partnerFunction, select, expand);
            //Assert.IsType<ASalesOrderType>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet
        /// </summary>
        [Fact]
        public void ASalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //string pricingProcedureStep = null;
            //string pricingProcedureCounter = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet(salesOrder, salesOrderItem, pricingProcedureStep, pricingProcedureCounter, select, expand);
            //Assert.IsType<ASalesOrderType>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderGet
        /// </summary>
        [Fact]
        public void ASalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //string sDDocRelatedObjectSequenceNmbr = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderGet(salesOrder, salesOrderItem, sDDocRelatedObjectSequenceNmbr, select, expand);
            //Assert.IsType<ASalesOrderType>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet
        /// </summary>
        [Fact]
        public void ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet(salesOrder, salesOrderItem, select, expand);
            //Assert.IsType<ASalesOrderType>(response);
        }

        /// <summary>
        /// Test ASalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderGet
        /// </summary>
        [Fact]
        public void ASalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //string language = null;
            //string longTextID = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderGet(salesOrder, salesOrderItem, language, longTextID, select, expand);
            //Assert.IsType<ASalesOrderType>(response);
        }

        /// <summary>
        /// Test ASalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderGet
        /// </summary>
        [Fact]
        public void ASalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //Guid docRelationshipUUID = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderGet(salesOrder, salesOrderItem, docRelationshipUUID, select, expand);
            //Assert.IsType<ASalesOrderType>(response);
        }

        /// <summary>
        /// Test ASalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderGet
        /// </summary>
        [Fact]
        public void ASalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //Guid docRelationshipUUID = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderGet(salesOrder, salesOrderItem, docRelationshipUUID, select, expand);
            //Assert.IsType<ASalesOrderType>(response);
        }

        /// <summary>
        /// Test ASalesOrderPartnerAddressSalesOrderSalesOrderPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderGet
        /// </summary>
        [Fact]
        public void ASalesOrderPartnerAddressSalesOrderSalesOrderPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string partnerFunction = null;
            //string addressRepresentationCode = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderPartnerAddressSalesOrderSalesOrderPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderGet(salesOrder, partnerFunction, addressRepresentationCode, select, expand);
            //Assert.IsType<ASalesOrderType>(response);
        }

        /// <summary>
        /// Test ASalesOrderPost
        /// </summary>
        [Fact]
        public void ASalesOrderPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //APISALESORDERSRVASalesOrderTypeCreate aPISALESORDERSRVASalesOrderTypeCreate = null;
            //var response = instance.ASalesOrderPost(aPISALESORDERSRVASalesOrderTypeCreate);
            //Assert.IsType<ASalesOrderType>(response);
        }

        /// <summary>
        /// Test ASalesOrderPrecdgProcFlowSalesOrderSalesOrderDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderGet
        /// </summary>
        [Fact]
        public void ASalesOrderPrecdgProcFlowSalesOrderSalesOrderDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //Guid docRelationshipUUID = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderPrecdgProcFlowSalesOrderSalesOrderDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderGet(salesOrder, docRelationshipUUID, select, expand);
            //Assert.IsType<ASalesOrderType>(response);
        }

        /// <summary>
        /// Test ASalesOrderRelatedObjectSalesOrderSalesOrderSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderGet
        /// </summary>
        [Fact]
        public void ASalesOrderRelatedObjectSalesOrderSalesOrderSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string sDDocRelatedObjectSequenceNmbr = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderRelatedObjectSalesOrderSalesOrderSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderGet(salesOrder, sDDocRelatedObjectSequenceNmbr, select, expand);
            //Assert.IsType<ASalesOrderType>(response);
        }

        /// <summary>
        /// Test ASalesOrderSalesOrderDelete
        /// </summary>
        [Fact]
        public void ASalesOrderSalesOrderDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //instance.ASalesOrderSalesOrderDelete(salesOrder);
        }

        /// <summary>
        /// Test ASalesOrderSalesOrderGet
        /// </summary>
        [Fact]
        public void ASalesOrderSalesOrderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderSalesOrderGet(salesOrder, select, expand);
            //Assert.IsType<ASalesOrderType>(response);
        }

        /// <summary>
        /// Test ASalesOrderSalesOrderPatch
        /// </summary>
        [Fact]
        public void ASalesOrderSalesOrderPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //ModifiedASalesOrderType modifiedASalesOrderType = null;
            //instance.ASalesOrderSalesOrderPatch(salesOrder, modifiedASalesOrderType);
        }

        /// <summary>
        /// Test ASalesOrderSalesOrderToBillingPlanGet
        /// </summary>
        [Fact]
        public void ASalesOrderSalesOrderToBillingPlanGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderSalesOrderToBillingPlanGet(salesOrder, select, expand);
            //Assert.IsType<ASalesOrderBillingPlanType>(response);
        }

        /// <summary>
        /// Test ASalesOrderSalesOrderToItemGet
        /// </summary>
        [Fact]
        public void ASalesOrderSalesOrderToItemGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //int? top = null;
            //int? skip = null;
            //string? filter = null;
            //string? inlinecount = null;
            //List<string>? orderby = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderSalesOrderToItemGet(salesOrder, top, skip, filter, inlinecount, orderby, select, expand);
            //Assert.IsType<Wrapper1>(response);
        }

        /// <summary>
        /// Test ASalesOrderSalesOrderToItemPost
        /// </summary>
        [Fact]
        public void ASalesOrderSalesOrderToItemPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //APISALESORDERSRVASalesOrderItemTypeCreate aPISALESORDERSRVASalesOrderItemTypeCreate = null;
            //var response = instance.ASalesOrderSalesOrderToItemPost(salesOrder, aPISALESORDERSRVASalesOrderItemTypeCreate);
            //Assert.IsType<ASalesOrderItemType>(response);
        }

        /// <summary>
        /// Test ASalesOrderSalesOrderToPartnerGet
        /// </summary>
        [Fact]
        public void ASalesOrderSalesOrderToPartnerGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //int? top = null;
            //int? skip = null;
            //string? filter = null;
            //string? inlinecount = null;
            //List<string>? orderby = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderSalesOrderToPartnerGet(salesOrder, top, skip, filter, inlinecount, orderby, select, expand);
            //Assert.IsType<Wrapper2>(response);
        }

        /// <summary>
        /// Test ASalesOrderSalesOrderToPartnerPost
        /// </summary>
        [Fact]
        public void ASalesOrderSalesOrderToPartnerPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //APISALESORDERSRVASalesOrderHeaderPartnerTypeCreate aPISALESORDERSRVASalesOrderHeaderPartnerTypeCreate = null;
            //var response = instance.ASalesOrderSalesOrderToPartnerPost(salesOrder, aPISALESORDERSRVASalesOrderHeaderPartnerTypeCreate);
            //Assert.IsType<ASalesOrderHeaderPartnerType>(response);
        }

        /// <summary>
        /// Test ASalesOrderSalesOrderToPaymentPlanItemDetailsGet
        /// </summary>
        [Fact]
        public void ASalesOrderSalesOrderToPaymentPlanItemDetailsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //int? top = null;
            //int? skip = null;
            //string? filter = null;
            //string? inlinecount = null;
            //List<string>? orderby = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderSalesOrderToPaymentPlanItemDetailsGet(salesOrder, top, skip, filter, inlinecount, orderby, select, expand);
            //Assert.IsType<Wrapper3>(response);
        }

        /// <summary>
        /// Test ASalesOrderSalesOrderToPaymentPlanItemDetailsPost
        /// </summary>
        [Fact]
        public void ASalesOrderSalesOrderToPaymentPlanItemDetailsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //APISALESORDERSRVASlsOrdPaymentPlanItemDetailsTypeCreate aPISALESORDERSRVASlsOrdPaymentPlanItemDetailsTypeCreate = null;
            //var response = instance.ASalesOrderSalesOrderToPaymentPlanItemDetailsPost(salesOrder, aPISALESORDERSRVASlsOrdPaymentPlanItemDetailsTypeCreate);
            //Assert.IsType<ASlsOrdPaymentPlanItemDetailsType>(response);
        }

        /// <summary>
        /// Test ASalesOrderSalesOrderToPrecedingProcFlowDocGet
        /// </summary>
        [Fact]
        public void ASalesOrderSalesOrderToPrecedingProcFlowDocGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //int? top = null;
            //int? skip = null;
            //string? filter = null;
            //string? inlinecount = null;
            //List<string>? orderby = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderSalesOrderToPrecedingProcFlowDocGet(salesOrder, top, skip, filter, inlinecount, orderby, select, expand);
            //Assert.IsType<Wrapper4>(response);
        }

        /// <summary>
        /// Test ASalesOrderSalesOrderToPricingElementGet
        /// </summary>
        [Fact]
        public void ASalesOrderSalesOrderToPricingElementGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //int? top = null;
            //int? skip = null;
            //string? filter = null;
            //string? inlinecount = null;
            //List<string>? orderby = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderSalesOrderToPricingElementGet(salesOrder, top, skip, filter, inlinecount, orderby, select, expand);
            //Assert.IsType<Wrapper5>(response);
        }

        /// <summary>
        /// Test ASalesOrderSalesOrderToPricingElementPost
        /// </summary>
        [Fact]
        public void ASalesOrderSalesOrderToPricingElementPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //APISALESORDERSRVASalesOrderHeaderPrElementTypeCreate aPISALESORDERSRVASalesOrderHeaderPrElementTypeCreate = null;
            //var response = instance.ASalesOrderSalesOrderToPricingElementPost(salesOrder, aPISALESORDERSRVASalesOrderHeaderPrElementTypeCreate);
            //Assert.IsType<ASalesOrderHeaderPrElementType>(response);
        }

        /// <summary>
        /// Test ASalesOrderSalesOrderToRelatedObjectGet
        /// </summary>
        [Fact]
        public void ASalesOrderSalesOrderToRelatedObjectGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //int? top = null;
            //int? skip = null;
            //string? filter = null;
            //string? inlinecount = null;
            //List<string>? orderby = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderSalesOrderToRelatedObjectGet(salesOrder, top, skip, filter, inlinecount, orderby, select, expand);
            //Assert.IsType<Wrapper6>(response);
        }

        /// <summary>
        /// Test ASalesOrderSalesOrderToRelatedObjectPost
        /// </summary>
        [Fact]
        public void ASalesOrderSalesOrderToRelatedObjectPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //APISALESORDERSRVASalesOrderRelatedObjectTypeCreate aPISALESORDERSRVASalesOrderRelatedObjectTypeCreate = null;
            //var response = instance.ASalesOrderSalesOrderToRelatedObjectPost(salesOrder, aPISALESORDERSRVASalesOrderRelatedObjectTypeCreate);
            //Assert.IsType<ASalesOrderRelatedObjectType>(response);
        }

        /// <summary>
        /// Test ASalesOrderSalesOrderToSubsequentProcFlowDocGet
        /// </summary>
        [Fact]
        public void ASalesOrderSalesOrderToSubsequentProcFlowDocGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //int? top = null;
            //int? skip = null;
            //string? filter = null;
            //string? inlinecount = null;
            //List<string>? orderby = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderSalesOrderToSubsequentProcFlowDocGet(salesOrder, top, skip, filter, inlinecount, orderby, select, expand);
            //Assert.IsType<Wrapper7>(response);
        }

        /// <summary>
        /// Test ASalesOrderSalesOrderToTextGet
        /// </summary>
        [Fact]
        public void ASalesOrderSalesOrderToTextGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //int? top = null;
            //int? skip = null;
            //string? filter = null;
            //string? inlinecount = null;
            //List<string>? orderby = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderSalesOrderToTextGet(salesOrder, top, skip, filter, inlinecount, orderby, select, expand);
            //Assert.IsType<Wrapper8>(response);
        }

        /// <summary>
        /// Test ASalesOrderSalesOrderToTextPost
        /// </summary>
        [Fact]
        public void ASalesOrderSalesOrderToTextPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //APISALESORDERSRVASalesOrderTextTypeCreate aPISALESORDERSRVASalesOrderTextTypeCreate = null;
            //var response = instance.ASalesOrderSalesOrderToTextPost(salesOrder, aPISALESORDERSRVASalesOrderTextTypeCreate);
            //Assert.IsType<ASalesOrderTextType>(response);
        }

        /// <summary>
        /// Test ASalesOrderSubsqntProcFlowSalesOrderSalesOrderDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderGet
        /// </summary>
        [Fact]
        public void ASalesOrderSubsqntProcFlowSalesOrderSalesOrderDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //Guid docRelationshipUUID = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderSubsqntProcFlowSalesOrderSalesOrderDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderGet(salesOrder, docRelationshipUUID, select, expand);
            //Assert.IsType<ASalesOrderType>(response);
        }

        /// <summary>
        /// Test ASalesOrderTextSalesOrderSalesOrderLanguageLanguageLongTextIDLongTextIDToSalesOrderGet
        /// </summary>
        [Fact]
        public void ASalesOrderTextSalesOrderSalesOrderLanguageLanguageLongTextIDLongTextIDToSalesOrderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string language = null;
            //string longTextID = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASalesOrderTextSalesOrderSalesOrderLanguageLanguageLongTextIDLongTextIDToSalesOrderGet(salesOrder, language, longTextID, select, expand);
            //Assert.IsType<ASalesOrderType>(response);
        }

        /// <summary>
        /// Test ASlsOrdPaymentPlanItemDetailsSalesOrderSalesOrderPaymentPlanItemPaymentPlanItemToSalesOrderGet
        /// </summary>
        [Fact]
        public void ASlsOrdPaymentPlanItemDetailsSalesOrderSalesOrderPaymentPlanItemPaymentPlanItemToSalesOrderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string paymentPlanItem = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASlsOrdPaymentPlanItemDetailsSalesOrderSalesOrderPaymentPlanItemPaymentPlanItemToSalesOrderGet(salesOrder, paymentPlanItem, select, expand);
            //Assert.IsType<ASalesOrderType>(response);
        }

        /// <summary>
        /// Test ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet
        /// </summary>
        [Fact]
        public void ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string salesOrder = null;
            //string salesOrderItem = null;
            //string billingPlan = null;
            //string billingPlanItem = null;
            //List<string>? select = null;
            //List<string>? expand = null;
            //var response = instance.ASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet(salesOrder, salesOrderItem, billingPlan, billingPlanItem, select, expand);
            //Assert.IsType<ASalesOrderType>(response);
        }
    }
}
